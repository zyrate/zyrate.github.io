<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyrate&#39;s Blog</title>
  
  <subtitle>为者常成，行者常至</subtitle>
  <link href="https://zyrate.github.io/atom.xml" rel="self"/>
  
  <link href="https://zyrate.github.io/"/>
  <updated>2024-03-12T10:00:04.235Z</updated>
  <id>https://zyrate.github.io/</id>
  
  <author>
    <name>Yunrui Zheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MIT6.824 分布式系统课程实验笔记 Lab 2</title>
    <link href="https://zyrate.github.io/2024/01/05/824%20Lab%202/"/>
    <id>https://zyrate.github.io/2024/01/05/824%20Lab%202/</id>
    <published>2024-01-04T16:00:00.000Z</published>
    <updated>2024-03-12T10:00:04.235Z</updated>
    
    <content type="html"><![CDATA[<p>Lab 2、3、4 是一个系列，最终需要实现一个可容错、可分片的分布式 K-V 数据库，该数据库的底层基于分布式共识算法 Raft。Lab 2 的目标就是实现 Raft 底层协议，以支持数据库的<strong>分布式、多副本、一致性</strong>的需求。</p><h2 id="Raft-算法"><a href="#Raft-算法" class="headerlink" title="Raft 算法"></a>Raft 算法</h2><p>Raft 算法的提出就是为了解决之前的分布式共识算法 Paxos 可理解性较差、不易实现的问题。但即便如此，Raft 算法理解、实现起来也并不简单，并且有很多需要注意的细节问题。Raft 算法<strong>设计的目的是什么</strong>？本节先从分布式副本集群、主备同步、分布式共识等几个方面进行简单的梳理。</p><h3 id="多副本集群"><a href="#多副本集群" class="headerlink" title="多副本集群"></a>多副本集群</h3><p>多副本集群是分布式系统能够正常运行的基础。我们构建分布式系统可能有多个原因，比较主要的两个原因就是：<strong>并行计算</strong>和<strong>容错</strong>。这两者之间是有一定因果关系的，如下面的逻辑推演：</p><ol><li>单体应用想要提高性能 ——&gt; 并行计算</li><li>并行计算需要将数据划分后同时进行 ——&gt; 构建服务器集群</li><li>构建集群后不可避免地会出现单点故障 ——&gt; 使集群能够自动容错</li><li>容错要求出现故障后数据不丢失 ——&gt; 每个数据复制多个副本</li><li>数据的多个副本必须保持一致性 –&gt; 每个副本之间需要进行同步</li><li>副本同步带来额外的开销 –&gt; 降低了整体性能</li></ol><p>可以看到，最终的结果可能和最初的设想有些矛盾，也就是说为了保证多副本之间的一致性，就必须牺牲掉一定的性能。分布式系统的设计需要在它们之间进行权衡，在能够达到可接受的容错性的同时减少性能的损耗。</p><h3 id="主备同步"><a href="#主备同步" class="headerlink" title="主备同步"></a>主备同步</h3><p>关于如何设计多副本系统，有很多不同的实现，但是基本都离不开<strong>主备同步</strong>。</p><p>也就是有一份主数据（Primary）和多份备份数据（Backup），这里的“数据”是抽象层面的，可以是任何需要多副本的对象，也可代表承载对象的服务器节点。平时我们处理和更新 Primary，同时让 Backup 与 Primary 保持同步，当 Primary 所在的节点故障后可以立刻启用 Backup，而不用等待故障恢复。（需要注意的是，<strong>外部调用者不应当感知到数据有多个副本</strong>）</p><p>关于主备之间的同步，有两种方案：</p><ol><li><strong>State transfer，状态转移</strong>。Primary 将自己完整状态，比如说内存中的内容，拷贝并发送给 Backup。Backup 会保存收到的最近一次状态。</li><li><strong>Replicated state machine，复制状态机</strong>。使服务器状态发生改变的往往是<strong>外部事件</strong>，这个方案不会在不同的副本之间发送完整状态，只会从 Primary 将这些外部事件，例如外部的输入、增删改查，发送给 Backup，从而达到状态同步。</li></ol><p>上面两种方案人们更亲向于后者，因为需要传递的数据更少，但是它实现起来更复杂一些，也会受并行计算的影响（比如在多核处理器上，同样的外部命令可能得到不同的结果，如随机数）。</p><p>不论哪种主备同步，都需要进行良好的<strong>输出控制（Output Rule）</strong>，防止出现<em>外部更新了 Primary，副本因为网络问题没有及时同步数据，而外部已经收到了更新结果</em>的情况。所以大部分的分布式副本系统都涉及到 Primary 停下来等待 Backup 的问题。Raft 算法也不例外。</p><h3 id="分布式共识"><a href="#分布式共识" class="headerlink" title="分布式共识"></a>分布式共识</h3><p>在多副本集群中，Primary 应当只有一个，否则会出现<strong>脑裂</strong>。但是多个节点究竟让谁作 Primary 呢？不同的设计思想可能有不同的实现，但是不管怎样只要是通过<strong>单服务</strong>去决定谁是 Primary 就是有问题的，因为它又会引出<strong>单点故障</strong>，是不可靠的，哪怕这个服务本身也是多副本。比如下面的设计思想：</p><p>多个副本通过<strong>Test-And-Set</strong>服务（TAS 服务本身也是多副本的）去请求当 Primary（类似请求获取分布式锁），最终应该只有一个请求成功。但是在分布式环境下网络是不可靠的，可能会出现下面的情况：</p><p>如果有两个客户端 C1，C2 请求成为主副本，有两个 TAS 服务器 S1，S2。当一个客户端能和一个服务器通信而不能和另外一个通信的时候，就可能会发生脑裂问题。此时客户端有两种选择：</p><ol><li>依次询问所有服务器 S1、S2，等待它们的响应。但这样就失去了<strong>容错</strong>的意义，因为只要有一台服务器坏掉，系统就无法正常运行；而且，<strong>一个好的多副本服务是不应该让客户端意识到有多个副本的。</strong></li><li>认为自己无法与其通信的服务器 S2 已经宕机了，所以其他服务器也一定发现了这个问题，所以可以只去 S1 服务器请求。但是这个想法是错误的，因为 S2 很可能没有宕机，而是由于网络问题， C1 只能通信 S1，C2 只能通信 S2，这样很容易就形成<strong>脑裂</strong>了。</li></ol><p>虽然上面的设计思想在现实生活中可以较好地运行，只要保证集群网络正常就行，但是毕竟是不完美的。</p><p>因此，像 Paxos、Raft、ZAB 这类靠“ <strong>过半票决</strong>  ”思想来保证主备一致性的<strong>分布式共识算法</strong>就被提了出来。</p><h3 id="Raft-算法概述"><a href="#Raft-算法概述" class="headerlink" title="Raft 算法概述"></a>Raft 算法概述</h3><p>Raft 算法本身是一个<strong>复制状态机</strong>架构，其中的外部事件它称为日志（log），日志是有时间顺序的，不同的节点之间只要日志是一致的，那么状态就是一致的。所以 Raft 算法最重要的部分就是日志的<strong>正确同步</strong>。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20240119090836.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><p>图中的<strong>State Machine</strong>部分其实就是需要保证分布式一致性的数据，在不同的应用中指代的对象可能是不同的。比如在分布式 KV 数据库中，它可能存储的就是键和值；在分布式消息队列中，它可能存储的就是消息的状态。Raft 算法并不知道每一条 Log 代表的含义，也不知道状态机目前的状态，它只保证不同节点之间的状态机是一致的。所以 Raft 算法处于一个所有应用共性的位置，也就是上图②和③所代表的流程。</p><p>Raft 算法解决了三个子问题：领导者选举、日志复制、安全性。</p><h4 id="领导者选举"><a href="#领导者选举" class="headerlink" title="领导者选举"></a>领导者选举</h4><p>每个节点可能的状态：follower, candidate, leader</p><p>leader 的作用是协调所有的 follower 进行正确的日志同步，并响应上层的事件输入。它通过<strong>心跳</strong>来在集群中维护自己的“统治地位”。但是如何避免上文所述的<strong>单点故障</strong>呢？如果 leader 断连或者宕机了，那么需要在剩下的 follower 中选择一个新的 leader，选举的规则就是某一个 follower 转变为 candidate，然后让其他节点为自己投票，如果所获同意的票数超过节点总数（包括宕机和断连的）的<strong>一半</strong>（大多数），那么该节点就成为了新的 leader。为了区分新旧 leader ，Raft 采用了任期（Term）的概念，所有旧 Term 的消息都应当被舍弃。在同一个 Term 中，一个 follower 只能给一个 candidate 投票。</p><p>为了尽量避免<strong>选举分裂</strong>的情况，Raft 规定每个 follower 在收不到 leader 心跳的<strong>随机</strong>一段时间后发起新一轮选举。节点的状态转换如下图：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20240122112433.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><p>在 Raft 中，只要 Term 合法，follower 对于 leader 必须无条件服从，所以对 candidate 的投票必须谨慎，因为投票规则决定了数据的安全性。</p><h4 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h4><p>日志复制是 Raft 算法中最重要的部分，需要保证无论是 follower 还是 leader 在宕机重启后经过一定的机制使得日志重新一致。日志的产生来自于客户端（外部）的命令，客户端与 leader 进行交互，它向 leader 发出一个命令，leader 产生一个日志，然后 leader 向 follower 进行同步，当集群中超过半数的 follower 都收到日志后，leader 向客户端通知操作成功。</p><p>这有点像<strong>两阶段提交（2 PC）</strong> 但并不完全是，这里的提交指的是集群的一种状态，也就是某个日志如果达成了<strong>群体一致性</strong>，那么集群就可以将这个日志的状态设置为已提交，leader 向状态机 apply 某个操作进而通知客户端操作成功的前提是该日志已经提交。</p><p>如果 leader 和 follower 都不出错，并且网络正常，那么底层 Raft 的流程就是下面的步骤：</p><ol><li>leader 接收客户端操作命令</li><li>leader 将命令转化为一条日志追加到本地</li><li>leader 向所有的 follower 发起日志追加请求</li><li>follower 收到请求后追加新日志到本地，返回成功与否</li><li>leader 在收到<strong>过半</strong>的 follower 追加成功的答复后，将本地该日志设置为已提交，并向上层状态机 apply</li><li>leader 状态机返回客户端此次操作的结果</li><li>leader 通过心跳向 follower 广播该日志的提交状态</li><li>follower 收到心跳同样将本地的该日志设置为已提交，并向上层状态机 apply</li></ol><p>这样一来，所有节点的本地日志、状态机状态都是一致的。但是，分布式环境下 leader、follower、网络状态都可能频繁出错，所以实际的日志复制情况并没有这么简单，需要考虑数据的恢复，并保证安全性和一致性。</p><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>Raft 需要一定的规则来保证数据的安全性和一致性。</p><p>安全性主要指客户端已经收到处理成功的操作不能因为集群的某些节点宕机而丢失或被覆盖。具体来说的话可以分为：<strong>投票安全性</strong>、<strong>复制安全性</strong>、<strong>提交安全性</strong>。</p><p>投票安全性：</p><ul><li>follower 在每个 Term 只能对一个 candidate 投票</li><li>不能选日志的 Term 和 Index 落后自己的节点作为 leader</li></ul><p>复制安全性：</p><ul><li>follower 在收到 leader 的日志追加请求时如果位置冲突则需要通知 leader 进行快速恢复（从不冲突的位置进行覆盖），这样能保证在新的 leader 上任后，所有的 follower 和 leader 的日志一致，并且没有空隙</li></ul><p>提交安全性：</p><ul><li>因为一个节点一旦提交、apply 后就不能反悔了，所以提交也需要慎重</li><li>leader 需要在合适的时机确定所有的 follower 都已经完成同步的日志号，并且<strong>该日志的 Term 需要等于当前 Term</strong>，然后将该位置的日志提交</li><li>follower 只有在收到 leader 的提交位置后才能更新自己的提交位置</li></ul><p>一致性主要指集群中所有的节点数据需要能够容错，在恢复后仍然能保持一致。从整体来看，Raft 算法是<strong>强一致性模型</strong>，也就是系统保证不论在哪个时间点，外部的每个读操作都将返回最近的写操作的结果。保证强一致的机制就是 Raft 的集群提交状态，只有 leader 收到过半的 follower 的同步成功后，才向上层返回结果，此时哪怕 leader 宕机了，上面的投票规则也能保证选举出来的新 leader 具有最新的日志。</p><h2 id="Lab-要求"><a href="#Lab-要求" class="headerlink" title="Lab 要求"></a>Lab 要求</h2><p>Lab 2 有四个子 Lab：</p><ul><li>Lab 2A：实现 leader 选举</li><li>Lab 2B：实现日志复制/同步</li><li>Lab 2C：实现持久化</li><li>Lab 2D：实现日志压缩（快照）</li></ul><p>每一个子 Lab 都有一系列测试。2A 和 2B 是最主要的实现，2C 和 2D 以这两个为基础。但是 2C 和 2D 的测试极其严苛，能够测出很多前两个 Lab 中存在的 BUG，所以这四个 Lab 基本上是难度递增。</p><p>实验提供了 <code>labrpc.go</code> 用来模拟现实网络环境下的 RPC 调用，同时也可以产生很严苛的测试场景。我们的所有代码写在 <code>raft.go</code> 中，这个文件仅规定了 Raft 与外界交互的接口，其他的内部实现全部需要自己完成。</p><p>实验层会调用该文件中 <code>Make(peers, me, ...)</code> 函数来生成一个 Raft 对象，通过这个函数的参数我们可以知道集群中总共有多少个节点 (peers)，自己是哪一个节点（me），还有与外界传递信息的 apply 通道（applyCh）等。</p><p>实验层会调用 <code>GetState()</code> 方法来获取当前节点所处的状态（leader/follower/candidate），通常情况下，客户端只会与 leader 进行交互。</p><h2 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h2><h3 id="多-Leader-错误"><a href="#多-Leader-错误" class="headerlink" title="多 Leader 错误"></a>多 Leader 错误</h3><p>一般来说，只要不出现网络分区情况，集群中只能有一个 Leader，否则就是脑裂了。这就要求节点的身份及时、正确地改变。任何节点在收到 AE 和 Vote 请求时都要根据 Term 去判断自己是否要改变身份，这里身份的改变和其他属性（如当前 Term）的改变要<strong>保持原子性</strong>，否则容易出现多 Leader 错误。</p><h3 id="计时功能设计"><a href="#计时功能设计" class="headerlink" title="计时功能设计"></a>计时功能设计</h3><p>Lab 官方推荐在需要进行周期性动作的地方使用 <code>time.Sleep()</code> 函数实现（因为简单），但是这个方案对于 Raft 的超时选举算法并不优雅，因为 Raft 要求 follower 在每次收到 leader 的心跳后重置选举计时器。因此我采用了 <code>time.Timer</code> 来实现 follower 的选举计时和 leader 的心跳计时，虽然 debug 难度增加了，但是更加接近 Raft 设计者的本意。</p><h3 id="Log-存储问题"><a href="#Log-存储问题" class="headerlink" title="Log 存储问题"></a>Log 存储问题</h3><p>从逻辑上看，每个节点的本地日志就是一个 log 数组，一开始我也仅仅用一个数组存储，但是 log Index 的下标是从 1 开始的（论文中的考量），这就需要判断好各种边界问题。此外，做到 Lab 2D 的时候要求对日志进行裁剪，这个时候逻辑 Index 和实际 Index 已经完全不同了，如果每次都额外判断、处理的话工作量太大。所以我采用了<strong>面向对象</strong>的思想，引入了 LogManager 对象，用于统一向外界提供从 1 开始的索引映射和增删改查功能，大大的方便了后续开发。</p><h3 id="一致性检查的问题"><a href="#一致性检查的问题" class="headerlink" title="一致性检查的问题"></a>一致性检查的问题</h3><p>Leader 始终要保证自己的 follower 和自己的 log 内容是一模一样的，同步就是通过 AE 请求。如果 Leader 发现了不一致的现象就要及时纠正。但是，检查的时机如何确定，如果次数太少，会导致群体一致性达成过慢；如果太过频繁，会加大并发问题的概率，同时也会造成网络拥堵。一般来说，每次心跳都是一次同步，但是远远不够，因为客户端可能会在两次心跳之间多次操作，请求达成一致。因此需要一种机制，既能够及时响应 Command，又能够尽量减少并发 RPC 冲突。</p><p>我采用的是清零心跳计时器的方法。计时器清零后，如果上一次心跳已经结束，那么下一次会马上开始；如果上一次还没结束，那么就会等待心跳全部发送出去。这样不会再短时间的高并发情况下导致过多的心跳 RPC 出现，同时也能够达到一种<strong>批处理</strong>的效果。</p><h3 id="如何判断提交状态"><a href="#如何判断提交状态" class="headerlink" title="如何判断提交状态"></a>如何判断提交状态</h3><p>一开始，我是在每次心跳完成后，根据 follower 的回复判断是否能够更新提交，后来发现太天真了。论文中设置 matchIndex 是非常有必要的，需要另起一个协程，通过判断 matchIndex 和 Leader 的 log index 来判断当前的提交位置。并且有一个条件非常关键：Raft 永远不会通过计算副本数目的方式来提交<strong>之前任期内</strong>的日志条目，否则在宕机重启后会出现数据不一致。</p><h3 id="持久化需要注意什么"><a href="#持久化需要注意什么" class="headerlink" title="持久化需要注意什么"></a>持久化需要注意什么</h3><p>在分布式开发中，任何时刻都要确保系统在某一时刻的状态是一致的，因此在状态更改的时候为了防止宕机丢失数据，一定要及时进行持久化。<br>还要搞清两个问题：</p><ol><li>为什么要持久化 currentTerm？<ol><li>因为避免出现两个意义不同的但数字相同的 Term</li></ol></li><li>为什么要持久化 votedFor？<ol><li>因为要避免一个 server 同时给多个 Candidate 投票</li></ol></li></ol><h3 id="快照需要注意什么"><a href="#快照需要注意什么" class="headerlink" title="快照需要注意什么"></a>快照需要注意什么</h3><p>在论文中有两种方法进行快照，一种是每个服务器独立拍摄快照的；另一种是由 leader 领导拍摄。Lab 是第一种，因此不用由 leader 主动同步，而是发现 follower 过于落后时同步。每个服务器平时也不需要 apply 快照，而是在过于落后或重启时才 apply。</p><p>因为快照请求有可能在任何时间到达，它和 apply 操作是互斥的，因此一定要保证先后顺序，不让多余的 log 向上层 apply。</p><h3 id="分布式应用开发的难点"><a href="#分布式应用开发的难点" class="headerlink" title="分布式应用开发的难点"></a>分布式应用开发的难点</h3><p>最难的部分就是<strong>不确定性</strong>，状态、请求顺序、机器可靠等问题都有极大地不确定性，需要很多看起来冗余实际上非常有必要的操作去避免不确定性带来的数据不一致问题，比如代码的先后顺序、原子性保证等。</p><p>分布式应用的调试会非常折磨，因为有些 BUG 无法快速复现，因此在开发是需要养成随时打印日志的习惯，以便后期排查。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="Raft-对象结构"><a href="#Raft-对象结构" class="headerlink" title="Raft 对象结构"></a>Raft 对象结构</h3><p>Raft 从实现层面来说是一个底层库，向上层（Server）提供一致性保障的方法，因此需要明了 Raft 向外提供什么接口：</p><ul><li> <code>Make(peers, me, persister, applyCh)</code>，在当前 Server 节点构建 Raft 对象并返回，peers 是集群节点信息，me 是当前节点编号，persister 是持久化工具类，applyCh 是 Server 接收某个命令达成一致性结果的消息通道；</li><li><code>Start(command interface&#123;&#125;)</code>，向当前节点发起一条命令一致性过程，该方法只有处于 Leader 状态的节点才可被调用；</li><li><code>GetState()</code>，获取 Server 当前的 Raft 状态；</li><li><code>Kill()</code>，结束 Raft 服务；</li><li><code>Snapshot(index int, snapshot []byte)</code>，Server 完成快照，向 Raft 同步（日志裁剪）</li></ul><p>我设计的 Raft 对象关键字段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 持久属性</span></span><br><span class="line">currentTerm <span class="type">int</span>         <span class="comment">// 当前任期</span></span><br><span class="line">votedFor    <span class="type">int</span>         <span class="comment">// 当前任期投票给了谁</span></span><br><span class="line">lm          *LogManager <span class="comment">// 管理日志存储</span></span><br><span class="line">snapshot    []<span class="type">byte</span>      <span class="comment">// 上一次保存的快照</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 易失属性</span></span><br><span class="line">state         <span class="type">string</span>        <span class="comment">// 当前角色状态</span></span><br><span class="line">commitIndex   <span class="type">int</span>           <span class="comment">// 已提交的最大下标</span></span><br><span class="line">lastApplied   <span class="type">int</span>           <span class="comment">// 以应用到状态机的最大下标</span></span><br><span class="line">applyCh       <span class="keyword">chan</span> ApplyMsg <span class="comment">// apply通道</span></span><br><span class="line">applyCond     *sync.Cond    <span class="comment">// apply协程唤醒条件</span></span><br><span class="line">installSnapCh <span class="keyword">chan</span> <span class="type">int</span>      <span class="comment">// install snapshot的信号通道，传入trim index</span></span><br><span class="line">backupApplied <span class="type">bool</span>          <span class="comment">// 从磁盘恢复的snapshot已经apply</span></span><br><span class="line">notTicking    <span class="keyword">chan</span> <span class="type">bool</span>     <span class="comment">// 没有进行选举计时</span></span><br><span class="line">electionTimer *time.Timer   <span class="comment">// 选举计时器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Leader特有字段</span></span><br><span class="line">nextIndexes    []<span class="type">int</span>       <span class="comment">// 对于每个follower，leader要发送的下一个复制日志下标</span></span><br><span class="line">matchIndexes   []<span class="type">int</span>       <span class="comment">// 已知每个follower和自己一致的最大日志下标</span></span><br><span class="line">heartbeatTimer *time.Timer <span class="comment">// 心跳计时器</span></span><br></pre></td></tr></table></figure><p>易失属性是指断电重启后就丢失内容的属性，丢失后不影响状态的正确性；持久属性是必须在适当的时间进行持久化的属性，否则断电重启后集群会发生异常。</p><h3 id="超时选举实现"><a href="#超时选举实现" class="headerlink" title="超时选举实现"></a>超时选举实现</h3><p>在集群刚启动的时候，所有的节点都是 follower 状态，需要节点自觉地发起选举。为了避免同一个时刻有多个节点发起选举造成<strong>选举分裂</strong>，采用<strong>随机超时策略</strong>，当一个节点在某个随机的时间内都没有收到心跳的话，他便发起新一轮选举。<br><strong>选举流程：</strong></p><ol><li>当前 Term+1</li><li>转换状态为 candidate</li><li>投自己一票</li><li>向其他人广播选举请求</li><li>当收到超过半数投票后，转换为 leader，开启心跳</li></ol><p>投票通过 RequestVoteRPC 进行通知</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span></span> kickOffElection() &#123;</span><br><span class="line">rf.currentTerm++     <span class="comment">// 更新任期</span></span><br><span class="line">rf.state = CANDIDATE <span class="comment">// 变为候选人</span></span><br><span class="line">rf.votedFor = rf.me  <span class="comment">// 先投自己一票</span></span><br><span class="line">rf.persist()</span><br><span class="line">votes := <span class="number">1</span></span><br><span class="line">total := <span class="built_in">len</span>(rf.peers)</span><br><span class="line">args := rf.genRequestVoteArgs()</span><br><span class="line">mu := sync.Mutex&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i == rf.me &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(server <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">reply := RequestVoteReply&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> !rf.sendRequestVote(server, &amp;args, &amp;reply) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> args.Term == rf.currentTerm &amp;&amp; rf.state == CANDIDATE &#123; <span class="comment">// 防止等的时间太长，已经开始了下一轮，或者身份已经变化</span></span><br><span class="line"><span class="keyword">if</span> reply.Term &lt; rf.currentTerm &#123; <span class="comment">// 投票者的任期小于自己的</span></span><br><span class="line"><span class="comment">// 丢弃</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> reply.VoteGranted &#123;</span><br><span class="line">mu.Lock()</span><br><span class="line">votes++</span><br><span class="line"><span class="keyword">if</span> rf.state != LEADER &amp;&amp; votes &gt; total/<span class="number">2</span> &#123; <span class="comment">// 得票超半数</span></span><br><span class="line">rf.initLeader()</span><br><span class="line">rf.state = LEADER</span><br><span class="line"><span class="comment">// 立即开始心跳</span></span><br><span class="line"><span class="keyword">go</span> rf.heartbeat()</span><br><span class="line">&#125;</span><br><span class="line">mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意选举过程中身份、任期的判断和互斥锁的使用。</p><p><strong>投票流程：</strong><br>任何节点在接收到某个<strong>非旧任期</strong> candidate 的投票请求后都要有所响应，要么同意要么否决。需要根据安全性规则投票。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span></span> RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) &#123;</span><br><span class="line"><span class="keyword">if</span> args.Term &gt;= rf.currentTerm &#123; <span class="comment">// 候选人要比自己所在任期领先或持平</span></span><br><span class="line"><span class="keyword">if</span> args.Term &gt; rf.currentTerm &#123; <span class="comment">// 新任期重置投票记录,改变身份</span></span><br><span class="line">rf.enterNewTerm(args.Term)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> rf.state != CANDIDATE &#123; <span class="comment">// 如果不是候选人就重置选举计时</span></span><br><span class="line">rf.resetElectionTimer()</span><br><span class="line">&#125;</span><br><span class="line">rf.mu.Lock()</span><br><span class="line">reply.Term = rf.currentTerm</span><br><span class="line">reply.VoteGranted = <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> rf.votedFor == <span class="number">-1</span> || rf.votedFor == args.CandidateId &#123; <span class="comment">// 每个任期只能投一次票</span></span><br><span class="line"><span class="comment">// 安全性检查，即不能选日志的term和index落后自己的节点作为leader，term优先级大于index</span></span><br><span class="line"><span class="built_in">len</span> := rf.lm.<span class="built_in">len</span>()</span><br><span class="line"><span class="keyword">var</span> lastLogIndex, lastLogTerm <span class="type">int</span> <span class="comment">// 自身的最后index和term</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> == rf.lm.lastTrimmedIndex &#123;</span><br><span class="line">lastLogIndex = rf.lm.lastTrimmedIndex</span><br><span class="line">lastLogTerm = rf.lm.lastTrimmedTerm</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">lastLogIndex = <span class="built_in">len</span></span><br><span class="line">lastLogTerm = rf.lm.get(<span class="built_in">len</span>).Term</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> lastLogTerm == <span class="number">0</span> || lastLogTerm &lt; args.LastLogTerm &#123; <span class="comment">// 比较log term</span></span><br><span class="line">reply.VoteGranted = <span class="literal">true</span></span><br><span class="line">rf.votedFor = args.CandidateId</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> lastLogTerm == args.LastLogTerm &amp;&amp; lastLogIndex &lt;= args.LastLogIndex &#123; <span class="comment">// log term一样，比较index</span></span><br><span class="line">reply.VoteGranted = <span class="literal">true</span></span><br><span class="line">rf.votedFor = args.CandidateId</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rf.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> rf.persist() <span class="comment">// 返回前持久化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这个部分涉及到了之后的日志剪裁，所以代码稍复杂。</p><h3 id="Leader-心跳实现"><a href="#Leader-心跳实现" class="headerlink" title="Leader 心跳实现"></a>Leader 心跳实现</h3><p>当选成功的 Leader 需要立即发起心跳，心跳的目的有两个：</p><ol><li>维护自己的统治地位</li><li>对 follower 进行日志同步</li></ol><p>均通过 AppendEntriesRPC 进行通知</p><ul><li>当 Entry 为空时，是心跳</li><li>当 Entry 不为空时，是日志同步<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span></span> sendHeartbeats() &#123;</span><br><span class="line">total := <span class="built_in">len</span>(rf.peers)</span><br><span class="line">args := AppendEntriesArgs&#123;&#125;</span><br><span class="line">args.Term = rf.currentTerm</span><br><span class="line">args.LeaderId = rf.me</span><br><span class="line">args.LeaderCommit = rf.commitIndex</span><br><span class="line"><span class="comment">// follower在收到日志后首先要检查这两个参数，与自己的不一致的话就要返回false</span></span><br><span class="line"><span class="comment">// 这里是将leader目前最高index发送给follower去比对一致性，注意边界判断</span></span><br><span class="line">rf.mu.Lock()</span><br><span class="line"><span class="keyword">if</span> rf.lm.<span class="built_in">len</span>() &gt;= <span class="number">1</span> &#123;</span><br><span class="line">args.PrevLogIndex = rf.lm.<span class="built_in">len</span>()</span><br><span class="line"><span class="keyword">if</span> args.PrevLogIndex &gt; rf.lm.lastTrimmedIndex &#123;</span><br><span class="line">args.PrevLogTerm = rf.lm.get(args.PrevLogIndex).Term</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">args.PrevLogIndex = rf.lm.lastTrimmedIndex</span><br><span class="line">args.PrevLogTerm = rf.lm.lastTrimmedTerm</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rf.mu.Unlock()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; !rf.killed() &amp;&amp; i &lt; total &amp;&amp; rf.state == LEADER; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i != rf.me &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(server <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">reply := AppendEntriesReply&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> rf.state == LEADER &amp;&amp; rf.sendRequestAppendEntries(server, &amp;args, &amp;reply) &#123;</span><br><span class="line"><span class="keyword">if</span> reply.Term &gt; rf.currentTerm &#123; <span class="comment">// 其他节点的Term比自己高了，转变为follower</span></span><br><span class="line">rf.enterNewTerm(reply.Term)</span><br><span class="line">rf.resetElectionTimer()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !reply.Success &#123; <span class="comment">// 说明出现了日志不一致</span></span><br><span class="line"><span class="comment">// 主发生变化时有可能Index异常，因此先修正一次</span></span><br><span class="line">rf.fastBackup(server, reply)</span><br><span class="line">rf.agreement(server, rf.lm.<span class="built_in">len</span>(), <span class="literal">false</span>) <span class="comment">// 从最新位置检查一致性</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 更新一致的位置</span></span><br><span class="line">rf.mu.Lock()</span><br><span class="line">rf.nextIndexes[server] = args.PrevLogIndex + <span class="number">1</span></span><br><span class="line">rf.matchIndexes[server] = args.PrevLogIndex</span><br><span class="line">rf.mu.Unlock()</span><br><span class="line">rf.tryCommit() <span class="comment">// 每次心跳成功后检查能否进行提交</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>该方法通过定时器，定时执行。<br>Leader 会拿自己当前最新的 log 的位置去询问所有的 follower 该位置是否冲突，如果不冲突，那么在 Leader 记录该 follower 与自己的 log 最大匹配的下标和下一个接收日志的下标；如果冲突，那么就需要进入<strong>快速恢复和同步</strong>的流程。</p><h3 id="快速恢复和同步实现"><a href="#快速恢复和同步实现" class="headerlink" title="快速恢复和同步实现"></a>快速恢复和同步实现</h3><p>在 Leader 察觉到有 follower 与自己的 log 有冲突时，需要进行同步。因为 Leader 是从自己当前的最高 log 位询问 follower 的，所以 Leader 需要一步一步把 log 位置向前移再次询问，直到遇到一个 follower 不冲突的位置，那么从这个位置往后都要被 Leader 的日志所覆盖。这也是强一致性的体现。</p><p>但是，一个 follower 有可能刚刚宕机重启，它的日志可能落后于 Leader 很多条，这时候一步一步的试探效率十分低下。因此我们采用<strong>快速恢复策略</strong>，即 Leader 每次以 Term 为单位退回而不是 Index。</p><p>具体的做法就是 follower 在拒绝 Leader 的 AE 请求时在回应中添加一个额外的字段，让 Leader 能够判断如何快速回退：</p><ul><li>XTerm：冲突的 log 任期，如果不存在 log，返回-1</li><li>XIndex：任期号为 XTerm 的第一条 Log 的 Index</li><li>XLen：follower 自己的 log 长度</li></ul><p>Leader 端的快速恢复算法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span></span> fastBackup(server <span class="type">int</span>, reply AppendEntriesReply) &#123;</span><br><span class="line">rf.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> rf.mu.Unlock()</span><br><span class="line"><span class="keyword">if</span> reply.XTerm == <span class="number">-1</span> &#123; <span class="comment">// follower对应位置没有log</span></span><br><span class="line">rf.nextIndexes[server] = reply.XLen + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> reply.XTerm == <span class="number">0</span> &#123; <span class="comment">// 某个地方出问题了，执行到这里不应该是0</span></span><br><span class="line">rf.nextIndexes[server] = <span class="number">1</span> <span class="comment">// 重置为1总没错</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">lastOfTerm := rf.findLastLogIndexOfTerm(reply.XTerm)</span><br><span class="line"><span class="keyword">if</span> lastOfTerm == <span class="number">-1</span> &#123; <span class="comment">// leader没有follower的Term</span></span><br><span class="line">rf.nextIndexes[server] = reply.XIndex</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rf.nextIndexes[server] = lastOfTerm + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Leader-提交判断"><a href="#Leader-提交判断" class="headerlink" title="Leader 提交判断"></a>Leader 提交判断</h3><p>一开始，我们总会容易认为以 cmd 为单位进行判断，因为 Raft 的逻辑模型很明显：Leader 收到 cmd -&gt; 生成日志 -&gt; 集群复制该日志 -&gt; 超过半数成功 -&gt; 提交该日志 -&gt; apply 该 cmd</p><p>但其实，如果出现宕机重启、重新选举等问题，没有外部命令的时候我们同样需要不断更新提交状态，所以需要再每次同步之后，通过 Leader 记录的 matchIndex 来进行判断。需要注意：<strong>Raft 中的提交并不是某个操作，而是一种集群状态，如果 index 位置设置为提交位置，那么说明 index 之前的所有日志都已经提交。</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// leader统计matchIndex，尝试提交</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span></span> tryCommit() &#123;</span><br><span class="line">total := <span class="built_in">len</span>(rf.peers)</span><br><span class="line"><span class="comment">// 找到一个最大的N&gt;commitIndex，使得超过半数的follower的matchIndex大于等于N，</span></span><br><span class="line"><span class="comment">// 且leader自己N位置的log的Term等于当前Term（这一点很重要，安全性问题），那么N的位置就可以提交</span></span><br><span class="line"><span class="built_in">len</span> := rf.lm.<span class="built_in">len</span>()</span><br><span class="line"><span class="keyword">for</span> N := rf.commitIndex + <span class="number">1</span>; N &lt;= <span class="built_in">len</span>; N++ &#123;</span><br><span class="line">majorityCnt := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _, matchIndex := <span class="keyword">range</span> rf.matchIndexes &#123;</span><br><span class="line"><span class="keyword">if</span> matchIndex &gt;= N &amp;&amp; rf.lm.get(N).Term == rf.currentTerm &#123;</span><br><span class="line">majorityCnt++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> majorityCnt &gt; total/<span class="number">2</span> &#123;</span><br><span class="line">rf.commitIndex = N <span class="comment">// 更新提交Index</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rf.mu.Lock()</span><br><span class="line">rf.applyCond.Signal() <span class="comment">// 唤醒异步apply</span></span><br><span class="line">rf.mu.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Leader 的 commitIndex 会随着心跳和同步请求到达所有的 follower，使 follower 的 commitIndex 也随之更新。当任何节点的 commitIndex 领先于上一次 apply 的 Index 的时候，就可以将这部分 log 向上层进行 apply。</p><h3 id="Follower-处理日志同步"><a href="#Follower-处理日志同步" class="headerlink" title="Follower 处理日志同步"></a>Follower 处理日志同步</h3><p>follower 对 Leader 发来的日志同步请求进行处理是整个 Raft 算法最核心的地方，因为他决定着 Raft 的同步机制是否能够保持数据一致性。在实现的时候需要遵循安全性规则并且要注意不确定性情况的发生。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span></span> RequestAppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply) &#123;</span><br><span class="line">reply.Term = rf.currentTerm</span><br><span class="line"><span class="keyword">if</span> args.Term &lt; rf.currentTerm &#123; <span class="comment">// 说明这个leader已经过期</span></span><br><span class="line">reply.Success = <span class="literal">false</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进入新的一个Term，更新</span></span><br><span class="line"><span class="keyword">if</span> args.Term &gt; rf.currentTerm &#123;</span><br><span class="line">rf.enterNewTerm(args.Term) <span class="comment">// 改变votedFor</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rf.state = FOLLOWER <span class="comment">// 不改变votedFor</span></span><br><span class="line">&#125;</span><br><span class="line">rf.resetElectionTimer() <span class="comment">// 刷新选举计时</span></span><br><span class="line">rf.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> rf.mu.Unlock()</span><br><span class="line"><span class="keyword">if</span> args.PrevLogIndex &lt; rf.commitIndex || rf.findLastLogIndexOfTerm(args.Term) &gt; args.PrevLogIndex &#123; <span class="comment">// 说明这个请求滞后了</span></span><br><span class="line">reply.XLen = rf.lm.<span class="built_in">len</span>()</span><br><span class="line">reply.XTerm = <span class="number">-1</span></span><br><span class="line">reply.Success = <span class="literal">false</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一致性检查</span></span><br><span class="line"><span class="keyword">if</span> args.PrevLogIndex &gt; rf.lm.<span class="built_in">len</span>() &#123;</span><br><span class="line">reply.XLen = rf.lm.<span class="built_in">len</span>()</span><br><span class="line">reply.XTerm = <span class="number">-1</span></span><br><span class="line">reply.Success = <span class="literal">false</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> args.PrevLogIndex &gt;= <span class="number">1</span> &amp;&amp; args.PrevLogIndex &gt; rf.lm.lastTrimmedIndex &#123; <span class="comment">// 如果prevIndex已经被裁剪了，那一定不冲突</span></span><br><span class="line"><span class="keyword">if</span> rf.lm.get(args.PrevLogIndex).Term != args.PrevLogTerm &#123;</span><br><span class="line"><span class="comment">// 有冲突了</span></span><br><span class="line">reply.XTerm = rf.lm.get(args.PrevLogIndex).Term</span><br><span class="line">reply.XIndex = rf.findFirstLogIndexOfTerm(reply.XTerm)</span><br><span class="line">reply.Success = <span class="literal">false</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里有可能leader传来的一部分log已经裁掉了，需要过滤一下</span></span><br><span class="line">from := max(args.PrevLogIndex+<span class="number">1</span>, rf.lm.lastTrimmedIndex+<span class="number">1</span>)</span><br><span class="line">filter := min(from-args.PrevLogIndex<span class="number">-1</span>, <span class="built_in">len</span>(args.Entries)) <span class="comment">// 防止越界</span></span><br><span class="line">args.Entries = args.Entries[filter:]</span><br><span class="line">rf.lm.appendFrom(from, args.Entries) <span class="comment">// 强制追加（覆盖）日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交log</span></span><br><span class="line"><span class="keyword">if</span> args.LeaderCommit &gt; rf.commitIndex &#123;</span><br><span class="line">rf.commitIndex = min(args.LeaderCommit, rf.lm.<span class="built_in">len</span>())</span><br><span class="line">&#125;</span><br><span class="line">rf.applyCond.Signal() <span class="comment">// 唤醒异步apply</span></span><br><span class="line">rf.persist()</span><br><span class="line">reply.Success = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要考虑选举计时刷新、滞后请求忽略、支持快速恢复、日志一致性检查、日志剪裁边界处理、更新提交 Index 几个方面。</p><h3 id="异步-apply-实现"><a href="#异步-apply-实现" class="headerlink" title="异步 apply 实现"></a>异步 apply 实现</h3><p>因为 commitIndex 是随时动态变化的，所以 apply 也要跟着随时执行。但是在一个 Raft 内部同一时刻只能有一个 apply 线程，否则会发生冲突。我采用的是<strong>异步唤醒机制</strong>而不是方法调用去进行 apply。在开启 Raft 之后会新建一个 apply 协程，他会不断地比较 lastApplied 和 commitIndex 的大小，如果前者大于等于后者，说明当前没有需要 apply 的 cmd，协程阻塞；一旦 commitIndex 领先了，更新 commitIndex 的线程会唤醒该协程让他去 apply。这样就算同时有多个线程唤醒 apply，也能够保证<strong>幂等性</strong>，不会出现重复 apply 的现象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rf *Raft)</span></span> apply() &#123;</span><br><span class="line"><span class="comment">// 先apply快照</span></span><br><span class="line"><span class="keyword">if</span> rf.lm.lastTrimmedIndex != <span class="number">0</span> &#123;</span><br><span class="line">rf.applySnapshot()</span><br><span class="line">&#125;</span><br><span class="line">rf.backupApplied = <span class="literal">true</span></span><br><span class="line"><span class="comment">// 然后再apply剩余log</span></span><br><span class="line"><span class="keyword">for</span> !rf.killed() &#123;</span><br><span class="line"><span class="keyword">for</span> rf.lastApplied &gt;= rf.commitIndex &#123;</span><br><span class="line"><span class="comment">// 每次休眠前先看有无快照可apply</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> index := &lt;-rf.installSnapCh:</span><br><span class="line"><span class="comment">// 这两个操作要保证原子性</span></span><br><span class="line">rf.trim(index)</span><br><span class="line">rf.applySnapshot()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">rf.mu.Lock()</span><br><span class="line">rf.applyCond.Wait() <span class="comment">// 等待别处唤醒去apply，避免了并发冲突</span></span><br><span class="line">rf.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">rf.mu.Lock()</span><br><span class="line"><span class="comment">// commitIndex领先了</span></span><br><span class="line">applyIndex := rf.lastApplied + <span class="number">1</span></span><br><span class="line">commitIndex := rf.commitIndex</span><br><span class="line">entries := rf.lm.split(applyIndex, commitIndex+<span class="number">1</span>) <span class="comment">// 本轮要apply的所有log</span></span><br><span class="line">rf.mu.Unlock()</span><br><span class="line"><span class="keyword">for</span> index, log := <span class="keyword">range</span> entries &#123;</span><br><span class="line"><span class="keyword">if</span> applyIndex &lt;= rf.lm.lastTrimmedIndex &#123; <span class="comment">// applyIndex落后快照了</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">msg := ApplyMsg&#123;</span><br><span class="line">CommandValid: <span class="literal">true</span>,</span><br><span class="line">Command:      log.Command,</span><br><span class="line">CommandIndex: applyIndex,</span><br><span class="line">CommandTerm:  log.Term, <span class="comment">// 为了Lab3加的</span></span><br><span class="line">&#125;</span><br><span class="line">rf.applyCh &lt;- msg</span><br><span class="line">rf.mu.Lock()</span><br><span class="line"><span class="keyword">if</span> rf.lastApplied &gt; applyIndex &#123; <span class="comment">// 说明snapshot抢先一步了</span></span><br><span class="line">rf.mu.Unlock()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">rf.lastApplied = applyIndex</span><br><span class="line">applyIndex++</span><br><span class="line">rf.mu.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 apply 的过程中需要注意快照的问题，因为快照随时可能到达，快照在 apply 之后不能够在 apply 快照之前的 cmd。此外，宕机重启后如果有已经备份快照也需要先 apply，因此我用了一个 backupApplied 去进行标识。</p><hr><p>全部测试通过：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20240311203348.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab 2、3、4 是一个系列，最终需要实现一个可容错、可分片的分布式 K-V 数据库，该数据库的底层基于分布式共识算法 Raft。Lab 2 的目标就是实现 Raft 底层协议，以支持数据库的&lt;strong&gt;分布式、多副本、一致性&lt;/strong&gt;的需求。&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    
    <category term="go" scheme="https://zyrate.github.io/tags/go/"/>
    
    <category term="mit6824" scheme="https://zyrate.github.io/tags/mit6824/"/>
    
    <category term="分布式" scheme="https://zyrate.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.824 分布式系统课程实验笔记 Lab 1</title>
    <link href="https://zyrate.github.io/2023/12/01/824%20Lab%201/"/>
    <id>https://zyrate.github.io/2023/12/01/824%20Lab%201/</id>
    <published>2023-11-30T16:00:00.000Z</published>
    <updated>2024-03-12T10:00:01.114Z</updated>
    
    <content type="html"><![CDATA[<p>MIT 6.824 是麻省理工大学的一门研究生课程——Distributed Systems，学习这门课程对于了解分布式系统的构建原理、理解分布式程序的运行、优化分布式程序的运行环境会有很大的帮助。课程内容涵盖：分布式、容错、多副本、一致性等议题，附带了 4 个大的实验 Lab 并配套了相关的测试用例，需要基于 Go 语言完成。Lab 会将课程所讲的知识进行实践、贯通，有助于加深我们的理解和记忆。</p><h2 id="做前准备"><a href="#做前准备" class="headerlink" title="做前准备"></a>做前准备</h2><p>网上对于本课程 Lab 的实现很多，但是大部分都是上来就讲原理和代码，很少有提到如何从头开始，而第一步往往是最难的。下面是一些准备工作和注意事项：</p><ol><li>首先，这门课程的 Lab 是完全用 Go 写的，Lecture 也会时不时的讲到 Go 代码，所以需要提前熟悉 Go 的一些基础知识。语言只是一个工具，不必望而却步，只要之前能熟练使用 Java、C++等任何一门编程语言的都可以很快上手 Go，对于完成这门课程足够用了。</li><li>MIT 6.824 课程之所以很出名，原因之一就是其主讲人是 Robert Morris 教授，这是一个传奇大佬，课讲得很好。但似乎 2020 年以后他就不讲这门课了，所以我听的就是他的 2020 年课程，B 站资源：<a href="https://www.bilibili.com/video/BV1R7411t71W/?spm_id_from=333.337.search-card.all.click&vd_source=1c742f240c2781a55574a4a7db3144c0">2020 MIT 6.824 分布式系统_哔哩哔哩_bilibili</a>，目前网上免费资源大部分都是机翻字幕，有一些人工翻译的但并不完全。有个网站 <a href="https://www.simtoco.com/">https://www.simtoco.com/</a> 可以付费购买全部翻译课程，质量挺不错的。</li><li>关于 Lab 资源，我做的是 2022 年的版本，因为 2020 年项目的 Go 版本有些落后，不过其实都无所谓，每一年的 Lab 内容基本上是一样的。网址：<a href="http://nil.csail.mit.edu/6.824/2022/">6.824 Home Page: Spring 2022 (mit.edu)</a></li><li>可以先把项目 clone 下来（在 Lab 1 页面的开头有介绍），这门课程要求学习者不得把自己的仓库公开，以免出现作弊情况，所以如果要 push 到 GitHub 上的话记得把仓库设为私有。</li><li>接下来就可以开始先看 Lecture 了，总共有 20 个 Lec，每个 Lec 前一般都会分配一篇论文阅读（在 Schedule 页面），尽量先读过一遍。其实看完第一课就可以做 Lab 1 了，实现一个简易的分布式 MapReduce 只需要使用 RPC 和一定的容错（虽然并不容易），用不到多副本、一致性等内容。Lab 1 更像是一次牛刀小试，Lab 2~4 才会用到课程所授的大部分知识。</li></ol><p>每个 Lab 提供了一些框架性的代码，需要自己编写关键代码，然后通过测试。具体需要在哪里动笔，课程网页都提供了详细的说明。比如 Lab 1，他已经写好了一个串行的 MapReduce 逻辑，提供了用于 word count 的 Map 和 Reduce 函数。我们先按照指南进行测试，看是否能输出正确结果，如果可以的话就开始着手写分布式 MapReduce 了（在 <code>mr/</code> 目录下的三个文件中）。</p><h2 id="MapReduce-原理"><a href="#MapReduce-原理" class="headerlink" title="MapReduce 原理"></a>MapReduce 原理</h2><p>通过阅读论文，我们可以知道 MapReduce 的作者是如何设计这个模型的：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231128102949.png" alt="MapReduce原理模型"/></div><div class="image-meta"><span class="image-caption center">MapReduce原理模型</span></div></div><p>MapReduce 执行过程</p><ol><li>用户程序中的 MapReduce 库（Client 端）首先将输入文件分割为 M 块，然后在集群上启动许多该程序的副本；</li><li>其中一个副本是 master，其余的是 worker。总共有 M 个 map 任务和 R 个 reduce 任务需要 master 挑选一个空闲的 worker 进行分配；</li><li> 分配了 map 任务的 worker 读取相应输入 split 的内容。它从输入数据中解析键/值对，并将每对传递给用户定义的 map 函数。 map 函数生成的中间键/值对缓冲在内存中；</li><li>定期将键值对写入本地磁盘，并通过分区函数将其分为 R 个区域。这些键值在本地磁盘上的位置被传回 master，主节点负责将这些位置转发给 reduce 工作节点；</li><li>当一个 reduce worker 被通知位置后，通过 RPC 去读取 map workers 上的键值对，（并排序）；</li><li>reduce worker 遍历所有的已排序键值对，将唯一的键和值集合传递给用户的 reduce 函数，函数输出到最终文件（最多 R 个）；</li><li>当所有的 reduce 完成任务后，master 唤醒（通知）用户程序。</li></ol><p>整体流程还是比较清晰的，但是上述内容仅仅是一个逻辑模型，具体如何进行实现还是需要考虑很多问题的，并且与逻辑模型可能会有一些出入。</p><h2 id="需要考虑的问题"><a href="#需要考虑的问题" class="headerlink" title="需要考虑的问题"></a>需要考虑的问题</h2><p>要真正实现 MapReduce，搞清以下几个问题很重要：</p><h5 id="1-Master-和-Worker-是何时初始化的？在初始化时各自接收了哪些参数？"><a href="#1-Master-和-Worker-是何时初始化的？在初始化时各自接收了哪些参数？" class="headerlink" title="1 . Master 和 Worker 是何时初始化的？在初始化时各自接收了哪些参数？"></a>1 . Master 和 Worker 是何时初始化的？在初始化时各自接收了哪些参数？</h5><p>假设集群中每个机器运行一个 Master 或 Worker，这个概念并不是属于某个机器的，它只是这个机器上运行的一个进程。Master 和 Worker 是在用户向集群提交某次计算任务后才初始化的，用户提交的任务内容包括：<strong>输入文件路径</strong>、<strong>Map 函数</strong>、<strong>Reduce 函数</strong>。初始化的动作是由论文中提到的 “user program 调用的 MapReduce 库” 也就是整体框架进行的。</p><p>一般来说，MapReduce 系统的运行需要一个分布式文件系统的支持（如 HDFS），输入、输出文件均通过该系统的统一接口。</p><ul><li>Master 初始化时接收的参数是：输入文件路径、分区数 R</li><li>Worker 初始化时接收的参数是：Map 函数，Reduce 函数</li></ul><h5 id="2-Master-和-Worker-之间如何通信，是后者主动联系前者还是相反？"><a href="#2-Master-和-Worker-之间如何通信，是后者主动联系前者还是相反？" class="headerlink" title="2. Master 和 Worker 之间如何通信，是后者主动联系前者还是相反？"></a>2. Master 和 Worker 之间如何通信，是后者主动联系前者还是相反？</h5><p>大概有两种方式：</p><ul><li>一种是 Worker 启动时向 Master 进行注册， Master 定时向 Worker 发送心跳确认其在线，并在有任务需要分配时主动通知 Worker。这也是论文的做法。</li><li>另一种是 Worker 不间断地向 Master 发送心跳，Master 接收到心跳时，将任务信息以回应的方式返回给 Worker。</li></ul><p>我采用的是第二种做法，也是 Lab 倾向的做法。因为这样不论是 Master 和 Worker 实现起来要简洁一些，Worker 端不需要启动 RPC 服务器，性能也不输第一种。也是由于本 Lab 是运行在单机上的（为了测试方便），且采用了<strong>UNIX 域套接字</strong>进行进程间通信，所以在横向扩展 Worker 时第二种方式更加方便。</p><blockquote><p>UNIX 域套接字用于在同一台计算机上运行的进程之间的通信。虽然因特网域套接字可用于同一目的，但 UNIX 域套接字的效率更高。UNIX 域套接字仅仅复制数据，它们并不执行协议处理，不需要添加或删除网络报头，无需计算校验和，不要产生顺序号，无需发送确认报文。</p></blockquote><h5 id="3-Master-如何区分不同的-Worker？"><a href="#3-Master-如何区分不同的-Worker？" class="headerlink" title="3. Master 如何区分不同的 Worker？"></a>3. Master 如何区分不同的 Worker？</h5><p>Master 区分不同的 Worker 是为了记录任务的<strong>分配和执行</strong>情况，以便在出现异常时及时处理。</p><p>因为本次 Lab 是在一台机器上运行，所以不考虑 Worker 的网络地址。Master 可以<strong>通过 ID</strong> 来区分 Worker。在首次请求 Task 的时候让 Master 去赋予 Worker 一个全局唯一的 ID，这个 ID 的有效期直到 Job 运行结束。</p><h5 id="4-Map-和-Reduce-任务分别有多少个？"><a href="#4-Map-和-Reduce-任务分别有多少个？" class="headerlink" title="4. Map 和 Reduce 任务分别有多少个？"></a>4. Map 和 Reduce 任务分别有多少个？</h5><p>Map 任务的个数取决于输入文件的 split 个数，这个 split 的过程在论文中是由<strong>库函数</strong>进行的，但是一般来说在一个分布式文件系统中，它存储文件的方式本身就是 split 的形式，因此这一步视情况可以省略。在本 Lab 中，<code>pg-</code> 开头的每一个输入文件就是一个 split，它们的文件名被传给 Master 端。</p><p>Reduce 任务的个数<strong>小于等于</strong>分区数 R，是由用户指定的。Map 函数读取 split 文件生成大量的 KV 对，然后根据 <code>hash(key) % R</code> 的结果将中间键空间划分为 R 个片段，将每个片段的 KV 对输出到一个中间文件中去，每个中间文件都将被输入到一个 Reduce 函数。但是如果 KV 对的数量较少或者是数据较为倾斜，那么最终并不一定有 R 个文件，也就不一定有 R 个 Reduce 任务，所以 Reduce 任务的数量是不一定的，最大为 R。</p><p>但是在 Lab 代码中，官方将传递给 Master 的分区数 R 的变量命名为 <code>nReduce</code>，这其实是一种误导，所以我将它改成了 <code>partition</code>。</p><h5 id="5-Master-如何在相应的阶段分配-Map-和-Reduce-任务？需要传递什么参数给-Worker？Worker-在完成一个任务以后需要返回什么结果给-Master？"><a href="#5-Master-如何在相应的阶段分配-Map-和-Reduce-任务？需要传递什么参数给-Worker？Worker-在完成一个任务以后需要返回什么结果给-Master？" class="headerlink" title="5. Master 如何在相应的阶段分配 Map 和 Reduce 任务？需要传递什么参数给 Worker？Worker 在完成一个任务以后需要返回什么结果给 Master？"></a>5. Master 如何在相应的阶段分配 Map 和 Reduce 任务？需要传递什么参数给 Worker？Worker 在完成一个任务以后需要返回什么结果给 Master？</h5><p>关于这几个问题，概述如下：<br>    1. worker 循环调用 master 的 rpc 方法去获取任务（心跳），直到收到“结束”指令。<br>    2. worker 收到 map 任务，从一个 split 文件读取数据并执行 map 函数，将缓冲对写入本地磁盘。<br>    3. 当所有的 M 个 map 任务执行完毕后，master 开始分配 reduce 任务，仍然是 worker 主动获取。<br>    4. worker 收到 reduce 任务，读取对应 worker 磁盘上的中间数据（这里就是本地的数据，因为在一台机器上运行），执行 reduce ()函数，将结果输出到一个最终 output 文件。</p><p>画了一张图：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231130211155.png" alt="MapReduce数据流向示意图"/></div><div class="image-meta"><span class="image-caption center">MapReduce数据流向示意图</span></div></div><p>其中，箭头是数据/信息流动的方向，蓝色代表 Map 阶段，红色代表 Reduce 阶段。整体的运行流程按照<strong>序号顺序</strong>进行。注意，同一个 Worker 可能先后完成多个 Map 和 Reduce 任务，图中的 Worker 编号只是一个示意。Master 相当于服务端，Worker 不断发送请求。在本 Lab 中，DFS 就是本地文件系统。</p><h5 id="6-如果某一个-Worker-掉线了怎么办？"><a href="#6-如果某一个-Worker-掉线了怎么办？" class="headerlink" title="6. 如果某一个 Worker 掉线了怎么办？"></a>6. 如果某一个 Worker 掉线了怎么办？</h5><p>Master 端需要进行简单的容错，我采取的方式是：在 Master 分配给 Worker 一个任务后，异步计时等待（如 10 秒），等待结束后如果该 Worker 还没有返回计算结果，那么就认为该 Worker 掉线了，需要重新分配此任务。</p><h2 id="MapReduce-具体实现"><a href="#MapReduce-具体实现" class="headerlink" title="MapReduce 具体实现"></a>MapReduce 具体实现</h2><p>代码细节较多，只记录较重要的部分。</p><h3 id="Worker-实现"><a href="#Worker-实现" class="headerlink" title="Worker 实现"></a>Worker 实现</h3><p>每个 Worker 只管接受任务、执行计算、返回结果，不需要管别的，所以可以先从 Worker 写起。</p><p>每当 Worker 通过 RPC 向 Master 发送心跳请求的时候，会收到 4 种可能的回应：</p><ul><li><code>HEATBEAT</code>：Master 的回应心跳，代表现在 Master 没有任务可分配，Worker 暂时空闲；</li><li><code>MAPTASK</code>：Master 向自己分配了一个 Map 任务，附带的信息有<strong>任务编号 X、输入文件路径、分区数 R</strong>；</li><li><code>REDUCETASK</code>：Master 向自己分配了一个 Reduce 任务，附带的信息有<strong>任务编号 Y、所有的中间文件路径</strong>；</li><li><code>QUIT</code>：计算 Job 的 Map 和 Reduce 阶段已全部完成，可以退出程序。</li></ul><p>初始化代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Worker</span><span class="params">(mapf <span class="keyword">func</span>(<span class="type">string</span>, <span class="type">string</span>)</span></span> []KeyValue, reducef <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">string</span>, []<span class="type">string</span>)</span></span> <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">request := Request&#123;&#125;</span><br><span class="line">reply := Reply&#123;&#125;</span><br><span class="line">request.WorkerId = workerId <span class="comment">// 初始值为0</span></span><br><span class="line"><span class="comment">// 通过RPC向Master发送心跳</span></span><br><span class="line">ok := call(<span class="string">&quot;Coordinator.HeartbeatHandler&quot;</span>, &amp;request, &amp;reply)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;call Coordinator.HeartbeatHandler failed!\n&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> workerId == <span class="number">0</span> &#123;</span><br><span class="line">workerId = reply.WorkerId <span class="comment">// 首次获取到Master分配的ID</span></span><br><span class="line">setLogFile()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> reply.Command &#123;</span><br><span class="line"><span class="keyword">case</span> QUIT: <span class="comment">// 结束</span></span><br><span class="line">deleteIntermediates() <span class="comment">// 删除产生的所有中间文件</span></span><br><span class="line">log.Println(<span class="string">&quot;Quit.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> HEARTBEAT:</span><br><span class="line">log.Println(<span class="string">&quot;Receive Heartbeat with master.&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> MAPTASK: <span class="comment">// 分配了map任务</span></span><br><span class="line">log.Println(<span class="string">&quot;Got map task:&quot;</span>, reply)</span><br><span class="line">doMapTask(reply.Task, mapf, reply.NReduce)</span><br><span class="line"><span class="keyword">case</span> REDUCETASK: <span class="comment">// 分配了reduce任务</span></span><br><span class="line">log.Println(<span class="string">&quot;Got reduce task:&quot;</span>, reply)</span><br><span class="line">doReduceTask(reply.Task, reducef)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 心跳间隔</span></span><br><span class="line">time.Sleep(time.Second * time.Duration(HEARTBEAT_INTERVAL))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Worker 在初始化后 ID 为 0，Master 在遇见 ID 为 0 的请求后，会从 1 开始累加，向 Worker 分配 ID，Worker 需要保存这个 ID 直到程序结束，在随后的每次请求都要附上自己的 ID。</p><p><strong>在收到 Map 任务时：</strong></p><ol><li>读取输入文件的全部内容；</li><li>调取用户的 map 函数，得到 KV 数组：<code>kva := mapf(filename, string(content))</code>；</li><li>遍历 KV 数组的每一个 KV：<ol><li>计算当前 KV 应属分区号 Y：<code>partition := ihash(kv.Key) % nReduce</code></li><li>如果不存在，新建中间文件：<code>mr-X-Y</code></li><li>将该 KV 以 JSON 格式输出到中间文件</li></ol></li><li>发送任务完成信息给 Master，内容包含所有中间文件的路径。</li></ol><p><strong>在收到 Reduce 任务时：</strong></p><ol><li>以 JSON 格式读取所有中间文件的内容到一个 KV 数组；</li><li>对该数组以 Key 进行排序；</li><li>如果不存在，新建临时结果文件：<code>mr-out-Y-随机字符</code>；</li><li>对于每一个 Key 和它对应的 Value 集合，调用用户的 reduce 函数：<code>output := reducef(intermediate[i].Key, values)</code></li><li>output 按格式输出到结果文件。</li><li>遍历完毕后，更改临时文件名为：<code>mr-out-Y</code>。</li><li>发送任务完成信息给 Master。</li></ol><blockquote><p>临时文件的目的是为了防止 reduce 执行到一半 worker 崩溃了，却留给用户任务已完成的假象。</p></blockquote><h3 id="Master-实现"><a href="#Master-实现" class="headerlink" title="Master 实现"></a>Master 实现</h3><p>本次采用的 Master 端的模式是<strong>完全被动</strong>的，也就是不会主动去找 Worker 分配任务，这就需要通过某些设计，使得 Worker 的心跳请求到来后，判断当前是 Map 阶段还是 Reduce 阶段还是已经完成 Job 了。</p><p>首先看一下 Task 和 Master 的数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Task <span class="keyword">struct</span> &#123;</span><br><span class="line">    TaskType <span class="type">int</span>      <span class="comment">// 任务类型，Map或Reduce</span></span><br><span class="line">    TaskNo   <span class="type">int</span>      <span class="comment">// 任务编号，用于标识和文件命名</span></span><br><span class="line">    Files    []<span class="type">string</span> <span class="comment">// 文件路径信息，map就是1个输入文件，reduce就是多个中间文件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Coordinator <span class="keyword">struct</span> &#123;</span><br><span class="line">    jobDone           <span class="type">bool</span>             <span class="comment">// Job是否完成</span></span><br><span class="line">    isReducing        <span class="type">bool</span>             <span class="comment">// 当前是否是Reduce阶段</span></span><br><span class="line">    nextWorkerId      <span class="type">int</span>              <span class="comment">// 下一个新Worker的ID</span></span><br><span class="line">    nMap              <span class="type">int</span>              <span class="comment">// map任务个数</span></span><br><span class="line">    nReduce           <span class="type">int</span>              <span class="comment">// reduce任务个数</span></span><br><span class="line">    partition         <span class="type">int</span>              <span class="comment">// 分区数</span></span><br><span class="line">    unassignedMaps    <span class="keyword">chan</span> Task        <span class="comment">// 还未分配的map任务</span></span><br><span class="line">    unassignedReduces <span class="keyword">chan</span> Task        <span class="comment">// 还未分配的reduce任务</span></span><br><span class="line">    assignedMaps      <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>     <span class="comment">// 已分配的map任务，TaskNo-&gt;是否完成</span></span><br><span class="line">    assignedReduces   <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>     <span class="comment">// 已分配的reduce任务，TaskNo-&gt;是否完成</span></span><br><span class="line">    working           <span class="keyword">map</span>[<span class="type">int</span>]*Task    <span class="comment">// 正在工作的worker记录，ID-&gt;Task</span></span><br><span class="line">    intermediates     <span class="keyword">map</span>[<span class="type">int</span>][]<span class="type">string</span> <span class="comment">// 中间文件名集合，reduceNo-&gt;files</span></span><br><span class="line">    mu                sync.Mutex       <span class="comment">// 互斥锁，保证并发安全</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我采用的是 Go 的 <strong>Buffered Channel</strong> 进行任务分配。在 Master 初始化的时候，先将每一个输入 split 文件创建一个 MapTask，并压入未分配 Map 任务的队列：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化map任务</span></span><br><span class="line"><span class="keyword">for</span> index, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">c.unassignedMaps &lt;- Task&#123;MAPTASK, index, []<span class="type">string</span>&#123;file&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是应对 Worker 的 RPC 请求处理函数了，总共有三个：</p><ul><li><code>HeartbeatHandler</code>，处理心跳请求——分配任务</li><li><code>MapFinishedHandler</code>，处理 Map 任务完成信息</li><li><code>ReduceFinishedHandler</code>，处理 Reduce 任务完成信息</li></ul><p>代码如下：</p><p>分配任务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> HeartbeatHandler(request *Request, reply *Reply) <span class="type">error</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Receive heartbeat from worker:&quot;</span>, request.WorkerId)</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line">workerId := request.WorkerId</span><br><span class="line"><span class="keyword">if</span> workerId == <span class="number">0</span> &#123;</span><br><span class="line">workerId = c.nextWorkerId</span><br><span class="line">c.nextWorkerId++</span><br><span class="line">&#125;</span><br><span class="line">reply.WorkerId = workerId</span><br><span class="line">workingTask, exist := c.working[workerId]</span><br><span class="line"><span class="keyword">if</span> exist &#123; <span class="comment">// master的记录中该worker还在工作</span></span><br><span class="line"><span class="comment">// 说明之前的任务可能失败了，需要将task重新入队</span></span><br><span class="line">c.unassignTask(workingTask)</span><br><span class="line"><span class="built_in">delete</span>(c.working, workerId)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> mapTask := &lt;-c.unassignedMaps:</span><br><span class="line"><span class="comment">// 分配map</span></span><br><span class="line">reply.Task = mapTask</span><br><span class="line">reply.Command = MAPTASK</span><br><span class="line">reply.NReduce = c.partition</span><br><span class="line">c.assignedMaps[mapTask.TaskNo] = <span class="literal">false</span></span><br><span class="line">c.working[workerId] = &amp;mapTask</span><br><span class="line"><span class="keyword">go</span> c.checkStalled(workerId, &amp;mapTask)</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// map全部分配了</span></span><br><span class="line"><span class="keyword">if</span> allTaskFinished(c.assignedMaps) &#123; <span class="comment">// map全部执行完了</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> reduceTask := &lt;-c.unassignedReduces:</span><br><span class="line"><span class="comment">// 分配reduce</span></span><br><span class="line">reply.Task = reduceTask</span><br><span class="line">reply.Command = REDUCETASK</span><br><span class="line">c.assignedReduces[reduceTask.TaskNo] = <span class="literal">false</span></span><br><span class="line">c.working[workerId] = &amp;reduceTask</span><br><span class="line"><span class="keyword">go</span> c.checkStalled(workerId, &amp;reduceTask)</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// reduce分配完了 - 也有可能没完成初始化，所以需要isReducing判断</span></span><br><span class="line"><span class="keyword">if</span> c.isReducing &amp;&amp; allTaskFinished(c.assignedReduces) &#123; <span class="comment">// reduce全部执行完了</span></span><br><span class="line">reply.Command = QUIT <span class="comment">// 结束任务</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Map 任务完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">func (c *Coordinator) MapFinishedHandler(request *Request, reply *Reply) error &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line">defer c.mu.Unlock()</span><br><span class="line">log.Println(<span class="string">&quot;Receive completion of map task from worker:&quot;</span>, request.WorkerId)</span><br><span class="line">mapTask, ok := c.working[request.WorkerId]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">c.assignedMaps[mapTask.TaskNo] = <span class="literal">true</span></span><br><span class="line"><span class="title function_">delete</span><span class="params">(c.working, request.WorkerId)</span></span><br><span class="line"><span class="comment">// 收集worker产生的中间文件名</span></span><br><span class="line"><span class="keyword">for</span> rNo, file := range request.Intermediates &#123;</span><br><span class="line">arr, ok := c.intermediates[rNo]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">arr = []string&#123;file&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">arr = append(arr, file) <span class="comment">// 累加</span></span><br><span class="line">&#125;</span><br><span class="line">c.intermediates[rNo] = arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="title function_">len</span><span class="params">(c.assignedMaps)</span> == c.nMap &amp;&amp; allTaskFinished(c.assignedMaps) &#123; <span class="comment">// map全部分配完，并且全部完成</span></span><br><span class="line"><span class="comment">// 初始化reduce任务</span></span><br><span class="line">log.Println(<span class="string">&quot;start reduce&quot;</span>)</span><br><span class="line">c.nReduce = len(c.intermediates) <span class="comment">// 这才是真正的reduce数量</span></span><br><span class="line"><span class="keyword">for</span> rNo, files := range c.intermediates &#123;</span><br><span class="line"><span class="comment">// log.Println(rNo, files)</span></span><br><span class="line">c.unassignedReduces &lt;- Task&#123;REDUCETASK, rNo, files&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.isReducing = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Worker&quot;</span>, request.WorkerId, <span class="string">&quot;&#x27;s result of map task was discarded.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reduce 任务完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func (c *Coordinator) ReduceFinishedHandler(request *Request, reply *Reply) error &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line">defer c.mu.Unlock()</span><br><span class="line">log.Println(<span class="string">&quot;Receive completion of reduce task from worker:&quot;</span>, request.WorkerId)</span><br><span class="line">reduceTask, ok := c.working[request.WorkerId]</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">c.assignedReduces[reduceTask.TaskNo] = <span class="literal">true</span></span><br><span class="line"><span class="title function_">delete</span><span class="params">(c.working, request.WorkerId)</span></span><br><span class="line"><span class="keyword">if</span> <span class="title function_">len</span><span class="params">(c.assignedReduces)</span> == c.nReduce &amp;&amp; allTaskFinished(c.assignedReduces) &#123; <span class="comment">// reduce全部分配完，并且全部完成</span></span><br><span class="line">log.Println(<span class="string">&quot;=== Job done! ===&quot;</span>)</span><br><span class="line">c.jobDone = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Worker&quot;</span>, request.WorkerId, <span class="string">&quot;&#x27;s result of reduce task was discarded.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每次分配完任务后，都需要另起协程判断 Worker 是否阻塞（掉线）了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Coordinator)</span></span> checkStalled(workerId <span class="type">int</span>, task *Task) &#123;</span><br><span class="line">    time.Sleep(time.Second * time.Duration(WAIT_WORKER)) <span class="comment">// 等待一段时间</span></span><br><span class="line">    c.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line">    currTask, ok := c.working[workerId] <span class="comment">// 如果还能从working中获取到对应ID的任务</span></span><br><span class="line">    <span class="keyword">if</span> ok &amp;&amp; currTask == task &#123; <span class="comment">// 说明worker仍在执行之前的任务，需要踢出</span></span><br><span class="line">        c.unassignTask(task) <span class="comment">// 将task从已分配中删除，加入未分配队列</span></span><br><span class="line">        <span class="comment">// 删除工作记录</span></span><br><span class="line">        <span class="built_in">delete</span>(c.working, workerId)</span><br><span class="line">        log.Println(<span class="string">&quot;worker:&quot;</span>, workerId, <span class="string">&quot;was kicked out.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>测试全部通过：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231130200613.png"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MIT 6.824 是麻省理工大学的一门研究生课程——Distributed Systems，学习这门课程对于了解分布式系统的构建原理、理解分布式程序的运行、优化分布式程序的运行环境会有很大的帮助。课程内容涵盖：分布式、容错、多副本、一致性等议题，附带了 4 个大的实验 L</summary>
      
    
    
    
    
    <category term="go" scheme="https://zyrate.github.io/tags/go/"/>
    
    <category term="mit6824" scheme="https://zyrate.github.io/tags/mit6824/"/>
    
    <category term="分布式" scheme="https://zyrate.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 6</title>
    <link href="https://zyrate.github.io/2023/11/15/830%20Lab%206/"/>
    <id>https://zyrate.github.io/2023/11/15/830%20Lab%206/</id>
    <published>2023-11-14T16:00:00.000Z</published>
    <updated>2024-03-12T09:59:28.272Z</updated>
    
    <content type="html"><![CDATA[<p>Lab 6 实现 SimpleDB 的基于日志系统的回滚（rollback）和恢复（recover）功能。</p><h3 id="WAL-机制"><a href="#WAL-机制" class="headerlink" title="WAL 机制"></a>WAL 机制</h3><p>首先，SimpleDB 要实现的是<strong>预写式日志（Write-ahead logging, WAL）</strong>，也就是<strong>所有修改</strong>在生效之前都要先写入 log 文件中，写入的内容包括 redo 和 undo 信息，分别保证事务的<strong>持久性</strong>和<strong>原子性</strong>。</p><p>在 SimpleDB 中，日志的单位和锁一样是页面，每个页面都可以通过 <code>setBeforeImage</code> 方法来设置 oldData，也就是每次 flush 到磁盘前页面还未变动时的旧数据（是上一次 flush 的时候保存的）。日志系统会在每次 flush 脏页的时候把 beforeImage 和 afterImage 写入日志文件，分别代表旧数据和新数据。这样在需要 redo 的时候，就把 afterImage 写入磁盘；需要 undo 的时候，就把 beforeImage 写入磁盘。</p><p>Lab 6 只要求实现 LogFile 类中的 <code>rollback</code> 和 <code>recover</code> 方法：</p><ul><li>前者用在事务 <strong>abort</strong> 的时候，需要撤销 (undo) 该事务的所有操作，回滚数据库到之前的状态；</li><li>后者用在发生崩溃 <strong>crash</strong> 的时候，需要撤销 (undo) 所有未提交事务的所有操作、重做 (redo) 所有已提交事务的所有操作，恢复数据库到正常状态。</li></ul><h3 id="缓冲区管理策略"><a href="#缓冲区管理策略" class="headerlink" title="缓冲区管理策略"></a>缓冲区管理策略</h3><p>数据库的缓冲区管理策略有<strong>两类四种</strong>，分别是：</p><h4 id="steal-策略"><a href="#steal-策略" class="headerlink" title="steal 策略"></a>steal 策略</h4><p>允许从页面缓存逐出“脏页”。此时磁盘上可能包含 uncommitted 的数据，因此系统需要记录 undo log，以在事务 abort 时进行回滚（<strong>rollback</strong>）。</p><h4 id="no-steal-策略"><a href="#no-steal-策略" class="headerlink" title="no-steal 策略"></a>no-steal 策略</h4><p>不允许从页面缓存逐出“脏页”。表示磁盘上不会存在 uncommitted 数据，因此无需回滚操作，也就无需记录 undo log。</p><h4 id="force-策略"><a href="#force-策略" class="headerlink" title="force 策略"></a>force 策略</h4><p>事务在 committed 的时候必须将所有更新<strong>立刻持久化</strong>到磁盘，这样的话不需要 redo log，因为只要日志中存在 commit 记录就说明磁盘已经更新了全部数据。但是这样会导致磁盘发生很多小的写操作（更可能是随机写）。</p><h4 id="no-force-策略"><a href="#no-force-策略" class="headerlink" title="no-force 策略"></a>no-force 策略</h4><p>事务在 committed 之后可以不立即持久化到磁盘，这样可以缓存很多的脏页<strong>批量持久化</strong>到磁盘，这样可以降低磁盘操作次数（提升顺序写），但是如果 committed 之后发生<strong>crash</strong>，那么此时已经提交的事务数据将会<strong>丢失</strong>（因为还没有持久化到磁盘），因此系统需要记录 redo log，在系统重启时候进行回复（recover）操作。</p><blockquote><p>在 SimpleDB 中, 之前的 Lab 要求实现的是 no-steal 和 force 策略，但是这种策略的效率不高。所以在本次 Lab 的 LogTest 中，它会时不时的打破 no-steal 策略，也就是通过随时调用 <code>flushAllPages()</code> 让磁盘上<strong>存在未提交的</strong>数据，测试 abort 后的回滚操作。同时也默认 no-force 的存在（虽然实际不是），以测试 crash 后的恢复操作。所以我们 redo 和 undo 都需要实现。</p></blockquote><h3 id="日志文件结构"><a href="#日志文件结构" class="headerlink" title="日志文件结构"></a>日志文件结构</h3><p>Log File 中一条记录的格式是：<br><code>&lt;RECORD_TYPE:int | TID:long | content | start:long&gt; </code></p><ul><li>其中 RECORD_TYPE 指记录的类型，TID 指事务的标识，content 在不同的类型中表示不同内容， start 指此条记录开始位置的偏移量。</li><li>RECORD_TYPE 总共有 5 种表示不同的行为：<ul><li>BEGIN, 事务开始</li><li>UPDATE, 事务对页面进行 UPDATE 操作</li><li>COMMIT, 事务提交</li><li>ABORT, 事务中断</li><li>CHECKPOINT, 检查点</li></ul></li><li>在运行过程中各类记录被不停地<strong>追加</strong>到 Log File 里面。</li><li>由于多个事务之间时<strong>并行执行</strong>的，所以日志文件里不同事务对不同页面的各项操作是<strong>混合交叉</strong>在一起的。</li></ul><p>BEGIN、COMMIT 和 ABORT 这三种记录的 <code>content</code> 位置是空的，不存储数据；而 UPDATE 存储的是序列化后的 beforeImage 和 afterImage；CHECKPOINT 存储的首先是一个 INT 类型代表<strong>当前活跃事务（未提交）的数量</strong>，后面跟的是每个活跃事务的 TID 和 BEGIN 记录的位置 offset（都是 Long 类型）。</p><p><strong>检查点</strong>是为了加快恢复过程的速度。如果没有检查点，那么系统在宕机重启后需要从头对 Log File 进行顺序访问，依次找到所有未提交和已提交的事务进行 undo 和 redo 操作，费时费力。而检查点机制要求在向 Log File 中添加 CHECKPOINT 的时候，<strong>将缓冲区中所有的脏页刷新到磁盘</strong>，也就代表着在检查点之前提交了的事务无需在重启后执行恢复操作，因为磁盘已经拥有这些事务更新后的数据。我们只需从检查点之后顺序访问 Log File 即可。</p><p>另外需要注意的是，检查点会记录那个时刻还未提交的所有事务 ID，这些事务并不能保证宕机后的原子性和持久性，因此也需要对这些事务进行恢复操作。</p><h3 id="Rollback-实现"><a href="#Rollback-实现" class="headerlink" title="Rollback 实现"></a>Rollback 实现</h3><p><code>rollback</code> 方法在事务被 abort 的时候调用，此时该事务对所有页面产生的所有修改都应该<strong>失效</strong>，也就是说需要将所有相关页面的 beforeImage（旧数据）恢复到磁盘上（undo）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionId tid)</span>&#123;</span><br><span class="line"><span class="comment">//省略synchronized结构</span></span><br><span class="line">preAppend();  </span><br><span class="line"><span class="comment">// 找到该事务在file中的第一个记录的偏移量  </span></span><br><span class="line"><span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> tidToFirstLogRecord.get(tid.getId());  </span><br><span class="line">raf.seek(offset);  </span><br><span class="line"><span class="comment">// 顺序访问直到文件末尾</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> raf.readInt();  <span class="comment">// 记录类型</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">record_tid</span> <span class="operator">=</span> raf.readLong();  <span class="comment">// TID</span></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;  </span><br><span class="line">            <span class="keyword">case</span> UPDATE_RECORD: <span class="comment">// 更新记录</span></span><br><span class="line">                <span class="type">Page</span> <span class="variable">before</span> <span class="operator">=</span> readPageData(raf);  <span class="comment">// 旧数据</span></span><br><span class="line">                <span class="type">Page</span> <span class="variable">after</span> <span class="operator">=</span> readPageData(raf);   <span class="comment">// 新数据</span></span><br><span class="line">                <span class="keyword">if</span>(record_tid == tid.getId())&#123;  </span><br><span class="line">                    <span class="comment">// 先把此页面从缓存中去除</span></span><br><span class="line">                    Database.getBufferPool().discardPage(before.getId());  </span><br><span class="line">                    <span class="comment">// 然后把旧数据写入Table文件</span></span><br><span class="line">                    Database.getCatalog().getDatabaseFile(before.getId().getTableId()).writePage(before);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> CHECKPOINT_RECORD:  <span class="comment">// 跳过所有检查点记录</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">numXactions</span> <span class="operator">=</span> raf.readInt();  </span><br><span class="line">                <span class="keyword">while</span> (numXactions-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                    <span class="type">long</span> <span class="variable">xid</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                    <span class="type">long</span> <span class="variable">xoffset</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        raf.readLong();  <span class="comment">// 跳过start指针</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (EOFException e) &#123;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Recover-实现"><a href="#Recover-实现" class="headerlink" title="Recover 实现"></a>Recover 实现</h3><p><code>recover</code> 方法在数据库 crash 重启后调用，需要将检查点（如果有的话）中及其之后的所有事务进行恢复操作，未提交的 undo，已提交的 redo。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recover</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 省略synchronized结构</span></span><br><span class="line">recoveryUndecided = <span class="literal">false</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* redo就是写入afterimage，undo就是写入beforeimage */</span>  </span><br><span class="line"><span class="comment">// 已提交的事务ID集合</span></span><br><span class="line">Set&lt;Long&gt; commitedIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();  </span><br><span class="line"><span class="comment">// 检查点存储的活跃事务集合</span></span><br><span class="line">Map&lt;Long, Long&gt; activeTxns = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line"><span class="comment">// 从检查点往后所有事务的集合（所有的旧页面和新页面）  </span></span><br><span class="line">Map&lt;Long, List&lt;Page&gt;&gt; beforePages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">Map&lt;Long, List&lt;Page&gt;&gt; afterPages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line"><span class="type">long</span> <span class="variable">cpOffset</span> <span class="operator">=</span> raf.readLong();  <span class="comment">// 检查点位置  </span></span><br><span class="line"><span class="keyword">if</span>(cpOffset != -<span class="number">1</span>)&#123;  </span><br><span class="line">    raf.seek(cpOffset);  <span class="comment">// 如果有检查点，直接从此处开始</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 顺序访问直到文件末尾</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> raf.readInt();  <span class="comment">// 记录类型</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">record_tid</span> <span class="operator">=</span> raf.readLong();  <span class="comment">// TID</span></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;  </span><br><span class="line">            <span class="keyword">case</span> UPDATE_RECORD:  </span><br><span class="line">                <span class="type">Page</span> <span class="variable">before</span> <span class="operator">=</span> readPageData(raf);  <span class="comment">// 旧数据</span></span><br><span class="line">                <span class="type">Page</span> <span class="variable">after</span> <span class="operator">=</span> readPageData(raf);   <span class="comment">// 新数据</span></span><br><span class="line">                beforePages.computeIfAbsent(record_tid, k-&gt;<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(before);  </span><br><span class="line">                afterPages.computeIfAbsent(record_tid, k-&gt;<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(after);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> CHECKPOINT_RECORD:  </span><br><span class="line">                <span class="type">int</span> <span class="variable">numXactions</span> <span class="operator">=</span> raf.readInt();  </span><br><span class="line">                <span class="keyword">while</span> (numXactions-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                    <span class="type">long</span> <span class="variable">xid</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                    <span class="type">long</span> <span class="variable">xoffset</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                    activeTxns.put(xid, xoffset);  <span class="comment">// 记录活跃事务</span></span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> COMMIT_RECORD:  </span><br><span class="line">                commitedIds.add(record_tid);  <span class="comment">// 记录已提交事务</span></span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        raf.readLong();  <span class="comment">// 跳过start指针</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (EOFException e) &#123;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 注意undo和redo的顺序不能乱，否则redo被undo覆盖 */</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// undo未commit的  </span></span><br><span class="line"><span class="keyword">for</span>(Long record_id : beforePages.keySet())&#123;  </span><br><span class="line">    <span class="keyword">if</span>(!commitedIds.contains(record_id))&#123;  </span><br><span class="line">        List&lt;Page&gt; befores = beforePages.getOrDefault(record_id, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());  </span><br><span class="line">        <span class="keyword">for</span>(Page page : befores)&#123;  </span><br><span class="line">            Database.getCatalog().getDatabaseFile(page.getId().getTableId()).writePage(page);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// redo已经commit的  </span></span><br><span class="line"><span class="keyword">for</span>(Long record_tid : commitedIds)&#123;  </span><br><span class="line">    List&lt;Page&gt; afters = afterPages.getOrDefault(record_tid, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());  </span><br><span class="line">    <span class="keyword">for</span>(Page page : afters)&#123;  </span><br><span class="line">        Database.getCatalog().getDatabaseFile(page.getId().getTableId()).writePage(page);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 处理在checkpoint之前开始但是在checkpoint还未提交的事务  </span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Long,Long&gt; entry : activeTxns.entrySet())&#123;  </span><br><span class="line">    <span class="type">long</span> <span class="variable">active_id</span> <span class="operator">=</span> entry.getKey();  </span><br><span class="line">    <span class="type">long</span> <span class="variable">active_offset</span> <span class="operator">=</span> entry.getValue();  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">commited</span> <span class="operator">=</span> commitedIds.contains(active_id);  </span><br><span class="line">    raf.seek(active_offset);  </span><br><span class="line">    <span class="comment">// 代码与上文类似</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> raf.readInt();  </span><br><span class="line">            <span class="type">long</span> <span class="variable">record_tid</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;  </span><br><span class="line">                <span class="keyword">case</span> UPDATE_RECORD:  </span><br><span class="line">                    <span class="type">Page</span> <span class="variable">before</span> <span class="operator">=</span> readPageData(raf);  </span><br><span class="line">                    <span class="type">Page</span> <span class="variable">after</span> <span class="operator">=</span> readPageData(raf);  </span><br><span class="line">                    <span class="keyword">if</span>(commited)&#123;  </span><br><span class="line">                        <span class="comment">// redo  </span></span><br><span class="line">                        Database.getCatalog().getDatabaseFile(after.getId().getTableId()).writePage(after);  </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                        <span class="comment">// undo  </span></span><br><span class="line">                        Database.getCatalog().getDatabaseFile(before.getId().getTableId()).writePage(before);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="keyword">case</span> CHECKPOINT_RECORD:  </span><br><span class="line">                    <span class="type">int</span> <span class="variable">numXactions</span> <span class="operator">=</span> raf.readInt();  </span><br><span class="line">                    <span class="keyword">while</span> (numXactions-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                        <span class="type">long</span> <span class="variable">xid</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                        <span class="type">long</span> <span class="variable">xoffset</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            raf.readLong();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要注意 undo 和 redo 的顺序不能颠倒，否则会出现数据覆盖问题。</li></ul><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231124161613.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><blockquote><p>Lab 仓库地址：<a href="https://github.com/zyrate/simple-db-hw-2021">zyrate/simple-db-hw-2021 (github.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab 6 实现 SimpleDB 的基于日志系统的回滚（rollback）和恢复（recover）功能。&lt;/p&gt;
&lt;h3 id=&quot;WAL-机制&quot;&gt;&lt;a href=&quot;#WAL-机制&quot; class=&quot;headerlink&quot; title=&quot;WAL 机制&quot;&gt;&lt;/a&gt;WAL 机制&lt;</summary>
      
    
    
    
    
    <category term="java" scheme="https://zyrate.github.io/tags/java/"/>
    
    <category term="mit6830" scheme="https://zyrate.github.io/tags/mit6830/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 5</title>
    <link href="https://zyrate.github.io/2023/11/07/830%20Lab%205/"/>
    <id>https://zyrate.github.io/2023/11/07/830%20Lab%205/</id>
    <published>2023-11-06T16:00:00.000Z</published>
    <updated>2024-03-12T09:59:35.926Z</updated>
    
    <content type="html"><![CDATA[<p>Lab 5 要求实现 SimpleDB 的 B+树索引存储机制。整体的 B+树相关代码还是较为复杂的，但是 SimpleDB 帮我们写了大部分结构性的代码，让我们去完成较重要的功能性代码。但是所有的代码都需要理解透彻。</p><h4 id="B-树索引结构"><a href="#B-树索引结构" class="headerlink" title="B+树索引结构"></a>B+树索引结构</h4><p>首先，在 InnoDB 引擎中，B+树索引分为<strong>主索引</strong>和<strong>辅助索引</strong>，主索引的叶子结点记录着完整的数据，而辅助索引的叶子结点只记录着主键的值，在查找时需要先插找到主键值，再到主索引中进行查找，相当于二级索引机制。<strong>但在 SimpleDB 中，只要求实现主索引。</strong></p><p>一个关于索引的定义：索引就是一个表<strong>属性子集的副本</strong>，为了通过这些属性更高效的访问数据而进行了一定的组织和排序，数据库需要确保表和索引是逻辑同步的。这里可以理解成，B+树的非叶结点就是上述的“属性子集的副本”，是真正的索引结构，而叶结点并不是副本，是表的属性数据集合本身。</p><p>也就是说，在 SimpleDB 中一个表可以用 B+树 File 形式存储，也可以用 HeapFile 形式存储，这两者之前是<strong>平行关系</strong>，取决于用户的选择，它们拥有<strong>相同的</strong>存储方式和顶层抽象。</p><ul><li>对于 HeapFile，它继承自 DbFile，内部存储 HeapPage，通过 BufferPool 访问；</li><li>对于 BTreeFile，它同样继承自 DbFile，内部存储 BTreePage，也通过 BufferPool 访问，缓存和锁管理机制是通用的。</li></ul><p>但是由于 B+树结构复杂，因此有多种不同类型的 BTreePage，分别是：<strong>BTreeRootPtrPage</strong>、<strong>BTreeHeaderPage</strong>、<strong>BTreeInternalPage</strong>、<strong>BTreeLeafPage</strong>。但其实，与 B+树的逻辑结构相关的只有最后两种，分别对应内部结点和叶子结点。<div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231019161522.png" alt="B+树逻辑结构"/></div><div class="image-meta"><span class="image-caption center">B+树逻辑结构</span></div></div></p><p>而 BTreeHeaderPage 的作用是记录当前 BTreeFile 中还有没有<strong>空页</strong>（由于从 B+树删除结点并不会在物理层面也删除，有点像静态哈希表），如果有空页那么新建结点的时候就可以复用该页，如果没有就新建一个空页到 BTreeFile 中去。</p><p>BTreeRootPtrPage 的作用是记录根结点（internal 或 leaf）的在 File 中的位置，因为在进行一系列的插入、删除操作后，File 中的 Page 是<strong>无序存储</strong>的，B+树逻辑结构靠的是<strong>地址链接</strong>，所以 File 的第一个 Page 不一定是根结点，所以需要记录。BTreeRootPtrPage 中有一个静态方法 <code>getId()</code>，可以看到新建了一个 pageNo=0 的 PageId，所以这个页面永远储存在 File 的第一个位置。</p><blockquote><p>在做此 Lab 的时候，不用想着在一开始搞懂所有类的所有方法，容易没有头绪。就从 Lab 要求补充的代码处入手，需要用什么结构、方法、接口就去了解什么，很容易就上手了。</p></blockquote><p>BTreeLeafPage 存储着该叶子结点上的所有 Tuple 和左右兄弟指针，调用 <code>iterator()</code> 可以依次（正向或逆向）遍历 Tuple。</p><p>BTreeInternalPage 存储着所有的<strong>key值</strong>和指向孩子节点的<strong>指针</strong>，调用 <code>iterator()</code> 可以一次（正向或逆向）遍历 BTreeEntry，其中包含“key、左指针、右指针”。这个实体只是为了传递数据，修改里面的值并不会对结点本身造成影响，如果想更新结点数据，需要调用 <code>updateEntry()</code> 方法。</p><blockquote><p>所有的“指针”都是指页面的 PageNo，类型是 int。</p></blockquote><h4 id="B-树的查找"><a href="#B-树的查找" class="headerlink" title="B+树的查找"></a>B+树的查找</h4><p><strong>核心思想：</strong> 对于一个目标值 f，从根结点开始查找，遍历该结点所有的 key 值，如果 <code>f&lt;=key</code> ，那么进入这个 key 的<strong>左孩子</strong>递归查找；如果遍历到了最后一个 key 仍不符合条件，那么进入<strong>右孩子</strong>递归查找。直到<strong>遇到叶子结点</strong>，直接返回此结点，因为它一定包含 f（或 f 不在 B+树中）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BTreeLeafPage <span class="title function_">findLeafPage</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreePageId pid, Permissions perm,  Field f)</span>  </span><br><span class="line">            <span class="keyword">throws</span> DbException, TransactionAbortedException &#123;  </span><br><span class="line">   <span class="keyword">if</span>(pid.pgcateg() == BTreePageId.INTERNAL)&#123; <span class="comment">// 非叶结点  </span></span><br><span class="line">      <span class="comment">// 从BufferPool拿到指定pid的非叶页面  </span></span><br><span class="line">      <span class="type">BTreeInternalPage</span> <span class="variable">inPage</span> <span class="operator">=</span> (BTreeInternalPage) getPage(tid, dirtypages, pid, Permissions.READ_ONLY);  </span><br><span class="line">      Iterator&lt;BTreeEntry&gt; iterator = inPage.iterator();  </span><br><span class="line">      <span class="comment">// 遍历该页面的所有key，和目标f作比较（见B+树的查找）  </span></span><br><span class="line">      <span class="keyword">while</span>(iterator.hasNext())&#123;  </span><br><span class="line">         <span class="type">BTreeEntry</span> <span class="variable">entry</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">         <span class="keyword">if</span>(f==<span class="literal">null</span>||f.compare(Op.LESS_THAN_OR_EQ, entry.getKey()))&#123; </span><br><span class="line">         <span class="comment">// 目标值为null或小于等于key值，进入左孩子递归  </span></span><br><span class="line">            <span class="keyword">return</span> findLeafPage(tid, dirtypages, entry.getLeftChild(), perm, f);  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">if</span>(!iterator.hasNext())&#123; <span class="comment">// 遍历到最后一个，进入右孩子递归  </span></span><br><span class="line">            <span class="keyword">return</span> findLeafPage(tid, dirtypages, entry.getRightChild(), perm, f);  </span><br><span class="line">         &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid.pgcateg() == BTreePageId.LEAF)&#123; <span class="comment">// 叶子结点，直接返回指定pid的叶子页面  </span></span><br><span class="line">      <span class="keyword">return</span> (BTreeLeafPage) getPage(tid, dirtypages, pid, perm);  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>getPage()</code> 方法里面调用了 BufferPool 的 getPage 方法，保证了锁机制的正常执行，另外它接受并维护一个 dirtypages 映射，每当访问类型是 READ_WRITE 的时候就将该页面设为 dirty，以便记录脏页集合。</p><h4 id="B-树的插入"><a href="#B-树的插入" class="headerlink" title="B+树的插入"></a>B+树的插入</h4><p>利用 B+树的查找代码，找到需要插入的元组应该在的<strong>叶子结点</strong>，直接插入。如果该结点已经满了，没有空位可以插入了，则需要进行<strong>分裂</strong>，分裂的过程可能会递归向上。</p><p><strong>叶子结点的分裂：</strong> 找到中间 Tuple 位置，将该 Tuple 及其右侧的所有 Tuple 依次移动到一个新的 LeafPage 上，之后将这个中间 Tuple 的 key 值插入到父结点中，最后<strong>更新所有相关的指针</strong>。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231111205114.png" alt="叶结点的分裂"/></div><div class="image-meta"><span class="image-caption center">叶结点的分裂</span></div></div><p><strong>内部结点的分裂：</strong> 找到中间 key 位置，将该 key 右侧的所有 key 依次移动到一个新的 InternalPage 上，之后将这个 key 从原 Page 删除，插入到父节点中。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231111205416.png" alt="内部结点的分裂"/></div><div class="image-meta"><span class="image-caption center">内部结点的分裂</span></div></div><ul><li>两类分裂的区别在于，叶子结点分裂需要将中间 Tuple 的 key <strong>复制</strong>到父结点中，而内部结点的分裂是将中间 key<strong>上移</strong>到父结点中，并且需要更新新页面<strong>所有子页面的父指针</strong>（因为这些子页面的父指针都指向原来的页面）。</li><li>在分裂的时候，需要向父页面插入值，此时父页面也可能会出现无空位的情况，递归处理即可。</li></ul><p>叶结点的分裂代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BTreeLeafPage <span class="title function_">splitLeafPage</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeLeafPage page, Field field)</span>  </span><br><span class="line">      <span class="keyword">throws</span> DbException, IOException, TransactionAbortedException &#123;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 分裂位置</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">splitFrom</span> <span class="operator">=</span> page.getNumTuples() / <span class="number">2</span>;  </span><br><span class="line">   <span class="comment">// 新叶子结点  </span></span><br><span class="line">   <span class="type">BTreeLeafPage</span> <span class="variable">newLeaf</span> <span class="operator">=</span> (BTreeLeafPage) getEmptyPage(tid, dirtypages, BTreePageId.LEAF);  </span><br><span class="line">   Iterator&lt;Tuple&gt; iterator = page.reverseIterator();  </span><br><span class="line">   <span class="type">Field</span> <span class="variable">middleKey</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 中间Key  </span></span><br><span class="line">   <span class="comment">// 逆序遍历旧叶子结点进行元组移动  </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=page.getNumTuples()-<span class="number">1</span>; iterator.hasNext() &amp;&amp; i&gt;=splitFrom; i--)&#123;  </span><br><span class="line">      <span class="type">Tuple</span> <span class="variable">t</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      page.deleteTuple(t);  </span><br><span class="line">      newLeaf.insertTuple(t);  </span><br><span class="line">      <span class="keyword">if</span>(i == splitFrom)&#123;  </span><br><span class="line">         middleKey = t.getField(keyField);  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 左右兄弟连接  </span></span><br><span class="line">   <span class="type">BTreePageId</span> <span class="variable">rightSiblingId</span> <span class="operator">=</span> page.getRightSiblingId();  </span><br><span class="line">   newLeaf.setLeftSiblingId(page.getId());  </span><br><span class="line">   newLeaf.setRightSiblingId(page.getRightSiblingId());  </span><br><span class="line">   page.setRightSiblingId(newLeaf.getId());  </span><br><span class="line">   <span class="keyword">if</span>(rightSiblingId != <span class="literal">null</span>)&#123; <span class="comment">// 不要忘了这一步的指针更新  </span></span><br><span class="line">      <span class="type">BTreeLeafPage</span> <span class="variable">rightSibling</span> <span class="operator">=</span> (BTreeLeafPage) getPage(tid, dirtypages, rightSiblingId, Permissions.READ_WRITE);  </span><br><span class="line">      rightSibling.setLeftSiblingId(newLeaf.getId());  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">/* key上移 */</span>   </span><br><span class="line">   <span class="type">BTreeEntry</span> <span class="variable">bTreeEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BTreeEntry</span>(middleKey, page.getId(), newLeaf.getId());  </span><br><span class="line">   <span class="comment">// 这个提供的方法里面有向上递归的部分  </span></span><br><span class="line">   <span class="type">BTreeInternalPage</span> <span class="variable">parent</span> <span class="operator">=</span> getParentWithEmptySlots(tid, dirtypages, page.getParentId(), field);  </span><br><span class="line">   parent.insertEntry(bTreeEntry);  </span><br><span class="line">   page.setParentId(parent.getId());  </span><br><span class="line">   newLeaf.setParentId(parent.getId());  </span><br><span class="line">   <span class="comment">// 要插入的Key如果小于middle key，返回左（旧）叶子  </span></span><br><span class="line">   <span class="keyword">if</span>(field.compare(Op.LESS_THAN, middleKey))&#123;  </span><br><span class="line">      <span class="keyword">return</span> page;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 否则返回右（新）叶子  </span></span><br><span class="line">   <span class="keyword">return</span> newLeaf;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部结点分裂代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BTreeInternalPage <span class="title function_">splitInternalPage</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeInternalPage page, Field field)</span>   </span><br><span class="line">            <span class="keyword">throws</span> DbException, IOException, TransactionAbortedException &#123;  </span><br><span class="line">   <span class="comment">// 新非叶结点  </span></span><br><span class="line">   <span class="type">BTreeInternalPage</span> <span class="variable">newInternal</span> <span class="operator">=</span> (BTreeInternalPage) getEmptyPage(tid, dirtypages, BTreePageId.INTERNAL);  </span><br><span class="line">   Iterator&lt;BTreeEntry&gt; iterator = page.reverseIterator();  </span><br><span class="line">   <span class="type">BTreeEntry</span> <span class="variable">middleEntry</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 中间entry  </span></span><br><span class="line">   <span class="comment">// 遍历旧非叶结点进行元组移动  </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=page.getNumEntries()-<span class="number">1</span>; iterator.hasNext() &amp;&amp; i&gt;=splitFrom; i--)&#123;  </span><br><span class="line">      <span class="type">BTreeEntry</span> <span class="variable">e</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      page.deleteKeyAndRightChild(e);  </span><br><span class="line">      <span class="keyword">if</span>(i == splitFrom)&#123;  </span><br><span class="line">         middleEntry = e;  </span><br><span class="line">         <span class="keyword">break</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      newInternal.insertEntry(e);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 这个提供的方法里面有向上递归的部分  </span></span><br><span class="line">   <span class="type">BTreeInternalPage</span> <span class="variable">parent</span> <span class="operator">=</span> getParentWithEmptySlots(tid, dirtypages, page.getParentId(), field);  </span><br><span class="line">   middleEntry.setLeftChild(page.getId());  </span><br><span class="line">   middleEntry.setRightChild(newInternal.getId());  </span><br><span class="line">   parent.insertEntry(middleEntry);  </span><br><span class="line">   page.setParentId(parent.getId());  </span><br><span class="line">   newInternal.setParentId(parent.getId());  </span><br><span class="line">   <span class="comment">// 更新新结点所有子页面的父指针  </span></span><br><span class="line">   updateParentPointers(tid, dirtypages, newInternal);  </span><br><span class="line">   <span class="comment">// 要插入的Key如果小于middle key，返回左（旧）非叶  </span></span><br><span class="line">   <span class="keyword">if</span>(field.compare(Op.LESS_THAN, middleEntry.getKey()))&#123;  </span><br><span class="line">      <span class="keyword">return</span> page;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 否则返回右（新）非叶  </span></span><br><span class="line">   <span class="keyword">return</span> newInternal;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="B-树的删除"><a href="#B-树的删除" class="headerlink" title="B+树的删除"></a>B+树的删除</h4><p>B+树的删除有三种情况：</p><ol><li>找到对应的叶子结点，删除 Tuple；</li><li>如果删除后该叶子结点的元组数小于 half full，且兄弟结点大于 half full，那么就从兄弟结点<strong>STEAL</strong>一些元组，以保持平衡；</li><li>如果兄弟结点已经是 half full 了，那么就合并这两个结点。<div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231111212307.png" alt="两类结点的STEAL过程"/></div><div class="image-meta"><span class="image-caption center">两类结点的STEAL过程</span></div></div></li></ol><ul><li>在合并叶子结点的时候，会从父结点删除一个 key，因此需要递归向上判断。</li><li>注意在 STEAL 的时候，叶子结点是在转移完兄弟结点的 Tuple 后，根据情况把对应的 key 值<strong>复制</strong>到父结点，而内部结点则是<strong>移动</strong>到父结点。</li><li>在合并的时候，叶子结点是合并以后，父结点的对应 key 直接删除；而内部结点是将父结点对应 key <strong>下移</strong>到对应位置。<div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231111212338.png" alt="两类结点的合并过程"/></div><div class="image-meta"><span class="image-caption center">两类结点的合并过程</span></div></div></li></ul><p>叶子结点的 STEAL 操作代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stealFromLeafPage</span><span class="params">(BTreeLeafPage page, BTreeLeafPage sibling,  BTreeInternalPage parent, BTreeEntry entry, <span class="type">boolean</span> isRightSibling)</span> <span class="keyword">throws</span> DbException &#123;  </span><br><span class="line">   <span class="comment">// 需要偷取的个数</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">numToMove</span> <span class="operator">=</span> (sibling.getNumTuples() - halfFull) / <span class="number">2</span>;  </span><br><span class="line">   Iterator&lt;Tuple&gt; iterator;  </span><br><span class="line">   <span class="keyword">if</span>(isRightSibling)&#123;  <span class="comment">// 从左右不同结点偷取的顺序相反</span></span><br><span class="line">      iterator = sibling.iterator();  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">      iterator = sibling.reverseIterator();  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// steal  </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;numToMove &amp;&amp; iterator.hasNext(); i++)&#123;  </span><br><span class="line">      <span class="type">Tuple</span> <span class="variable">t</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      sibling.deleteTuple(t);  </span><br><span class="line">      page.insertTuple(t);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 如果从左边偷的，本页第一个key上替；如果从右边偷的，右边第一个key上替  </span></span><br><span class="line">   <span class="type">Field</span> <span class="variable">key</span> <span class="operator">=</span> isRightSibling ? sibling.iterator().next().getField(keyField)  </span><br><span class="line">                        : page.iterator().next().getField(keyField);  </span><br><span class="line">   entry.setKey(key);  </span><br><span class="line">   parent.updateEntry(entry);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从左侧内部结点 STEAL 操作代码（右侧同理）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stealFromLeftInternalPage</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeInternalPage page, BTreeInternalPage leftSibling, BTreeInternalPage parent,  </span></span><br><span class="line"><span class="params">      BTreeEntry parentEntry)</span> <span class="keyword">throws</span> DbException, TransactionAbortedException &#123;  </span><br><span class="line">    <span class="comment">// 偷取个数</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">numToMove</span> <span class="operator">=</span> (leftSibling.getNumEntries() - halfFull) / <span class="number">2</span>;  </span><br><span class="line">   Iterator&lt;BTreeEntry&gt; iterator = leftSibling.reverseIterator();  </span><br><span class="line">   <span class="type">RecordId</span> <span class="variable">parentRecordId</span> <span class="operator">=</span> parentEntry.getRecordId();  </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;numToMove &amp;&amp; iterator.hasNext(); i++)&#123;  </span><br><span class="line">      <span class="type">BTreeEntry</span> <span class="variable">e</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      leftSibling.deleteKeyAndRightChild(e);  </span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">0</span>)&#123; <span class="comment">// 开始的时候首先把父Entry旋转下来  </span></span><br><span class="line">         parentEntry.setLeftChild(e.getRightChild());  </span><br><span class="line">         parentEntry.setRightChild(page.iterator().next().getLeftChild());  </span><br><span class="line">         page.insertEntry(parentEntry);  </span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == numToMove-<span class="number">1</span>)&#123; <span class="comment">// 到最后一个再把Entry旋转到父Entry的位置  </span></span><br><span class="line">         e.setLeftChild(leftSibling.getId());  </span><br><span class="line">         e.setRightChild(page.getId());  </span><br><span class="line">         e.setRecordId(parentRecordId); <span class="comment">// 必须要提前记录父Entry的RecordId，不然无法更新  </span></span><br><span class="line">         parent.updateEntry(e);  </span><br><span class="line">         <span class="keyword">break</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      page.insertEntry(e);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 更新两个非叶Page的子Page的父指针  </span></span><br><span class="line">   updateParentPointers(tid, dirtypages, page);  </span><br><span class="line">   updateParentPointers(tid, dirtypages, leftSibling);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Merge 叶子结点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeLeafPages</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeLeafPage leftPage, BTreeLeafPage rightPage, BTreeInternalPage parent, BTreeEntry parentEntry)</span>   </span><br><span class="line">            <span class="keyword">throws</span> DbException, IOException, TransactionAbortedException &#123;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">while</span>(iterator.hasNext())&#123;  </span><br><span class="line">      <span class="type">Tuple</span> <span class="variable">t</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      rightPage.deleteTuple(t);  </span><br><span class="line">      leftPage.insertTuple(t);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 更新指针  </span></span><br><span class="line">   <span class="type">BTreePageId</span> <span class="variable">rightSibling</span> <span class="operator">=</span> rightPage.getRightSiblingId();  </span><br><span class="line">   leftPage.setRightSiblingId(rightSibling);  </span><br><span class="line">   <span class="keyword">if</span>(rightSibling != <span class="literal">null</span>)&#123;  </span><br><span class="line">      <span class="type">BTreeLeafPage</span> <span class="variable">rightSiblingPage</span> <span class="operator">=</span> (BTreeLeafPage) getPage(tid, dirtypages, rightSibling, Permissions.READ_WRITE);  </span><br><span class="line">      rightSiblingPage.setLeftSiblingId(leftPage.getId());  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 删除父页面的Entry - 包含向上递归  </span></span><br><span class="line">   deleteParentEntry(tid, dirtypages, leftPage, parent, parentEntry);  </span><br><span class="line">   <span class="comment">// 清空右页面  </span></span><br><span class="line">   setEmptyPage(tid, dirtypages, rightPage.getId().getPageNumber());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Merge 内部结点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeInternalPages</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeInternalPage leftPage, BTreeInternalPage rightPage, BTreeInternalPage parent, BTreeEntry parentEntry)</span>   </span><br><span class="line">            <span class="keyword">throws</span> DbException, IOException, TransactionAbortedException &#123;  </span><br><span class="line">   <span class="comment">// 删除父页面的Entry - 包含向上递归  </span></span><br><span class="line">   deleteParentEntry(tid, dirtypages, leftPage, parent, parentEntry);  </span><br><span class="line">   <span class="comment">// 父Entry先插下来  </span></span><br><span class="line">   parentEntry.setLeftChild(leftPage.reverseIterator().next().getRightChild());  </span><br><span class="line">   parentEntry.setRightChild(rightPage.iterator().next().getLeftChild());  </span><br><span class="line">   leftPage.insertEntry(parentEntry);  </span><br><span class="line">   <span class="comment">// 右全部移动到左  </span></span><br><span class="line">   <span class="keyword">while</span>(iterator.hasNext())&#123;  </span><br><span class="line">      <span class="type">BTreeEntry</span> <span class="variable">e</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      rightPage.deleteKeyAndLeftChild(e);  </span><br><span class="line">      leftPage.insertEntry(e);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 清空右页面  </span></span><br><span class="line">   setEmptyPage(tid, dirtypages, rightPage.getId().getPageNumber());  </span><br><span class="line">   <span class="comment">// 更新左页面子页面的父指针  </span></span><br><span class="line">   updateParentPointers(tid, dirtypages, leftPage);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Bug-记录"><a href="#Bug-记录" class="headerlink" title="Bug 记录"></a>Bug 记录</h4><ol><li>注意左子树的 key 小于等于当前结点的 key，如果漏掉等于的话在查找重复值的情况会出错。</li><li>不论是对 Tuple 还是 Entry，都要先 delete 再 insert，因为 insert 操作会更新 RecordId，如果此时 delete 的话会报错。</li><li>全部做完之后发现部分代码无法通过 <code>checkRep()</code>。<ol><li>一个 BUG 是在 MergeLeafPages 的时候忘了更新右页面的左指针（需要 getPage）</li><li>另一个 BUG 是在 stealFromRightInternalPage 的时候没想到只移动一个 Entry 的情况，这个时候两个条件不能是 if-else if 的关系，而应该是并列的。</li><li>还有一个 BUG 是在 splitLeafPage 的时候同样忘记更新右页面的左指针。</li></ol></li><li>在执行 BTreeTest 的时候，虽然通过了，但一直在报 <code>ConcurrentModificationException</code> 错（从死锁检测抛出），推测是 adjList 里面的 List 不是线程安全的，归根结底是 PageLock 的 holds 没有采用 CopyOnWriteArrayList，更改后消除报错。</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231214195710.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><blockquote><p>Lab 仓库地址：<a href="https://github.com/zyrate/simple-db-hw-2021">zyrate/simple-db-hw-2021 (github.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab 5 要求实现 SimpleDB 的 B+树索引存储机制。整体的 B+树相关代码还是较为复杂的，但是 SimpleDB 帮我们写了大部分结构性的代码，让我们去完成较重要的功能性代码。但是所有的代码都需要理解透彻。&lt;/p&gt;
&lt;h4 id=&quot;B-树索引结构&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="java" scheme="https://zyrate.github.io/tags/java/"/>
    
    <category term="mit6830" scheme="https://zyrate.github.io/tags/mit6830/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 4</title>
    <link href="https://zyrate.github.io/2023/10/25/830%20Lab%204/"/>
    <id>https://zyrate.github.io/2023/10/25/830%20Lab%204/</id>
    <published>2023-10-24T16:00:00.000Z</published>
    <updated>2024-03-12T09:59:40.563Z</updated>
    
    <content type="html"><![CDATA[<p>Lab4 是实现 SimpleDB 的并发事务系统，跟前面的内容相比较为复杂。</p><p>一般来说数据库的事务需要满足 ACID 特性，即<strong>原子性、一致性、隔离性、持久性</strong>。<br><strong>原子性</strong>就是该事务的所有操作要么全部完成，要么全部取消，要求通过下面的操作保证：</p><ol><li>不从页面缓存中逐出“脏页”（被某个事务更新的页面）。——NO STEAL 规则</li><li>在事务正确提交时，强制刷新所有脏页到磁盘。</li></ol><p><strong>隔离性</strong>就是同时执行的多个事务不会相互干扰，通过将要实现的锁机制保证。<br>一致性在 SimpleDB 中没有强调，持久性应该在 Lab6 的恢复功能上体现。</p><h3 id="SimpleDB-事务并发控制实现"><a href="#SimpleDB-事务并发控制实现" class="headerlink" title="SimpleDB 事务并发控制实现"></a>SimpleDB 事务并发控制实现</h3><h4 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h4><p>在数据库中锁定对象可以是表、页面、元组、属性等，SimpleDB 规定的锁定粒度是页面（Page）。可供事务获取的锁类型有两种：共享锁和排他锁，规则如下。</p><ol><li>事务在读取页面之前，必须具有共享锁；</li><li>事务在修改页面之前，必须具有排他锁；</li><li>多个事务可以在一个页面上具有共享锁；</li><li>只有一个事务可以在一个对象有排他锁。</li></ol><p>在该规则下，如果一个事务在请求页面的时候，无法获取该页面的锁，就必须被阻塞，以等待锁资源<strong>被其他事务释放</strong>留给自己去竞争。特别的是，如果一个事物在申请排他锁时，如果已经持有了该页面的共享锁且是唯一一个持有者，那么可将此共享锁升级为排他锁（<strong>锁升级</strong>）。</p><h4 id="两阶段锁（2PL）"><a href="#两阶段锁（2PL）" class="headerlink" title="两阶段锁（2PL）"></a>两阶段锁（2PL）</h4><p>考虑两个事务按照上述锁机制正常执行，有可能发生下图的情况：（X 排他，S 共享）<br><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231017180921.png" width=200/><br>T1 和 T2 都正常提交了，但是 T1 对于页面 A 发生了“<strong>不可重复读</strong>”现象，即在同一个事务先后两次读到的数据有可能不一样（被别的事务如 T2 修改了）。</p><p>解决这个问题的办法就是实现两阶段锁协议（2PL）。2PL 的两个阶段分别是<strong>扩展阶段（Growing）</strong> 和 <strong>收缩阶段（Shrinking）</strong>，在扩展阶段事务只能获取锁，在收缩阶段事务只能释放锁。</p><p>两阶段锁协议本身足以保证冲突可串行性，但它可能会导致<strong>级联中止（Cascading aborts）</strong> 问题，即一个事务的中止可能导致其他多个事务也一起中止。这是因为在 2PL 中一个事务可能基于另一个事务尚未提交的数据进行操作，如果那个事务被中止，就会发生级联中止。如下图：<br><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231017183102.png" width=200/><br>为了避免这种情况，需要实现<strong>严格两阶段锁</strong>协议（Strict 2PL），即一个事务只能在它提交或中止时释放所有锁。SimpleDB 要求实现 Strict 2PL 协议。这其实简化了操作，因为在赋予事务锁的时候不用考虑什么时候执行完了操作该释放，而是通通等到最后 commit 时释放。</p><h4 id="页面级锁机制实现"><a href="#页面级锁机制实现" class="headerlink" title="页面级锁机制实现"></a>页面级锁机制实现</h4><p>刚开始时看到需要实现读写锁，自然会想到 JUC 中的 <code>ReentrantReadWriteLock</code> 类，然而该类是负责线程同步的，一个事务可以有多个线程，所以他们不在同一粒度。另外只用 Java 提供的这些类并不能很好地实现 2PL 协议，也并不契合事务并发场景。因此我们需要自己实现事务的读写锁机制，但是类库中的一些思想可以借鉴。</p><p>我们定义一个 LockManger 来负责维护事务和锁的状态，在 BufferPool 中事务只需调用相应的方法来获取和释放锁就行了。可以想到 LockManger 需要提供以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取共享锁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">acquireSharedLock</span><span class="params">(TransactionId tid, PageId pid)</span>;</span><br><span class="line"><span class="comment">// 获取排他锁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">acquireExclusiveLock</span><span class="params">(TransactionId tid, PageId pid)</span>;</span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(TransactionId tid, PageId pid)</span>;</span><br><span class="line"><span class="comment">// 是否持有锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">holdsLock</span><span class="params">(TransactionId tid, PageId pid)</span></span><br></pre></td></tr></table></figure><p>更新后的 <code>BufferPool.getPage</code> 方法如下（因为是页面级锁定，所以只在这里获取锁）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(perm == Permissions.READ_ONLY)&#123;  </span><br><span class="line">        <span class="comment">// 获取共享锁  </span></span><br><span class="line">        <span class="keyword">if</span>(!holdsLock(tid, pid)) &#123;  </span><br><span class="line">            lockManager.acquireSharedLock(tid, pid);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line"><span class="comment">// 获取排他锁 - 存在锁升级情况，所以不判断holdsLock  </span></span><br><span class="line">lockManager.acquireExclusiveLock(tid, pid);  </span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//缓存中获取页面</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>所谓事务获取到锁就是“<strong>放行</strong>”，获取不到就是“<strong>阻塞</strong>”。</p><p>这里的“锁”其实说成“锁的使用权”或“钥匙”更贴切一点。每个页面其实只有一把锁，需要钥匙才能进入访问。而共享锁，就是说这把锁可以有多把钥匙开启，每一把钥匙给一个事务；排他锁就是只能有一把钥匙给唯一的事务。如果事务获取不到钥匙就被阻塞。其实 Java 中的<strong>重量级锁</strong>也是这个道理，有时候会被“锁”这个名词给绕晕。</p><p>LockManger 的作用就是记录谁拥有某个页面的钥匙，是把什么样的钥匙，为了统一起见，下文仍称“锁”。</p><p>接下来是 LockManger 的实现，既然每个页面只有一把锁，并且需要维护这把锁的状态和与事务的关系，那么就可以设计一个 PageLock 类来管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PageLock</span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> PageId pageId; <span class="comment">// 页面ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> lockState; <span class="comment">// 0:空闲,-1:排他锁,&gt;0:获取到共享锁的事务数量  </span></span><br><span class="line">    CopyOnWriteArrayList&lt;TransactionId&gt; holds; <span class="comment">// 获取锁到的事务  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageLock</span><span class="params">(PageId pageId)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.pageId = pageId;  </span><br><span class="line">        holds = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 避免并发修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">stateIncrement</span><span class="params">(<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    lockState += n;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getLockState</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> lockState;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一个 <code>lockState</code> 记录这个页面锁的状态。等于 0 代表该页面是空闲的，没有事务访问（无人持锁）；等于 -1 代表该页面的锁为排他锁；大于 0 代表该页面的锁为共享锁，具体数字表示有多少事务正在共享该锁。<code>holds</code> 记录了都是哪些（个）事务获取到该锁。</p><p>在 LockManger 中，我们用一个 Map 记录页面和锁的对应关系；为了方便查询，同样用一个 Map 记录事务和其所持有的锁集合的对应关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;PageId, PageLock&gt; pageLocks;</span><br><span class="line"><span class="keyword">private</span> Map&lt;TransactionId, List&lt;PageId&gt;&gt; lookups;</span><br></pre></td></tr></table></figure><p>在实现“阻塞”效果时，采用了 <code>wait/notify</code> 的方式，也可采用 JUC 中的各种合适的工具类。注意如果仅仅是为了实现读写锁的话，不需要我们自己记录哪些事务陷入了等待，因为这些工具内部已经实现了记录阻塞线程的逻辑，可以在需要时唤醒。但是在后面实现死锁检测的时候，还是需要记录的。</p><p>LockManager 需要对外提供的四个方法实现如下：<br><strong>申请共享锁</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireSharedLock</span><span class="params">(TransactionId tid, PageId pid)</span> <span class="keyword">throws</span> TransactionAbortedException &#123;  </span><br><span class="line"><span class="comment">// 拿到页面对应的锁，如果还没有就新建一个</span></span><br><span class="line">    <span class="type">PageLock</span> <span class="variable">pageLock</span> <span class="operator">=</span> getPageLock(pid);  </span><br><span class="line"><span class="keyword">synchronized</span>(pageLock)&#123;</span><br><span class="line"><span class="comment">// 是排他锁且不是同一个事务（如果是同一个事务直接放行）  </span></span><br><span class="line">    <span class="keyword">while</span>(pageLock.getLockState() == -<span class="number">1</span></span><br><span class="line">    &amp;&amp; !pageLock.holds.get(<span class="number">0</span>).equals(tid))&#123;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">pageLock.wait();  <span class="comment">// 阻塞</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">&#125;    </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(pageLock.getLockState() &gt; <span class="number">0</span></span><br><span class="line"> &amp;&amp; pageLock.holds.contains(tid))&#123;  </span><br><span class="line">    <span class="comment">// 重入共享锁 - 不记录  </span></span><br><span class="line">    <span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 锁空闲、是共享锁、有排他申请共享，这几种都放行</span></span><br><span class="line"><span class="comment">// 获取到锁后，记录已获取状态  </span></span><br><span class="line">    pageLock.stateIncrement(<span class="number">1</span>); <span class="comment">// 共享数量+1</span></span><br><span class="line">    pageLock.holds.add(tid);  </span><br><span class="line">    addToLookups(tid, pid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>申请排他锁</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireExclusiveLock</span><span class="params">(TransactionId tid, PageId pid)</span> <span class="keyword">throws</span> TransactionAbortedException &#123;  </span><br><span class="line">    <span class="type">PageLock</span> <span class="variable">pageLock</span> <span class="operator">=</span> getPageLock(pid);  </span><br><span class="line"><span class="keyword">synchronized</span>(pageLock)&#123;</span><br><span class="line"><span class="comment">// 只要锁不空闲，就不能获取排他锁（除非锁升级）</span></span><br><span class="line">    <span class="keyword">while</span>(pageLock.getLockState() != <span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="comment">// 该事务已经获取了共享锁，且它独占  </span></span><br><span class="line">        <span class="keyword">if</span>(pageLock.getLockState() == <span class="number">1</span> </span><br><span class="line">        &amp;&amp; pageLock.holds.get(<span class="number">0</span>).equals(tid))&#123;  </span><br><span class="line">            <span class="comment">// 升级为排他锁 - 放行且不记录</span></span><br><span class="line">            pageLock.stateIncrement(-<span class="number">2</span>);  <span class="comment">// 此时lockState变-1</span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageLock.getLockState() == -<span class="number">1</span></span><br><span class="line">        &amp;&amp; pageLock.holds.get(<span class="number">0</span>).equals(tid))&#123;  </span><br><span class="line">            <span class="comment">// 该事务已经获取了排他锁，又重入 - 放行且不记录  </span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;          </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">// 否则阻塞</span></span><br><span class="line">            pageLock.wait();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取到锁后，记录已获取状态  </span></span><br><span class="line">    pageLock.stateIncrement(-<span class="number">1</span>);  </span><br><span class="line">    pageLock.holds.add(tid);  </span><br><span class="line">    addToLookups(tid, pid);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接在方法上加 synchronized 也是可行的，但是这样需要每次 notifyAll 所有阻塞的线程，针对性不强。因为每个页面有一个锁，不妨对 pageLock 加锁，这样每次只需 notify 一个阻塞在本页面的线程即可。<del>注意后者需要在 wait 的时候设定等待超时时间，因为会出现别的线程先 notify 后，本线程才进入 wait 的情况，会永久阻塞下去，而设置超时时间后就会不停的循环判断锁条件。这是 wait/notify 方法的固有问题，如果想避免可以用 Semaphore 等其他工具。</del> （搞错了，没有这个问题，因为 PageLock 已经互斥访问了）</p><p><strong>释放锁</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(TransactionId tid, PageId pid)</span>&#123; </span><br><span class="line"><span class="type">PageLock</span> <span class="variable">pageLock</span> <span class="operator">=</span> getPageLock(pid);  </span><br><span class="line"><span class="keyword">synchronized</span>(pageLock)&#123;</span><br><span class="line">pageLock.holds.remove(tid);  <span class="comment">// 从持有者中去除</span></span><br><span class="line">    removeFromLookups(tid, pid); <span class="comment">// 从查询表中去除</span></span><br><span class="line">    <span class="keyword">if</span>(pageLock.getLockState() == -<span class="number">1</span>) &#123;  </span><br><span class="line">    <span class="comment">// 如果当前为排他锁，更新为空闲</span></span><br><span class="line">        pageLock.stateIncrement(<span class="number">1</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageLock.getLockState() &gt; <span class="number">0</span>)&#123; </span><br><span class="line">    <span class="comment">// 如果当前为共享锁，持有数-1</span></span><br><span class="line">        pageLock.stateIncrement(-<span class="number">1</span>);  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 当没有事务拿着锁了（空闲状态），或只有一个事务拿着锁（可能有锁升级不成功从而等待的情况）  </span></span><br><span class="line">    <span class="keyword">if</span>(pageLock.getLockState()==<span class="number">0</span>||pageLock.getLockState()==<span class="number">1</span>)&#123;  </span><br><span class="line">    <span class="comment">// 唤醒该页面阻塞的某个事务去竞争空闲锁或升级锁</span></span><br><span class="line">        pageLock.notify();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a>死锁检测</h4><p>检测死锁通常是通过事务之间的<strong>等待关系图</strong>是否有回路（循环等待）来判断，具体的方法有两种：</p><ol><li><strong>拓扑排序</strong>：反复寻找一个入度为 0 的顶点，将顶点从图中删除并同时删除它的所有出边，如果最终图中全部剩下入度为 1 的顶点，则图中有回路；如果最终全部顶点都被删除，则不包含回路。</li><li><strong>DFS</strong>：从所有的点开始进行深度优先搜索，如果一条 DFS 路线中有顶点被第二次访问到，则图中有回路，否则不包含回路。</li></ol><p>本实验采用 DFS 方法。</p><p>设计死锁检测器类 DeadlockDetector：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadlockDetector</span> &#123;  </span><br><span class="line">    <span class="comment">// 图的邻接表</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TransactionId, List&lt;TransactionId&gt;&gt; adjList;   </span><br><span class="line">    <span class="comment">// 顶点状态 - null/0:未访问，1:已访问，2:在递归栈内</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TransactionId, Integer&gt; nodeState;   </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadlockDetector</span><span class="params">()</span>&#123;  </span><br><span class="line">        adjList = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();  </span><br><span class="line">        nodeState = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 阻塞将要发生 - 进行记录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blockOccurs</span><span class="params">(TransactionId tid, List&lt;TransactionId&gt; listToWait)</span>&#123;  </span><br><span class="line">        adjList.put(tid, listToWait);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 事务被唤醒 - 删除记录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notified</span><span class="params">(TransactionId tid)</span>&#123;  </span><br><span class="line">        adjList.remove(tid);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// DFS检测是否有回路</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">detectCycle</span><span class="params">()</span>&#123;  </span><br><span class="line">        nodeState.clear();  </span><br><span class="line">        <span class="keyword">for</span>(TransactionId tid:adjList.keySet())&#123;  </span><br><span class="line">            <span class="keyword">if</span>(dfs(tid))&#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TransactionId tid)</span>&#123;  </span><br><span class="line">        nodeState.put(tid, <span class="number">2</span>); <span class="comment">// 标记入递归栈  </span></span><br><span class="line">        List&lt;TransactionId&gt; adj = adjList.get(tid);  </span><br><span class="line">        <span class="keyword">if</span>(adj != <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">for</span>(TransactionId t:adj)&#123;  </span><br><span class="line">                <span class="comment">// 跳过自反边的情况 - 单个锁升级等待不算死锁</span></span><br><span class="line">                <span class="keyword">if</span>(tid.equals(t)) <span class="keyword">continue</span>;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> nodeState.getOrDefault(t, <span class="number">0</span>);  </span><br><span class="line">                <span class="keyword">if</span>(state == <span class="number">2</span>)&#123;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 找到环  </span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state == <span class="number">0</span> &amp;&amp; dfs(t))&#123;   <span class="comment">// 递归</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 找到环  </span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        nodeState.put(tid, <span class="number">1</span>); <span class="comment">// 出递归栈，标记已访问  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了简便，不再设计顶点类，而是让每一个 TransactionId 代表自己的顶点，采用图的<strong>邻接表</strong>表示法。nodeState 记录 DFS 中顶点的状态。</p><p>每当发生一个阻塞就调用 <code>blockOccurs</code> 方法，因为是页面级的锁定，所以一个事务陷入阻塞后一定等待的是持有页面锁的所有事务，也就是 PageLock 里面 holds 列表所存储的事务。所以我们只需每次将 holds 传入第二个参数，当做该事务顶点的所有<strong>出边</strong>（表示等待）即可。当事务获得锁（或者发现死锁）后，调用 <code>notified</code> 方法删除该顶点的所有出边。</p><p>更新获取共享锁的代码如下（循环部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">while</span>(pageLock.getLockState() == -<span class="number">1</span> </span><br><span class="line">  &amp;&amp; !pageLock.holds.get(<span class="number">0</span>).equals(tid))&#123;  </span><br><span class="line">    deadlockDetector.blockOccurs(tid, pageLock.holds); <span class="comment">// 添加等待边 </span></span><br><span class="line">    <span class="keyword">if</span>(deadlockDetector.detectCycle())&#123; <span class="comment">// 检测到死锁  </span></span><br><span class="line">        deadlockDetector.notified(tid);  <span class="comment">// 移除等待边</span></span><br><span class="line">        <span class="comment">// 抛出异常，SimpleDB会abort该事务</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransactionAbortedException</span>(); </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        pageLock.wait(<span class="number">10</span>);  </span><br><span class="line">        deadlockDetector.notified(tid);  <span class="comment">// 移除等待边</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>获取排他锁同理。</p><h3 id="DEBUG-记录"><a href="#DEBUG-记录" class="headerlink" title="DEBUG 记录"></a>DEBUG 记录</h3><ol><li>PageCache 中的 page 数量可能会小于 LockManger 中的 page 数量，所以在根据 LockManager 中的 Page 来 flush 的时候需要进行 null 判断。</li><li>在 Transaction system test 的 10 个线程测试中，出现了时而成功时而永久阻塞的情况。经过调试，<ol><li>发现是在 <code>flushAllPages()</code> 的循环里卡住；</li><li>发现 pageCache 返回的 Iterator 会不停的给出同一个 next 页面，死循环；</li><li>发现原因是自定义的双向链表尾结点 tail 丢失链接，导致无法停止遍历；</li><li>发现是没有注意线程安全的问题。在之前实现 LRUBasedPageCache 的时候没有使用 <code>ConcurrentHashMap</code> 类和 <code>synchronized</code> 关键字，导致并发问题，修改之后就没有问题了。</li></ol></li><li>多线程情况下，所有的 Map 都最好用 ConcurrentHashMap，List 最好用 CopyOnWriteArrayList，它们除了是线程安全的，还支持遍历时修改，不会报并发修改异常。</li><li>在实现死锁检测的时候要注意：当一个事务已经获取共享锁，又要升级为排他锁，此时如果共享数不为 1，那么就要阻塞，但这个时候就会出现自己等待自己的情况（<strong>等待图中体现为自反边</strong>），但这不是死锁（因为其他的共享锁事务在 release 时会进行唤醒，当共享数为 1 时就不继续等待了），<strong>不应该</strong>被识别。所以在 DFS 的时候要跳过自反边。</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231018210912.png"/></div></div><blockquote><p>Lab 仓库地址：<a href="https://github.com/zyrate/simple-db-hw-2021">zyrate/simple-db-hw-2021 (github.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab4 是实现 SimpleDB 的并发事务系统，跟前面的内容相比较为复杂。&lt;/p&gt;
&lt;p&gt;一般来说数据库的事务需要满足 ACID 特性，即&lt;strong&gt;原子性、一致性、隔离性、持久性&lt;/strong&gt;。&lt;br&gt;&lt;strong&gt;原子性&lt;/strong&gt;就是该事务的所有操</summary>
      
    
    
    
    
    <category term="java" scheme="https://zyrate.github.io/tags/java/"/>
    
    <category term="mit6830" scheme="https://zyrate.github.io/tags/mit6830/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 3</title>
    <link href="https://zyrate.github.io/2023/09/27/830%20Lab%203/"/>
    <id>https://zyrate.github.io/2023/09/27/830%20Lab%203/</id>
    <published>2023-09-26T16:00:00.000Z</published>
    <updated>2024-03-12T09:59:47.980Z</updated>
    
    <content type="html"><![CDATA[<p>上一个 Lab 完成的是查询过程，Lab 3 的内容是查询优化（Query Optimization），主要完成两个部分，表统计信息 <strong>TableStats</strong> 和连接优化器 <strong>JoinOptimizer</strong>。</p><h3 id="Cost-模型"><a href="#Cost-模型" class="headerlink" title="Cost 模型"></a>Cost 模型</h3><p>在一次查询中，最耗时的部分就是<strong>多表 Join</strong>，然而采用不同的 Join 顺序的效率差别很大，这就需要进行优化了。本 Lab 基于成本（Cost）模型进行查询优化，分别关注<strong>scancost</strong> 和 <strong>joincost</strong>。</p><p>在 Lab 3 给出的说明文字中，关于 joincost 在 Cost 总述和嵌套 Join 的 Cost 处的含义<strong>有一些出入</strong>（一个不包含 scan，一个包含 scan），为了避免引起歧义，统一采用如下的描述：</p><ul><li>scancost 是扫描一个数据表所需要的时间，大部分由磁盘 I/O 消耗。</li><li>joincost 是连接两个数据表所需要的总时间，不同的连接方式计算公式不一样，它包含 scancost,由 I/O 和 CPU 消耗。</li></ul><p>scancost 的计算公式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scancost(t1) <span class="operator">=</span> num_pages(t1) <span class="operator">*</span> io_cost_per_page</span><br></pre></td></tr></table></figure><p>当我们采用嵌套循环连接时， joincost 的计算公式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">joincost(t1 <span class="keyword">join</span> t2) <span class="operator">=</span> scancost(t1) <span class="operator">+</span> ntups(t1) <span class="operator">*</span> scancost(t2) <span class="operator">/</span><span class="operator">/</span>IO cost</span><br><span class="line">                       <span class="operator">+</span> ntups(t1) <span class="operator">*</span> ntups(t2)  <span class="operator">/</span><span class="operator">/</span>CPU cost</span><br></pre></td></tr></table></figure><p>scancost 取决于硬件速度和表的大小，joincost 取决于 scancost 和表的连接<strong>基数（cardinality）</strong>（在上述公式是 ntups） ，基数取决于谓词的<strong>选择性（selectivity）</strong>，因此想要计算 joincost 就必须对每个表的选择性进行估计。</p><h3 id="过滤选择性（Filter-Selectivity）"><a href="#过滤选择性（Filter-Selectivity）" class="headerlink" title="过滤选择性（Filter Selectivity）"></a>过滤选择性（Filter Selectivity）</h3><p>谓词过滤选择性（范围0-1）指的是表中的元组通过过滤谓词的比例。选择性越大，表的基数越大，反之则越小。</p><p>在 SimpleDB 中，每个表会有一个 TableStats 对象，维护该表的<strong>统计信息</strong>，其中包含 scancost 估计和某个谓词对该表某一列的 selectivity 估计。<strong>连接优化器</strong>（JoinOptimizer）会调用 TableStats 的方法获取目标表的相关数据，根据公式计算连接 Cost，以确定一个最优的（代价最小的）连接顺序（查询计划）。</p><p>关键问题在于如何对 selectivity 进行估计。最常用的方法是使用<strong>直方图（Histogram）</strong>。</p><p>具体来说，就是对该表的每一列建立一个直方图，每个直方图将该列从最小值到最大值分成若干个区间，每一个区间记录了<strong>落在该区间</strong>的元组数量。这样，在面对一个谓词时，我们可以很快地计算出通过该谓词过滤的<strong>大致元组数量</strong>。示意图如下：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231123212232.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><p>对于一个常量 const，假设它落到直方图某个区间的桶（bucket）高度为 h_b，宽度为 w_b，表中元组总数量为 ntups，那么：</p><ul><li>对于谓词 <code>f=const</code>，选择性估计公式为：<code>(h_b/w_b) / ntups</code>。</li><li>对于谓词 <code>f&gt;const</code>，如上图的情况所示，阴影部分就是通过谓词过滤的部分，它分为两部分：在桶 b 内的阴影部分、桶 b 右侧的所有桶。b 右侧的所有桶的选择性的计算公式都和 f=const 一样，最后进行累加即可；而对于桶 b 内阴影部分的选择性，计算公式为：<code>(h_b/ntups) / ((b_right-const)/w_b)</code>，这个公式假设在桶 b 内<strong>元组均匀分布</strong>。</li><li>对于谓词 <code>f&lt;const</code>，与上同理，对于桶 b 内阴影部分的选择性，计算公式为：<code>(h_b/ntups) / ((const-b_left)/w_b)</code>。</li><li>对于&gt;=谓词，只需要把&gt;和=的选择性相加即可，&lt;=同理。</li></ul><h3 id="IntHistogram-实现"><a href="#IntHistogram-实现" class="headerlink" title="IntHistogram 实现"></a>IntHistogram 实现</h3><p>要实现直方图，比较直观的方式是将每一个桶看做一个对象，这样在获取桶高和桶的左右边界时很方便。整个直方图就是一个桶数组。</p><p>首先新建一个内部类：<code>Bucket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bucket</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> left;  <span class="comment">// 这里要用double，因为max-min可能很小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> right;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> height;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bucket</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.height = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 填充该桶，高度+1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">populate</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.height++;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bucket 数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Bucket[] histData;</span><br></pre></td></tr></table></figure><p>实现选择性估计方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">estimateSelectivity</span><span class="params">(Predicate.Op op, <span class="type">int</span> v)</span> &#123;  </span><br><span class="line">    <span class="type">double</span> <span class="variable">selectivity</span> <span class="operator">=</span> -<span class="number">1.0</span>;  </span><br><span class="line">    <span class="comment">// 注意查询的值不一定在最大最小区间内  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 结构化、简化代码，减少出错  </span></span><br><span class="line">    <span class="keyword">switch</span> (op) &#123;  </span><br><span class="line">        <span class="keyword">case</span> EQUALS:  </span><br><span class="line">            selectivity = calculateEquals(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> GREATER_THAN:  </span><br><span class="line">        selectivity = <span class="number">1</span> - calculateLessThan(v) - calculateEquals(v);</span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> GREATER_THAN_OR_EQ:  </span><br><span class="line">            selectivity = <span class="number">1</span> - calculateLessThan(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> LESS_THAN:  </span><br><span class="line">            selectivity = calculateLessThan(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> LESS_THAN_OR_EQ:  </span><br><span class="line">            selectivity = calculateLessThan(v) + calculateEquals(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> NOT_EQUALS: <span class="comment">// 1 - Selectivity(=)  </span></span><br><span class="line">            selectivity = <span class="number">1</span> - calculateEquals(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> selectivity;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，把关键的计算过程封装成了其他函数，其实可以发现只需要实现<strong>等于</strong>和<strong>小于</strong>的选择性估计即可，其他的谓词都可以通过这两种推算出来。</p><p>估算等于的选择性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">double</span> <span class="title function_">calculateEquals</span><span class="params">(<span class="type">int</span> v)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> findBucketIndex(v);  </span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 这里必须要+1，杜绝零点几的桶宽出现  </span></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">double</span>) histData[i].height / (((<span class="type">int</span>)bWidth+<span class="number">1</span>) * ntups);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>估算小于的选择性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">double</span> <span class="title function_">calculateLessThan</span><span class="params">(<span class="type">int</span> v)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> findBucketIndex(v);  </span><br><span class="line">    <span class="type">double</span> <span class="variable">selectivity</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123; <span class="comment">// 在最左侧  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index == -<span class="number">2</span>)&#123; <span class="comment">// 在最右侧  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="comment">// 在区间内，先算桶内的部分  </span></span><br><span class="line">        selectivity = (<span class="type">double</span>) histData[index].height / ntups * (v - histData[index].left) / bWidth;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 在算桶外的部分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index; i++)&#123;  </span><br><span class="line">        selectivity += (<span class="type">double</span>) histData[i].height / ntups;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> selectivity;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringHistogram 采用了一种简便的实现方式，即“套壳”IntHistogram。所有的 String 数据被按照一定规则转化为 int 类型，然后使用整型直方图去管理和统计。</p><h3 id="TableStats-实现"><a href="#TableStats-实现" class="headerlink" title="TableStats 实现"></a>TableStats 实现</h3><p>有了直方图这个工具后，对表的信息统计就很方便了，每一个 Table 会附带一个 TableStats，在初始化的时候就对该表的每一列新建一个直方图存储起来，当然这个直方图并不能实时更新，因为它的范围已经固定了，但是在一段时间内，它能够反应该表数据的大致分布情况，从而为查询做出优化。TableStats 需要根据不同的策略进行重建。</p><p>在 TableStats 初始化时，需要扫描两遍 Table：</p><ul><li>第一遍计算每一列的最大最小值</li><li>第二遍为每一列新建一个直方图</li></ul><h3 id="Join-Ordering"><a href="#Join-Ordering" class="headerlink" title="Join Ordering"></a>Join Ordering</h3><p>有了 TableStats 的各项统计信息，我们就可以对一个 Join 进行优化了，所谓的优化其实就是生成一个代价最小的 Join 执行计划。</p><p>对于一系列需要 Join 的逻辑表对（LogicalJoinNode），我们采用 Selinger 算法进行动态规划查找，找到代价最小的计划。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;LogicalJoinNode&gt; <span class="title function_">orderJoins</span><span class="params">(  </span></span><br><span class="line"><span class="params">        Map&lt;String, TableStats&gt; stats,  </span></span><br><span class="line"><span class="params">        Map&lt;String, Double&gt; filterSelectivities, <span class="type">boolean</span> explain)</span>  </span><br><span class="line">        <span class="keyword">throws</span> ParsingException &#123;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接对</span></span><br><span class="line">    Set&lt;LogicalJoinNode&gt; joinSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(joins);  </span><br><span class="line">    <span class="comment">// join order 缓存</span></span><br><span class="line">    <span class="type">PlanCache</span> <span class="variable">planCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PlanCache</span>();  </span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> joinSet.size();  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=size; i++)&#123;  </span><br><span class="line">    <span class="comment">// 遍历子集合</span></span><br><span class="line">        Set&lt;Set&lt;LogicalJoinNode&gt;&gt; sets = enumerateSubsets(joins, i);  </span><br><span class="line">        <span class="keyword">for</span>(Set&lt;LogicalJoinNode&gt; set:sets)&#123;  </span><br><span class="line">            <span class="type">double</span> <span class="variable">bestCost</span> <span class="operator">=</span> Double.MAX_VALUE;  </span><br><span class="line">            <span class="type">CostCard</span> <span class="variable">bestPlan</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        <span class="comment">// 找到本次bestPlan</span></span><br><span class="line">            <span class="keyword">for</span>(LogicalJoinNode joinNode:set)&#123;  </span><br><span class="line">                <span class="type">CostCard</span> <span class="variable">costCard</span> <span class="operator">=</span> computeCostAndCardOfSubplan(stats, filterSelectivities, joinNode, set, bestCost, planCache);  </span><br><span class="line">                <span class="keyword">if</span>(costCard != <span class="literal">null</span> &amp;&amp; costCard.cost &lt; bestCost)&#123;  </span><br><span class="line">                    bestCost = costCard.cost;  </span><br><span class="line">                    bestPlan = costCard; <span class="comment">// 这里面包含着计划  </span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(bestPlan != <span class="literal">null</span>)&#123;  </span><br><span class="line">                planCache.addPlan(set, bestPlan.cost, bestPlan.card, bestPlan.plan);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(explain)&#123;  </span><br><span class="line">        printJoins(planCache.getOrder(joinSet), planCache, stats, filterSelectivities);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 返回最优的join order</span></span><br><span class="line">    <span class="keyword">return</span> planCache.getOrder(joinSet);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231124110004.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><blockquote><p>Lab 仓库地址：<a href="https://github.com/zyrate/simple-db-hw-2021">zyrate/simple-db-hw-2021 (github.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一个 Lab 完成的是查询过程，Lab 3 的内容是查询优化（Query Optimization），主要完成两个部分，表统计信息 &lt;strong&gt;TableStats&lt;/strong&gt; 和连接优化器 &lt;strong&gt;JoinOptimizer&lt;/strong&gt;。&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="java" scheme="https://zyrate.github.io/tags/java/"/>
    
    <category term="mit6830" scheme="https://zyrate.github.io/tags/mit6830/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 2</title>
    <link href="https://zyrate.github.io/2023/09/08/830%20Lab%202/"/>
    <id>https://zyrate.github.io/2023/09/08/830%20Lab%202/</id>
    <published>2023-09-07T16:00:00.000Z</published>
    <updated>2024-03-12T09:59:51.232Z</updated>
    
    <content type="html"><![CDATA[<p>Lab 2 和 Lab 3 都与数据库的查询过程有关，在执行查询的过程中会先后生成<strong>LogicalPlan</strong>和<strong>PhysicalPlan</strong>。逻辑计划由一系列的逻辑算子结点列表组成，它保存了需要进行 Scan、Join、Filter 等操作的表名、列名、谓词等信息。由逻辑计划生成的物理计划其实就是一系列物理算子嵌套形成的结点树。</p><h3 id="火山模型"><a href="#火山模型" class="headerlink" title="火山模型"></a>火山模型</h3><p>SimpleDB 采用的是最经典且最广泛使用的查询模型：<strong>火山模型（Volcano）</strong>，也叫<strong>流水线模型（Pipeline</strong>）。</p><p>该模型要求：每一个物理计划算子（Operator）都要实现 <code>next()</code> 方法，在该方法中，循环调用它的 child 算子的 next 方法以获取元组并进行数据处理，根据本算子的逻辑返回给<strong>父算子</strong>一个元组。直到 child 没有元组可获取，则返回 null。因此数据是从最底层数据表，一层一层的经过中间算子的处理、过滤，被传递到顶层的客户端的，因此被形象地叫做“火山模型”。而“流水线”的意思是，每当父算子调用 child 的 next 方法后，如果它想调用下一次 next，就只能等待这一次获取的数据经过物理计划自底向上的“流水线算子”的处理直至“涌出”，这期间父算子无法做其他事情。</p><p>火山模型的<strong>优点</strong>是每一层的算子只需要无脑从子算子获取元组，并根据自己的逻辑考虑如何返回元组给父算子，而不需要关心父算子和子算子具体的逻辑和实现。</p><p>在 SimpleDB 中，最顶层的算子是 Project（投影），它负责把所有的结果元组按照查询要求只显示指定的 Field 列；最底层的算子是 SeqScan（顺序扫），它负责从指定的数据表中一行一行的顺序读取元组；在这两者之间的算子有：Aggregate, Filter, Join, OrderBy, Insert, Delete 等。其中 Insert 和 Delete 比较特殊，因为他们不从数据表读取数据，而是从要插入或删除的元组集合中读取数据。</p><hr><p>Lab2 总共有 5 个 exercise，主要练习了与执行计划相关的各种 execution 操作。比如过滤、连接、聚合、插入、删除等操作。每一个操作算子都继承了 <code>Operator</code>（OpIterator）类，它们会：</p><ul><li>接受一个 child <code>OpIterator</code>，用以读取（遍历）目标数据；</li><li>接受一些控制该算子的参数；</li><li>同时实现 <code>hasNext()</code>、<code>next()</code> 等供外界遍历的方法。</li></ul><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><hr><ul><li>src/java/simpledb/execution/Predicate.java</li><li>src/java/simpledb/execution/JoinPredicate.java</li><li>src/java/simpledb/execution/Filter.java</li><li>src/java/simpledb/execution/Join.java</li></ul><hr><p>谓词和连接谓词的作用是根据指定的 <strong>field 、操作符和操作数</strong>来判断某一个 Tuple 是否需要过滤。而 <code>Filter</code> 和 <code>Join</code> 算子则遍历 child 数据，利用上述谓词来进行来进行过滤，返回留下来的 Tuple。实现起来比较简单。</p><p>这里有个注意的点是，每个实现了 <code>Operator</code> 的算子都要重写 <code>getTupleDesc()</code> 方法，生成该算子每次 <code>next()</code> 后返回的元组结构描述。比如 Join 算子返回的是两个元组合并后的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TupleDesc <span class="title function_">getTupleDesc</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2"></a>Exercise 2</h3><hr><ul><li>src/java/simpledb/execution/IntegerAggregator.java</li><li>src/java/simpledb/execution/StringAggregator.java</li><li>src/java/simpledb/execution/Aggregate.java</li></ul><hr><p><code>IntegerAggregater</code> 和 <code>StringAggregator</code> 是具体类型的聚合器，它们的作用是在聚合算子 <code>Aggregate</code> 遍历表的过程中<strong>统计分组（group）信息</strong>并得到最终聚合结果。Integer 类型有五种基本聚合操作：MIN, MAX, SUM, AVG, COUNT，而 String 类型只有 COUNT 一种。不同的聚合操作进行不同的计算即可。</p><h3 id="Exercise-3-4"><a href="#Exercise-3-4" class="headerlink" title="Exercise 3, 4"></a>Exercise 3, 4</h3><hr><ul><li>src/java/simpledb/storage/HeapPage.java</li><li>src/java/simpledb/storage/HeapFile.java</li><li>src/simpledb/BufferPool.java<ul><li>insertTuple()</li><li>deleteTuple()</li></ul></li><li>src/java/simpledb/execution/Insert.java</li><li>src/java/simpledb/execution/Delete.java</li></ul><hr><p>练习 3 和练习 4 要求实现 HeapFile 和 HeapPage 的可变性，即可以随时插入、删除元组，并且实现 <code>Insert</code> 和 <code>Delete</code> 算子。</p><p>首先，向 HeapPage 中插入元组需要根据 header 标志位找到一个空闲 slot，在插入后（数组赋值）header 对应位置标志为 1；删除元组则反之。因为 header 使用 byte 数组存储的，所以需要一定算法将对应 byte 取出更改某一位值后再放回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">markSlotUsed</span><span class="params">(<span class="type">int</span> i, <span class="type">boolean</span> value)</span> &#123;</span><br><span class="line"><span class="type">byte</span> <span class="variable">markBit</span> <span class="operator">=</span> value?(<span class="type">byte</span>)<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">oldByte</span> <span class="operator">=</span> header[i/<span class="number">8</span>];</span><br><span class="line"><span class="type">byte</span> <span class="variable">newByte</span> <span class="operator">=</span> (<span class="type">byte</span>) <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> pos=<span class="number">7</span>; pos&gt;=<span class="number">0</span>; pos--)&#123; <span class="comment">// 这里注意顺序</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">originBit</span> <span class="operator">=</span> (<span class="type">byte</span>) (oldByte &gt;&gt; pos &amp; <span class="number">1</span>); <span class="comment">// 不变的bit</span></span><br><span class="line"><span class="keyword">if</span>(pos == i%<span class="number">8</span>)&#123; <span class="comment">// 到了要设置的bit</span></span><br><span class="line">newByte |= markBit;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">newByte |= originBit;</span><br><span class="line">&#125;</span><br><span class="line">newByte &lt;&lt;= pos!=<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>; <span class="comment">// 除了最后一位，填充后左移</span></span><br><span class="line">&#125;</span><br><span class="line">header[i/<span class="number">8</span>] = newByte;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HeapFile 的插入方法需要遍历所有的 HeapPage，判断页面是否有空闲 slot，如果有的话，调用该页的 insert 方法，如果所有页面都无空闲，就要新建一个页面再行插入。</p><p>而最终所有的应用程序在插入元组时，是调用 BufferPool 的方法。BufferPool 调用 HeapFile 的 insert 方法，接收一个 Page 列表，存储所有被影响的页面（如果不考虑副本的话只有 1 个页面）。这些页面就是所谓的<strong>脏页（dirty page）</strong>，即在缓存中发生了改动但还没有同步到硬盘中的页面。BufferPool 需要将这些页面标记为“脏页”。</p><p>BufferPool、HeapFile、HeapPage 之间<strong>必须遵循</strong>固定的调用关系：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20230715113426.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><h3 id="Exercise-5"><a href="#Exercise-5" class="headerlink" title="Exercise 5"></a>Exercise 5</h3><hr><ul><li>src/java/simpledb/storage/BufferPool.java<ul><li>evictPage()</li></ul></li></ul><hr><p>练习 5 要求在缓冲区满了以后实现<strong>页面置换算法</strong>。因为之前没有考虑这个功能所以 <code>getPage()</code> 方法要重新写。</p><p>最常见的置换算法是 LRU（最近最久未使用算法），实现它可以用一个 List，每次访问一个页面就把它放到表头，这样需要同置换时，表尾的页面就是最近最久未使用的，直接逐出。然而仅仅用一个 List，在访问页面时还需要遍历查找，不如 HashMap 高效，但是仅仅用 HashMap 又无法实现算法要求。</p><p>所以我将两者结合，自定义了一个 PageCache 接口和 LRUBasedCache 实现类，手动实现双向链表，结合 HashMap，实现了 O(1) 复杂度 GET、PUT 操作和灵活置换的 LRU 算法。</p><p>页面缓存接口 <code>PageCache</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PageCache</span> &#123;  </span><br><span class="line"><span class="comment">// 向缓存中添加页面</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">putPage</span><span class="params">(Page page)</span>;  </span><br><span class="line">    <span class="comment">// 系统内部获取页面 - LRU不生效</span></span><br><span class="line">    Page <span class="title function_">getPage</span><span class="params">(PageId pid)</span>;  </span><br><span class="line">    <span class="comment">// 外部（事务）获取页面 - LRU生效</span></span><br><span class="line">    Page <span class="title function_">accessPage</span><span class="params">(PageId pid)</span>; </span><br><span class="line">    <span class="comment">// 从缓存中删除页面 </span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removePage</span><span class="params">(PageId pid)</span>;  </span><br><span class="line">    <span class="comment">// 缓存是否已满</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 下一个要被置换的页面PID  </span></span><br><span class="line">    PageId <span class="title function_">pidToBeEvicted</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 置换页面（删除）</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">evictPage</span><span class="params">()</span>;  </span><br><span class="line">    <span class="comment">// 页面迭代器</span></span><br><span class="line">    Iterator&lt;Page&gt; <span class="title function_">iterator</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类 <code>LRUBasedCache</code> 主要就是维护一个双向链表和一个 PageId 到链表节点的映射，然后在 accessPage 的时候实现 LRU 规则（将被访问的节点向链表头移动）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUBasedCache</span> <span class="keyword">implements</span> <span class="title class_">PageCache</span>&#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 双向链表结点  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;  </span><br><span class="line">        Page page;  </span><br><span class="line">        Node pre;  </span><br><span class="line">        Node next;  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Page page)</span>&#123;  </span><br><span class="line">            <span class="built_in">this</span>.page = page;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;  </span><br><span class="line"><span class="keyword">private</span> Map&lt;PageId, Node&gt; map;  </span><br><span class="line"><span class="keyword">private</span> Node head;  </span><br><span class="line"><span class="keyword">private</span> Node tail;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Page <span class="title function_">accessPage</span><span class="params">(PageId pid)</span> &#123;  </span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(pid);  </span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    moveToHead(node); <span class="comment">// LRU算法 - 向链表头部移动  </span></span><br><span class="line">    <span class="keyword">return</span> node.page;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> PageId <span class="title function_">pidToBeEvicted</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> tail.pre;  </span><br><span class="line">    <span class="keyword">while</span>(n != head)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(n.page.isDirty() != <span class="literal">null</span>)&#123; <span class="comment">// 确保不是脏页（no-steal规则）  </span></span><br><span class="line">            n = n.pre;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> n==head?<span class="literal">null</span>:n.page.getId(); <span class="comment">// 返回null代表全都是脏页  </span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231124110229.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231124110302.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><blockquote><p>Lab 仓库地址：<a href="https://github.com/zyrate/simple-db-hw-2021">zyrate/simple-db-hw-2021 (github.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab 2 和 Lab 3 都与数据库的查询过程有关，在执行查询的过程中会先后生成&lt;strong&gt;LogicalPlan&lt;/strong&gt;和&lt;strong&gt;PhysicalPlan&lt;/strong&gt;。逻辑计划由一系列的逻辑算子结点列表组成，它保存了需要进行 Scan、Joi</summary>
      
    
    
    
    
    <category term="java" scheme="https://zyrate.github.io/tags/java/"/>
    
    <category term="mit6830" scheme="https://zyrate.github.io/tags/mit6830/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 1</title>
    <link href="https://zyrate.github.io/2023/08/09/830%20Lab%201/"/>
    <id>https://zyrate.github.io/2023/08/09/830%20Lab%201/</id>
    <published>2023-08-08T16:00:00.000Z</published>
    <updated>2023-12-09T12:37:06.570Z</updated>
    
    <content type="html"><![CDATA[<p>6.830是麻省理工学院（简称 MIT）的一门计算机科学课程，全名为”6.830: Database Systems”。该课程是关于数据库系统的高级课程，旨在教授学生关于数据库的设计、实现和优化的知识和技能。</p><p>课程附带了6个Lab以供练习，最终目的是使学生能够用Java写出一个简易数据库系统，这6个Lab由浅入深，覆盖了数据库的核心知识点。</p><p>Lab1 总共有 6 个 exercise，主要是练习的是数据库的数据存储部分。</p><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><hr><ul><li><code>src/java/simpledb/storage/TupleDesc.java</code></li><li><code>src/java/simpledb/storage/Tuple.java</code></li></ul><hr><p>在 SimpleDB 中，<strong>逻辑上</strong>的存储单元由大到小分别是 <strong>Database -&gt; Table -&gt; Tuple -&gt; Field</strong>。一个表中的每一条记录就是一个 Tuple 元组对象，元组中的每一列是一个 Field 字段值，目前只实现了 Int 和 String（固定长度）类型。</p><p>每个元组需要一个 TupleDesc 对象来描述该元组包含的所有字段，包括每个字段类型 <code>fieldType</code> 和字段名 <code>fieldName</code>，在 SimpleDB 中由 TDItem 对象存储。</p><blockquote><p>在实现 TupleDesc 的 toString() 方法时，发现了一个显而易见但之前没注意到的问题：集合每次在调用 iterator() 方法时都会生成一个新的 Iterator，所以不能反复调用此方法。另外 <code>for-each</code> 语句不能用于 Iterator，只能用于数组或实现了 Iterable 接口的对象。</p></blockquote><h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2"></a>Exercise 2</h3><hr><ul><li><code>src/java/simpledb/common/Catalog.java</code></li></ul><hr><p>Catalog 是管理数据库所有表的单例对象，比较简单。</p><ul><li>主要实现了供外界调用的 addTable、getTableName 等方法</li><li>在 SimpleDB 中，<strong>一个 Table 对应一个 DbFile</strong>，并且共享同一个 ID（DbFile 绝对路径的 hashcode）</li><li>这里的 HashMap 用并发安全的比较好</li></ul><h3 id="Exercise-3"><a href="#Exercise-3" class="headerlink" title="Exercise 3"></a>Exercise 3</h3><hr><ul><li><code>src/java/simpledb/storage/BufferPool.java</code><ul><li>实现 <code>getPage()</code> 方法</li></ul></li></ul><hr><p>BufferPool 也是一个全局单例对象，它负责维护访问页面 Page 的缓存。<br>关于页面，有三个容易混淆的概念：</p><ol><li>硬盘中的页面（也可以叫块 block）</li><li>操作系统中的页面</li><li>数据库中的页面</li></ol><p>Page 是数据库向硬盘中读取和写入一次数据的最小单位，一般来说数据库的页面比底层的页面要大一些，所以需要我们自己写一些逻辑来保证操作的原子性（暂时不需要）。</p><p>每次通过 PageId（存储 tableId 和 pageNo）来获取页面。首先查找缓存，没有的话就通过 Catalog 获取 DbFile 读取页面并加入缓存。如果缓存占满，就要进行页面置换（暂时不需要）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page <span class="title function_">getPage</span><span class="params">(TransactionId tid, PageId pid, Permissions perm)</span></span><br><span class="line"><span class="keyword">throws</span> TransactionAbortedException, DbException &#123;</span><br><span class="line"><span class="type">Page</span> <span class="variable">res</span> <span class="operator">=</span> idToPage.get(pid);</span><br><span class="line"><span class="keyword">if</span>(res == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Catalog</span> <span class="variable">catalog</span> <span class="operator">=</span> Database.getCatalog();</span><br><span class="line"><span class="type">DbFile</span> <span class="variable">f</span> <span class="operator">=</span> catalog.getDatabaseFile(pid.getTableId());</span><br><span class="line">res = f.readPage(pid);</span><br><span class="line">idToPage.put(pid, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exercise-4"><a href="#Exercise-4" class="headerlink" title="Exercise 4"></a>Exercise 4</h3><hr><ul><li><code>src/java/simpledb/storage/HeapPageId.java</code> （继承自 PageId）</li><li><code>src/java/simpledb/storage/RecordId.java</code></li><li><code>src/java/simpledb/storage/HeapPage.java</code> （继承自 Page）</li></ul><hr><p>前两个 Id 对象主要就是 <code>hashcode()</code> 和 <code>equals()</code> 方法的编写，注意：</p><blockquote><p>在重写一个类的 <code>equals</code> 方法的时候，必须同时重写 <code>hashCode</code> 方法。否则的话，在使用需要判断 hash 值的数据结构（如 HashMap）进行存储时就会出现问题。<strong>要求：</strong> equals 为 true 时 hashCode 一定为 true；hashCode 为 true 时，equals 不一定为 true。</p></blockquote><p>HeapPage 是实际存储在缓存中的页面（从硬盘读取到内存），它主要包含头部 header 标志位和一个固定长度的 tuple 数组（slots），结构示意图如下：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20230705211424.png"/></div></div><p>页面中的 slot（插槽）有几个，header 就有几位，当一个元组插入 slot 后，header 对应位置设置为 1，删除元组则反之。在 SimpleDB 中，一个 table 的 TupleDesc 确定下来后，tuple 的长度就是固定的，因此可以<strong>计算出</strong>该页面可以有多少个 slot，用于初始化 header 和数组。</p><p>计算 slot 个数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNumTuples</span><span class="params">()</span> &#123;        </span><br><span class="line"><span class="comment">// 每个页面可存储的元组数计算公式（大小单位是字节）：</span></span><br><span class="line"><span class="comment">// 页面大小 * 8 / (元组大小 * 8 + 1)，向下取整</span></span><br><span class="line"><span class="type">int</span> <span class="variable">numTuples</span> <span class="operator">=</span> BufferPool.getPageSize()*<span class="number">8</span> / (td.getSize()*<span class="number">8</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> numTuples;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>+1 是因为每个元组要附带一个标志位。</p><p>计算 header 大小（字节），多余的 0 位不考虑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHeaderSize</span><span class="params">()</span> &#123;        </span><br><span class="line"><span class="comment">// Header要存储numSlots个bit，计算所需的bytes</span></span><br><span class="line"><span class="type">int</span> <span class="variable">headerSize</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(numSlots / <span class="number">8.0</span>); <span class="comment">// 向上取整</span></span><br><span class="line"><span class="keyword">return</span> headerSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HeapPage 在初始化时接受一个 pageId 和从硬盘读入的序列化后的 byte 数组进行<strong>反序列化</strong>，相反，<code>getPageData</code> 方法将该页面序列化以存入硬盘。</p><p>需要实现 <code>isSlotUsed()</code> 方法，该方法返回某个 slot 是否插入了元组。检查 header 对应位置的标志位是否为 1 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSlotUsed</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="comment">// 注意规定了从每个byte从右到左（low to high）</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">slot</span> <span class="operator">=</span> (<span class="type">byte</span>) ((header[i/<span class="number">8</span>] &gt;&gt; (i%<span class="number">8</span>)) &amp; <span class="number">1</span>); </span><br><span class="line"><span class="keyword">return</span> slot == (<span class="type">byte</span>)<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exercise-5"><a href="#Exercise-5" class="headerlink" title="Exercise 5"></a>Exercise 5</h3><hr><ul><li><code>src/java/simpledb/storage/HeapFile.java</code> （继承自 DbFile）</li></ul><hr><p>HeapFile 对应一个表在硬盘中存储的文件，存储的单位是 HeapPage，所以主要是实现 <code>readPage()</code> 方法，它接受 pageId，需要找到对应 Page 在文件中的偏移量读取出来。一定要用文件随机读取，而不能一次性全部读到内存中，因为文件可能会很大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page <span class="title function_">readPage</span><span class="params">(PageId pid)</span> &#123;</span><br><span class="line"><span class="comment">// 找到对应Page所在的偏移量，读取后生成HeapPage</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> BufferPool.getPageSize();</span><br><span class="line"><span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> pid.getPageNumber() * pageSize;</span><br><span class="line"><span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[pageSize];</span><br><span class="line"><span class="type">Page</span> <span class="variable">heapPage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;r&quot;</span>)) &#123;</span><br><span class="line">f.seek(offset);</span><br><span class="line">f.read(data);</span><br><span class="line">heapPage = <span class="keyword">new</span> <span class="title class_">HeapPage</span>((HeapPageId)pid, data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> heapPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外的一个难点是实现 <code>iterator()</code> 方法，它的功能是遍历该表（DbFile）中的所有元组。那么就需要我们遍历 HeapFile 的所有 HeapPage，过程中使用 HeapPage 的 Iterator 来遍历元组。<br>但是上面实现的 <code>readPage()</code> 方法是给 BufferPool 调用的，因为所有的页面读取都要经过缓存。所以我们需要调用 BufferPool 的 <code>getPage()</code> 方法来获取页面，从 <code>pageNo = 0</code> 开始累加，直到到达该文件所存储的页面数量的上限，是在 <code>numPages()</code> 里计算得到的（文件大小除以 PageSize）。</p><h3 id="Exercise-6"><a href="#Exercise-6" class="headerlink" title="Exercise 6"></a>Exercise 6</h3><hr><ul><li><code>src/java/simpledb/execution/SeqScan.java</code> （实现 OpIterator）</li></ul><hr><p>Operator 是执行计划的基本单位，最简单、最底层的一个 Operator 就是 <strong>SeqScan</strong>，按照存储顺序扫描某一个表的全部元组。</p><p>这里主要添加了表的<strong>别名 alias</strong>的概念，我们需要生成一个 <code>tableAlias.filedName</code> 形式的 TupleDesc 以供后续使用。</p><p>实现 OpIterator 接口的全部方法，主要是调用 HeapFile 里的 Iterator 的相应方法。</p><blockquote><p>详细的数据库查询模型在下一个 Lab 总结。</p></blockquote><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231124161515.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><blockquote><p>Lab 仓库地址：<a href="https://github.com/zyrate/simple-db-hw-2021">zyrate/simple-db-hw-2021 (github.com)</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;6.830是麻省理工学院（简称 MIT）的一门计算机科学课程，全名为”6.830: Database Systems”。该课程是关于数据库系统的高级课程，旨在教授学生关于数据库的设计、实现和优化的知识和技能。&lt;/p&gt;
&lt;p&gt;课程附带了6个Lab以供练习，最终目的是使学生能够</summary>
      
    
    
    
    
    <category term="java" scheme="https://zyrate.github.io/tags/java/"/>
    
    <category term="mit6830" scheme="https://zyrate.github.io/tags/mit6830/"/>
    
  </entry>
  
  <entry>
    <title>OSPP 2023 开源之夏 DolphinScheduler 项目申请书</title>
    <link href="https://zyrate.github.io/2023/06/10/OSPP%202023/"/>
    <id>https://zyrate.github.io/2023/06/10/OSPP%202023/</id>
    <published>2023-06-09T16:00:00.000Z</published>
    <updated>2024-03-02T08:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>项目名称：</strong> <strong>DolphinScheduler Listener 机制</strong><br><strong>项目编号：</strong> 232290593<br><strong>项目社区导师：</strong> 孙朝和老师<br><strong>申请人：</strong> 郑云瑞<br><strong>GitHub ID：</strong> <a href="https://github.com/zyrate">@zyrate</a><br><strong>邮箱：</strong> <a href="mailto:&#112;&#x6f;&#x6c;&#x6c;&#101;&#114;&#x79;&#x38;&#x38;&#x38;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;">&#112;&#x6f;&#x6c;&#x6c;&#101;&#114;&#x79;&#x38;&#x38;&#x38;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a><br><strong>教育经历：</strong> 中国地质大学（武汉）电子信息专业硕士在读</p><hr><h1 id="1-项目描述"><a href="#1-项目描述" class="headerlink" title="1 项目描述"></a>1 项目描述</h1><h2 id="1-1-项目简述"><a href="#1-1-项目简述" class="headerlink" title="1.1 项目简述"></a>1.1 项目简述</h2><p>当工作流/任务执行时，第三方系统希望可以通过接收消息的方式（而非轮询）来实时获取工作流/任务的状态和相关信息，可以通过添加自定义 Listener 的方式来实现获取需要的信息推送到特定的目的地（消息队列、外部系统接口等）的目标。</p><h2 id="1-2-项目产出要求"><a href="#1-2-项目产出要求" class="headerlink" title="1.2 项目产出要求"></a>1.2 项目产出要求</h2><ul><li>完成 Listener 机制设计和开发、并将代码提交到开发分支上</li><li>详细的设计文档和使用文档</li><li>详尽的 UT 测试类<h1 id="2-项目总体设计"><a href="#2-项目总体设计" class="headerlink" title="2 项目总体设计"></a>2 项目总体设计</h1><h2 id="2-1-Listener-机制"><a href="#2-1-Listener-机制" class="headerlink" title="2.1 Listener 机制"></a>2.1 Listener 机制</h2><blockquote><p>Listener 机制是一种用于实现异步消息传递和事件处理的机制，广泛用于各种系统之中方便开发人员内部开发以及用户外部对接使用。它总体采用“订阅”的思想，通过 Listener 去监听事件的产生。当事件发生时，Listener 的对应方法将被触发，从而执行用户实现定义好的操作。</p></blockquote></li></ul><p>在众多系统中，Apache Spark 的 Listener 机制在分布式系统中较为成功，它允许用户自定义 Listener 来监听运行流程中各个节点的状态；提出了 <strong>ListenerBus</strong> 的概念，让所有的监听器在独立于主线程的线程中处理事件，提高了资源利用率与容错性；并且可以根据事件的类型创建不同的<strong>异步事件队列</strong>。以上种种优点都十分契合 DolphinScheduler 工作流/任务状态事件通知的场景，所以我们类比 Spark Listener 的机制来进行设计。</p><p>初步设计 DolphinScheduler Listener 机制示意图如下：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/Listener.jpg" alt="Listener.jpg|700"/></div><div class="image-meta"><span class="image-caption center">Listener.jpg|700</span></div></div><p>核心类有三个：</p><ul><li>一个 <code>EventListener</code> 对象拥有所有事件触发后将被调用的方法（onXXX），用户只需继承这个类在重写方法里进行消息通知；</li><li>一个 <code>ListenerBus</code> 对象维护一个 listener Map（采用 Map 是为了通过 ID 移除 listener 较为方便）和一个 event 队列，在开启监听后不断地将队列里相应的事件转发给对应的 listener；</li><li>一个唯一的 <code>ListenerBusManager</code> 对象负责最外层的调用（触发事件、listener 注册与卸载）。</li></ul><p>借鉴 Spark Listener 的设计思想，我们可以在 <code>ListenerBusManager</code> 中管理多个 <code>ListenerBus</code>，比如负责对外向用户提供注册功能的 Bus 和对内向开发人员提供注册功能的 Bus，这样如果某一个异步队列崩了的话，不会影响另外的队列，能够增强机制的健壮性。</p><h2 id="2-2-热加载功能"><a href="#2-2-热加载功能" class="headerlink" title="2.2 热加载功能"></a>2.2 热加载功能</h2><blockquote><p>实现 Listener 插件热加载功能可以在系统运行的时候动态地<strong>注册/卸载</strong>自定义 Listener，方便用户随时开始和暂停监听工作流与任务的状态。</p></blockquote><p>和导师讨论后，拟采用类似 DolphinScheduler 现有的 UDF 管理模块的形式设计 Listener 管理模块，以实现用户自定义 Listener 的热加载：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20230523213609.png" alt="image.png|700"/></div><div class="image-meta"><span class="image-caption center">image.png|700</span></div></div><p>Listener 管理同样拥有两个子模块：<strong>资源管理</strong>和<strong>监听管理</strong>。</p><ol><li>用户首先将自定义 Listener 的<strong>jar 包</strong>在 <code>资源管理</code> 上传，并填写该 jar 包的相关信息，如：文件名称、描述等；</li><li>用户在 <code>监听管理</code> 点击“创建 Listener”，并填写该 Listener 的相关信息，如：Listener 名称、包名类名、Listener jar 包资源、监听说明等；</li><li>创建完成后，用户选择某个 Listener 点击 <code>注册</code>，系统将开始对此 Listener 开展<strong>分布式加载</strong>（因为要保证该 Listener 被添加到每个 master 节点的 ListenerBus 中），加载完成后即开始监听；</li><li>用户可以随时点击某个 Listener 的 <code>卸载</code> 操作，系统对此 Listener 进行<strong>分布式卸载</strong>（即从所有节点的 ListenerBus 中删除该 Listener），即停止监听。</li></ol><h1 id="3-项目详细设计"><a href="#3-项目详细设计" class="headerlink" title="3 项目详细设计"></a>3 项目详细设计</h1><h2 id="3-1-数据表设计"><a href="#3-1-数据表设计" class="headerlink" title="3.1 数据表设计"></a>3.1 数据表设计</h2><p>新增 Listener 数据表：<code>t_ds_listeners</code></p><table><thead><tr><th>列名</th><th>类型</th><th>描述</th><th>主键</th><th>外键</th></tr></thead><tbody><tr><td>id</td><td>int</td><td>listener 唯一 ID</td><td>√</td><td></td></tr><tr><td>user_id</td><td>int</td><td>创建该 listener 的用户 ID</td><td></td><td>√</td></tr><tr><td>listener_name</td><td>varchar</td><td>listener 名称</td><td></td><td></td></tr><tr><td>class_name</td><td>varchar</td><td>包名类名</td><td></td><td></td></tr><tr><td>description</td><td>varchar</td><td>listener 功能描述</td><td></td><td></td></tr><tr><td>resource_id</td><td>int</td><td>jar 包资源 ID</td><td></td><td>√</td></tr><tr><td>resource_name</td><td>varchar</td><td>jar 包资源名称</td><td></td><td></td></tr><tr><td>state</td><td>int</td><td>listener 当前状态 <br>（未注册、注册中、已注册、卸载中）</td><td></td><td></td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>更新时间</td><td></td><td></td></tr></tbody></table><h2 id="3-2-API-设计"><a href="#3-2-API-设计" class="headerlink" title="3.2 API 设计"></a>3.2 API 设计</h2><p><code>POST</code> ： <code> /dolphinscheduler/resources/listener</code><br>创建 Listener<br><code>PUT</code> ： <code> /dolphinscheduler/resources/listener/&#123;id&#125;</code><br>更新 Listener<br><code>GET</code> ： <code>/dolphinscheduler/resources/listener</code><br>查询 Listener 列表（分页）<br><code>GET</code> ： <code>/dolphinscheduler/resources/&#123;id&#125;/listener</code><br>查询某个 Listener 的详细信息<br><code>DELETE</code> ： <code>/dolphinscheduler/resources/listener/&#123;id&#125;</code><br>删除某个 Listener<br><code>GET</code> ：<code>/dolphinscheduler/resources/listener/verify-name</code><br>查询某个 Listener 名称是否可用<br><code>PUT</code> ： <code> /dolphinscheduler/resources/listener/&#123;id&#125;/register</code><br>将某个 Listener 进行注册<br><code>PUT</code> ： <code> /dolphinscheduler/resources/listener/&#123;id&#125;/unregister</code><br>将某个 Listener 卸载</p><h2 id="3-3-Event-设计"><a href="#3-3-Event-设计" class="headerlink" title="3.3 Event 设计"></a>3.3 Event 设计</h2><p>目前设计了如下的事件类（后续可能会添加）：</p><table><thead><tr><th>事件类</th><th>触发时刻（加入 ListenerBus）</th><th>触发于代码位置 (org/apache/dolphinscheduler/server/master/)</th></tr></thead><tbody><tr><td>EventWorkflowSubmitted</td><td>master 处理 START_WORKFLOW 事件时，提交工作流实例成功后</td><td>event/WorkflowStartEventHandler. java: 65</td></tr><tr><td>EventWorkflowBlocked</td><td>master 在执行 handleStateEvent 时, 执行 processBlock () 后</td><td>event/WorkflowBlockStateEventHandler. java: 50</td></tr><tr><td>EventWorkflowStopped</td><td>master 在执行 handleStateEvent 时，isStop ()为 true</td><td>event/WorkflowStateEventHandler. java: 50</td></tr><tr><td>EventWorkflowFinished</td><td>master 在执行 handleStateEvent 时，isFinished ()为 true</td><td>event/WorkflowStateEventHandler. java: 63</td></tr><tr><td>EventTaskSubmitted</td><td>master 在提交下一个 node 的时候，创建 task 实例并加入列表</td><td>runner/WorkflowExecuteRunnable. java: 1352</td></tr><tr><td>EventTaskPaused</td><td>master 接收到任务暂停的 rpc 命令</td><td>processor/MasterTaskPauseProcessor. java: 58</td></tr><tr><td>EventTaskFinished</td><td>master 接收到 worker 传来的 task 执行结果后</td><td>processor/TaskExecuteResultProcessor. java: 63</td></tr><tr><td>EventTaskKilled</td><td>master 接收到 kill 命令，执行 cancel 后</td><td>processor/MasterTaskKillProcessor. java: 69</td></tr></tbody></table><ul><li>所有事件类继承自父类 <code>ListenerEvent</code>，重写 <code>getEventType</code> 方法。</li><li>每个事件类拥有用户所关心的该事件的相关信息和上下文信息。</li></ul><h2 id="3-4-ListenerBus-设计"><a href="#3-4-ListenerBus-设计" class="headerlink" title="3.4 ListenerBus 设计"></a>3.4 ListenerBus 设计</h2><p>ListenerBus 是 Listener 机制中最核心的概念，它负责异步事件队列的维护和 EventListener 实例的维护。</p><ul><li>在 start ()后开始接受事件，并开始分发</li><li>在 stop ()时，进行优雅地停止线程</li></ul><p>简要代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerBus</span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;Integer, EventListener&gt; listeners = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>();  </span><br><span class="line">    <span class="keyword">private</span> LinkedBlockingQueue&lt;ListenerEvent&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>();  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isStarted</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">    <span class="keyword">private</span> Thread dispatchThread;  <span class="comment">// 事件分发线程</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="type">ListenerEvent</span> <span class="variable">nextEvent</span> <span class="operator">=</span> queue.take();  </span><br><span class="line">        <span class="comment">// 消费事件，直到收到停止命令</span></span><br><span class="line">        <span class="keyword">while</span>(!nextEvent.getEventType().equals(<span class="string">&quot;STOP_LISTENERBUS&quot;</span>))&#123;  </span><br><span class="line">            <span class="keyword">for</span>(EventListener listener : listeners.values())&#123;  </span><br><span class="line">                handleEvent(listener, nextEvent);  </span><br><span class="line">            &#125;  </span><br><span class="line">            nextEvent = queue.take();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(!isStarted)&#123;  </span><br><span class="line">            dispatchThread = <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;  </span><br><span class="line">                <span class="meta">@Override</span>  </span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;  </span><br><span class="line">                    dispatch();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;;  </span><br><span class="line">            dispatchThread.start();  </span><br><span class="line">            isStarted = <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@SneakyThrows</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(isStarted) &#123;  </span><br><span class="line">            postEvent(<span class="keyword">new</span> <span class="title class_">StopListenerBus</span>()); <span class="comment">// 将停止命令推入队列</span></span><br><span class="line">            dispatchThread.join();  <span class="comment">// 会等待将当前队列中剩余事件分发完成</span></span><br><span class="line">            isStarted = <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addListener</span><span class="params">(EventListener listener)</span>&#123;  </span><br><span class="line">        listeners.put(listener.getListenerId(), listener);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@SneakyThrows</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postEvent</span><span class="params">(ListenerEvent event)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(isStarted) &#123;  </span><br><span class="line">            queue.put(event);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="comment">// 将事件分发给对应的Listener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleEvent</span><span class="params">(EventListener listener, ListenerEvent event)</span>&#123;  </span><br><span class="line">      <span class="keyword">switch</span>(event.getEventType())&#123;  </span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;WORKFLOW_SUBMITTED&quot;</span>: <span class="comment">// 类型可以是枚举</span></span><br><span class="line">      listener.onWorkflowSubmitted((EventWorkflowSubmitted) event); <span class="keyword">break</span>;  </span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;TASK_FINISHED&quot;</span>: </span><br><span class="line">      listener.onTaskFinished((EventTaskFinished) event); <span class="keyword">break</span>;  </span><br><span class="line">      <span class="comment">// 其他 event types...  </span></span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-分布式加载设计"><a href="#3-5-分布式加载设计" class="headerlink" title="3.5 分布式加载设计"></a>3.5 分布式加载设计</h2><ul><li>分布式加载和卸载需要考虑到多个 master 节点的<strong>一致性</strong>，即要保证将用户自定义 Listener 添加到所有 master 节点的 ListenerBus 中去，使得每个 master 负责的工作流都能够被监听到。如果在注册过程中，某个节点在 jar 包加载和实例获取的过程中出现了错误，无法继续添加，则所有已添加的节点应当将该 Listener 移除，并返回给用户错误信息。</li><li>另外，会出现多个用户同时请求注册 Listener 或一个用户同时注册请求多个 Listener 的情况。这就要求每次请求的分布式加载<strong>互不干扰</strong>，所以设计了临时处理对象 <code>RegisterHandler</code> 和 <code>UnregisterHandler</code> 来保存每个加载过程的上下文信息（如本次注册已成功的 master 个数等）。</li></ul><p>下面描述注册和卸载流程，前置操作是：<strong>用户已在资源中心将 jar 包上传，并创建 Listener 记录</strong>。<br><strong>注册流程：</strong></p><ol><li>用户点击注册某 listener，为了并发时不发生冲突，API（service 层）每次请求新建一个 <strong>register handler</strong> 对象临时保存到 map &lt;listenerId, handler&gt; 中，拥有本次分布式加载所需要存储的信息和操作。 handler 首先获取 master 列表，通过 rpc 调用每个 master（传 listener id）进行 listener 加载和注册。</li><li>创建 handler 进行处理过后，service 将数据库中该 listener 的状态改为“注册中”，然后将本次请求线程阻塞，等待 master 回应；</li><li>master 收到命令后首先获取对应的 jar 包文件和包名类名，进行 class 加载和 listener 对象添加，添加成功后通过 rpc 返回添加结果；</li><li>handler 若收到了所有 master 的成功返回值，则证明分布式加载成功，唤醒请求线程，service 向数据库写入该 listener 状态为“已注册”，并返回成功结果到前端。</li><li>handler 若收到某个 master 抛出的异常，为了保持一致性，通过 rpc 通知所有 master 取消已添加的 listener，分布式加载中断。数据库恢复 listener 状态为“未注册”，并返回错误结果到前端。</li><li>请求结束后 service 从 map 中删除对应的 handler。</li></ol><p><strong>卸载流程：</strong></p><ol><li>用户点击卸载某 listener，service 层每次请求新建一个 <strong>unregister handler</strong>；</li><li><strong>与注册流程类似</strong>，handler 首先获取 master 列表，通过 rpc 调用每个 master 卸载该 listener；</li><li>service 将数据库中该 listener 状态改为“卸载中”，然后阻塞请求线程；</li><li>handler 收到所有 master 的回应后，唤醒请求线程，状态改为“未注册”，并返回用户结果；</li><li>请求结束后 service 从 map 中删除对应的 handler。</li></ol><p><strong>Master 端jar包热加载</strong>：<br>Listener 的热加载采用 URLClassLoader 实现，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 jar 包路径和全类名获取用户自定义 Listener 对象</span></span><br><span class="line"><span class="keyword">public</span> EventListener <span class="title function_">loadListenerFromJar</span> <span class="params">(String jarPath, String className)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建URL，指向jar包的路径</span></span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(jarPath);</span><br><span class="line"><span class="comment">// 创建一个URLClassLoader</span></span><br><span class="line"><span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line"><span class="comment">// 加载类</span></span><br><span class="line">Class&lt;?&gt; clazz = loader.loadClass(className);</span><br><span class="line"><span class="comment">// 返回类的对象实例</span></span><br><span class="line"><span class="keyword">return</span> (EventListener) clazz.getDeclaredConstructor().newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加载成功后，首先将 EventListener 对象设置一个唯一 ID</li><li>然后添加到 ListenerBus 的 Listener Map 中。</li></ul><p><strong>下图是用户成功注册 Listener 的全过程顺序图：</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20230524224808.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><h1 id="4-时间规划"><a href="#4-时间规划" class="headerlink" title="4 时间规划"></a>4 时间规划</h1><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>时间</strong></td><td><strong>计划工作</strong></td><td><strong>详细说明</strong></td></tr><tr><td>2023/07/01 - 2023/07/10</td><td>Listener 机制核心功能</td><td>包括 ListenerBus、ListenerBusManager 等有关事件事件分发和 Listener 管理的内容</td></tr><tr><td>2023/07/11 - 2023/07/20</td><td>Event 类实现</td><td>将各类 ListenerEvent 进行实现，并在系统原有代码的适当位置生成</td></tr><tr><td>2023/07/21 - 2023/07/31</td><td>API 接口实现</td><td>资源中心有关 listener 管理的各类接口、与数据库的交互</td></tr><tr><td>2023/08/01 - 2023/08/20</td><td>热加载功能实现</td><td>分布式加载与卸载逻辑</td></tr><tr><td>2023/08/21 - 2023/08/31</td><td>前端界面实现</td><td>资源中心添加 Listener 模块界面</td></tr><tr><td>2023/09/01 - 2023/09/15</td><td>单元测试和集成测试</td><td>完成测试工作并修复 bug</td></tr><tr><td>2023/09/16 - 2023/09/30</td><td>文档编写</td><td>完成设计文档和使用文档</td></tr></tbody></table><h1 id="5-申请心得"><a href="#5-申请心得" class="headerlink" title="5 申请心得"></a>5 申请心得</h1><p>在学长的推荐下，我接触到了OSPP开源之夏和 DolphinScheduler 社区。这近一个月的准备时间，我从完全不了解 DS，到慢慢摸清一些代码模块的逻辑，已经收获颇多。我体会到了 DS 开发者们对代码严谨性、可扩展性和健壮性的要求，学习到了大型项目代码的组织方式。感谢孙朝和导师在我调研项目方案时给我的指导，让我对 Listener 机制和分布式开发有了更深刻的理解。如果申请成功，这将是我第一次深入参与开源项目，希望能够借助这个机会学习新的知识、积累新的经验，也真诚希望能够为 DolphinScheduler 社区作出自己的贡献！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;项目名称：&lt;/strong&gt; &lt;strong&gt;DolphinScheduler Listener 机制&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;项目编号：&lt;/strong&gt; 232290593&lt;br&gt;&lt;strong&gt;项目社区导师：&lt;/strong&gt; 孙朝和老</summary>
      
    
    
    
    
    <category term="分布式" scheme="https://zyrate.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="java" scheme="https://zyrate.github.io/tags/java/"/>
    
    <category term="学习" scheme="https://zyrate.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RDD分区与并行计算</title>
    <link href="https://zyrate.github.io/2023/03/28/RDD%E5%88%86%E5%8C%BA%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    <id>https://zyrate.github.io/2023/03/28/RDD%E5%88%86%E5%8C%BA%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/</id>
    <published>2023-03-27T16:00:00.000Z</published>
    <updated>2023-12-09T12:38:40.790Z</updated>
    
    <content type="html"><![CDATA[<p>分区应该是 Spark 中最基础、最核心的概念了，首先搞要清楚为什么要分区。不分区，分布式并行计算就无从谈起。其实哪怕不是分布式，就是如今在一台电脑上 8 个核心也都是标配了，如果把所有的计算任务全都交给一个核心处理便是对硬件资源的极度浪费，效率也十分低下。而要想不浪费，就要采用 <strong>并行计算</strong> ，让每一个核心处理一部分任务。而不同的计算需要独立的上下文环境，这就引入了 <strong>分区</strong> 的概念。每个分区拥有自己的数据和计算函数，当所有的分区计算完毕后，再将它们的结果合并输出。<br>Spark RDD 在逻辑上实现了以上的分区概念。</p><p>第一，在 Spark 中几乎所有功能的数据操作都是以 RDD 为单位的（当然还有累加器和广播变量，但是它们都有固定的应用场景），所以它可以看做在 Spark 中的一个“万能数据集”，不论什么数据都能往里面放，不论在哪个场景都可以用，首先明确这一点（其实是为了打破初学者对它的陌生感）。</p><p>第二，所谓分区（Partition），简单来讲就是 RDD 在内部将数据分成的不同 <strong>切片</strong> ，从不同的数据源读取数据会按照不同的方式进行切片，因此不同的数据源往往会对应不同类型的 RDD 实现类，而每个 RDD 实现都有一个独立的 Partition 实现类来处理数据。在 Partition 实现类中，会用不同的方法存储实实在在的数据。不过这里要搞清楚，RDD 是惰性计算的，只有在执行行动算子后，数据才会在各种不同的 RDD 分区中 <em>计算、接收、传递</em> ，并不做停留。因此我的理解是，每个 RDD 分区调用它所 <em>依赖的上一级</em>  RDD 的对应的分区计算方法，获得新的分区数据，这本质是一个 <strong>链式调用</strong> 。这样行动算子会触发数据从读取到一步步计算的链式调用，最终获得计算结果，可以看做分区是固定的，数据一直在变化。</p><p>由上所知，在没有发生 Shuffle 的时候，分区数量不变，不同分区之间的计算是 <strong>平行的</strong> ，互不干扰，谁快一点谁慢一点都无所谓，重点是它们在同时计算，这就是并行计算。而在遇到了像 groupByKey、orderBy 这样的需要打乱原有数据的方法，分区之间不可能再相安无事了，它们需要相互交换数据，即进行 Shuffle。Shuffle 操作需要数据 <strong>落盘</strong> 因此十分低效。而当发生 <strong>数据倾斜</strong> 时，Shuffle 又能够有效地保证计算的 <strong>负载均衡</strong> 。</p><p>第三，RDD 在逻辑上实现了分区，而在集群上实际的计算如何实现的呢？这就要提到 RDD 的任务执行单位：Job、Stage、Task。简单来说，Job 对应一个行动算子，它内部通过 RDD <strong>谱系图</strong> 划分 Stage，通常是遇到一个 Shuffle 操作会生成一个新的 Stage。每个 Stage 根据 RDD 的分区数目生成 Task，一个 Task 对应一个分区。注意 Task 运行的结果是目标 RDD 的一个分区，而不是相反。前两个仍然是逻辑上的，真正可以运行的是 Task。Task 是在 Executor 上运行的，每一个物理节点可以起一个或多个 Executor。</p><p>所以最终的运行模型是：Driver 端（就是写 Spark 程序的地方）生成 SparkContext 作为和 Spark 框架连接的入口，它会进行 DAG 图构建、Stage 划分、Task 生成等一系列操作，这些操作是在一个节点完成的。而封装好的 Task 会发送给 Yarn 等调度器进行调度，可能会根据 “计算向数据移动” 等准则分发给不同的节点的 Executor，从而进行计算。</p><p><em><strong>知识点：</strong></em></p><ol><li>RDD 计算时（行动算子）在 <strong>一个分区</strong> 内是一个一个数据根据谱系图执行逻辑，即前面一个数据的逻辑全部执行完毕后才轮到下一个数据。分区内部的数据执行是 <strong>有序的</strong> ，不同分区之间的数据执行是 <strong>无序的</strong> 。</li><li>MapPartitions 可以以分区为单位进行数据转换操作，但是会将整个分区的数据加载到内存中进行引用，容易出现内存溢出。</li><li><strong>窄依赖：</strong> 如果新生成的 child RDD 中每个分区都依赖 parent RDD 中的一部分分区，那么这个分区依赖关系被称为 NarrowDependency。</li><li><strong>宽依赖：</strong> 表示新生成的 child RDD 中的分区依赖 parent RDD 中的每个分区的一部分。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分区应该是 Spark 中最基础、最核心的概念了，首先搞要清楚为什么要分区。不分区，分布式并行计算就无从谈起。其实哪怕不是分布式，就是如今在一台电脑上 8 个核心也都是标配了，如果把所有的计算任务全都交给一个核心处理便是对硬件资源的极度浪费，效率也十分低下。而要想不浪费，就</summary>
      
    
    
    
    
    <category term="分布式" scheme="https://zyrate.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据可视化</title>
    <link href="https://zyrate.github.io/2023/03/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://zyrate.github.io/2023/03/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2023-03-09T16:00:00.000Z</published>
    <updated>2023-12-09T12:38:33.785Z</updated>
    
    <content type="html"><![CDATA[<p>生活中数据可视化无处不在，以前都会有意无意地进行过可视化的工作，但是通过专业化的分析和方法设计出的结果会更能达到可视化的目的，设计过程也会更加得心应手。另外数据可视化有时候并不只是数据的展现，还包含着数据的挖掘。比如看到一批数据，从不同的角度和考量进行可视化可能会从中挖掘出不同的信息。</p><blockquote><p>本文是我学习北京大学袁晓如老师《数据可视化》课程的学习笔记<br>链接：<a href="http://www.chinesemooc.org/mooc/5033">数据可视化 - 华文慕课 - 中文MOOC平台 (chinesemooc.org)</a></p></blockquote><h2 id="第-1-章概念"><a href="#第-1-章概念" class="headerlink" title="第 1 章概念"></a>第 1 章概念</h2><ol><li><p><strong>数据可视化</strong>就是把一些复杂的数据转化成人们能够直接看到并理解的图形或图像，有利于我们更快地识别特征，发现知识。基于计算机的可视化系统通过对数据的视觉表达形式来帮助人们更有效地完成特定任务。</p></li><li><p>不同的领域、不同的任务、不同的受众的可视化构型是不同的，要做合理、有效的选择。</p></li><li><p>要考虑计算限制、人类限制、显示限制</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一章讲述了可视化的概念、构型和案例，其中构型的选择非常重要，需要考虑不同的领域、任务、受众和限制因素，要在多对矛盾中进行权衡。</p><h2 id="第-2-章数据类型"><a href="#第-2-章数据类型" class="headerlink" title="第 2 章数据类型"></a>第 2 章数据类型</h2><ol><li>数据集类型<ol><li>结构化数据：已知数据类型、语义<ol><li>表格（Tables）</li><li>网络（Networks）</li><li>场（Fields）</li><li>空间/几何（Spatial/Geometry）</li><li>多维表（Multidimensional Table）</li><li>树形（Trees）</li></ol></li><li>非结构化数据：没有预定的数据模型，如文字、视频、图像。需要转化为结构化数据（NPL、文本挖掘）</li></ol></li><li>数据类型：数据项、链接、属性、位置、网格</li><li>属性类型：<strong>定类型、定序型、定量型</strong>。不同的属性需要用不同的通道表示。看到一个可视化就分析有什么属性，看到属性就要想是什么类型。 </li><li>表达力和有效性：服从<strong>一致性</strong>和<strong>重要性排序</strong>原则，一致性是指，视觉变量和数据属性应该匹配。</li><li>2.7 的设计案例有启发意义。</li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>这一章主要介绍了各类数据集合数据的类型，目的是强调在可视化过程中，对属性类型的分析是十分重要的，不同类型的属性需要考虑不同的可视化方法，这决定着最后的呈现效果（千差万别）。要培养分析数据属性的思维。</p><h2 id="第-3-章数据编码（具体步骤）"><a href="#第-3-章数据编码（具体步骤）" class="headerlink" title="第 3 章数据编码（具体步骤）"></a>第 3 章数据编码（具体步骤）</h2><ol><li>符号和通道<ul><li>符号标记（Marks）：如用<strong>圆点</strong>和<strong>直线</strong>代表数据项和连接<ul><li>点、线、面，（包含、连接、嵌套）</li></ul></li><li>视觉通道（Channels）：符号标记的表现形式，如圆点的<strong>颜色</strong><ul><li>分为以下两个类型，顺序代表<strong>有效性从高到低</strong></li><li>&lt;定类型&gt; ：空间区域、颜色、运动模式、形状</li><li>&lt;定序定量型&gt; ：位置、长度、倾斜度、面积、深度、亮度/饱和度、弧度、体积</li></ul></li></ul></li><li>考虑视觉通道的五个属性：选择性、关联性、量化性、可序性、容量</li><li>史蒂文心理物理强度定律：强度由高到低：饱和度、长度、面积、深度、亮度，感官测试：<a href="https://woodgears.ca/eyeball/">The eyeballing game (woodgears.ca)</a></li><li>不同类别应该采取的通道排序：<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/8SkCzbviuNQWj35.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>直观地感受了各类视觉通道的差异和优缺点，在可视化的时候首先要选择正确的符号和通道，让人们有对数据更加准确的感受。</p><h2 id="第-4-章可视化任务与分析"><a href="#第-4-章可视化任务与分析" class="headerlink" title="第 4 章可视化任务与分析"></a>第 4 章可视化任务与分析</h2><ol><li>分析三要素：<ol><li>对象：判断第二章所述的数据类型和属性类型</li><li>手段：将第三章所述进行实践</li><li>目的：考虑用户需求（什么样的用户）</li></ol></li><li>可视化任务抽象。不同的可视化有不同的任务，这里的任务（功能）是从用户的角度出发，<strong>用户为什么需要可视化</strong>，该可视化想要用户得到什么信息。要识别任务-数据组合，寻找可能的解决方案。即分析三要素中的<strong>目的</strong>（行动和对象），行动有以下三个层次（由高到低）：分析、搜索、查询。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/Dd7CyGo5XbQUEAk.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/AoXZgrEcu6ORUeT.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol><ol start="3"><li><p>分析三要素中的<strong>对象</strong>，对于不同的对象关心不同的特点：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/tH94MIVyqC58KGx.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li><p>分析三要素中的<strong>手段</strong>，考虑可视化构型：<em>视觉编码</em>、<em>交互</em>。（后面讲）</p></li><li><p>可视化设计验证四层模型：<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/lU1xgsmKn2AjZTb.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div> 所谓问题导向就是某个领域的某个问题需要可视化，这时四层模型<strong>从外到内</strong>进行工作。所谓技术导向就是某个新型的可视化技术出现了，<strong>从内到外</strong>去寻找可以可视化那些领域问题。</p></li><li><p>详细学习 4.5 可视化案例。</p></li></ol><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>讲述了可视化过程中需要完成哪些分析工作，有哪些要素。从一个顶层抽象的角度阐述了可视化的整个流程。</p><h2 id="第-5-章交互"><a href="#第-5-章交互" class="headerlink" title="第 5 章交互"></a>第 5 章交互</h2><ol><li>视图操纵的方法<ol><li>视图随时间变化<ol><li>重新编码，对于对象</li><li>调整参数，不同的小控件（滑块、按钮等）</li><li>调整布局、顺序，What、How、Why</li><li>重排，对复杂的表格不同的维度（Table Lens）/ 平行坐标</li><li>调整对齐方式，堆叠柱形图</li><li>过渡动画，在两个状态间做插值平滑</li></ol></li><li>视图分面（Facet）<ol><li>并置视图（重要）：把两个图放在一起关联 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/zoqn3aKpRDtSIZk.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div>，<strong>动态查询</strong>是一个经典的例子，快速、增量式和可逆的交互操作。</li><li>分隔视图 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/swWjOxH1cbZoyQD.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>叠加视图 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/etTOVPnp3IqR41W.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol></li><li>数据约简（Reduce）<ol><li>过滤：交叉过滤（一个维度变化，另外跟着变）</li><li>聚合：空间聚合</li><li>不完全互斥<br>可视化系统：Jigsaw<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3>讲述了可视化中最有趣但却做复杂的交互操作，介绍了视图操纵的几种方法，通过例子体会到不同交互方法的特点和功能，恰当的交互能够给用户带来良好的体验的同时，也能够让用户有更多的发现。</li></ol></li></ol></li></ol><h2 id="第-6-章光与颜色"><a href="#第-6-章光与颜色" class="headerlink" title="第 6 章光与颜色"></a>第 6 章光与颜色</h2><ol><li>颜色表现不止于单一的颜色，还要考虑背景色，和周围的颜色（上下文）。</li><li>环境颜色会增加其自身的<strong>相反颜色</strong>以获得更强的对比<ul><li>深色增加浅色</li><li>红色增加绿色</li><li>蓝色增加黄色</li></ul></li><li>感知差异依赖于背景</li><li>颜色模型：《CIE 标准观测》<ol><li>色度图</li><li>RGB 色度（三角形）</li><li>投影色域</li><li>对立色彩</li></ol></li><li>颜色设计准则（经验）<ol><li>需要考虑上下文，这里的上下文是指除颜色设计之外的各种对象与概念。（比如用户和预算等）</li><li>并不是五彩缤纷就是好的，好的设计<strong>让信息更吸引人</strong>。</li><li>颜色包括 &lt;色相、饱和度、亮度&gt; 三个属性，要精确区分。<ul><li>控制明度，确保易读性</li><li>控制色相种类，定义颜色分组，避免太多颜色竞争而混乱，控制“弹出效应”</li><li>使用中和背景，最小化 “<strong>同时对比效应</strong>”</li></ul></li><li>在不同的可视化场景，根据颜色标注的目标不同，颜色的选择也不同。比如飞机上的仪表盘属于需要快速反应的场景，颜色不能太多。</li><li><a href="https://colorbrewer2.org/#type=sequential&scheme=Blues&n=3">ColorBrewer: Color Advice for Maps (colorbrewer2.org)</a> 网站提供不同的配色方案。</li></ol></li></ol><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>在使用颜色的时候需要考虑很多因素，比如对比、色盲等。在设计的时候需要遵循设计准则，让颜色起到增进理解而不是相反的作用。首先要理解颜色的各种属性，精确区分，谨慎选择。</p><h2 id="第-7-8-章表格"><a href="#第-7-8-章表格" class="headerlink" title="第 7, 8 章表格"></a>第 7, 8 章表格</h2><p>表格分为平面表格（唯一索引）和多维表格（基于多个键的索引）。</p><h3 id="平面数据"><a href="#平面数据" class="headerlink" title="平面数据"></a>平面数据</h3><ol><li>表格数据的比较<ol><li>条形图（可以有不同方向）：要注意<strong>基准问题</strong>（起始值是否从 0 出发）；要注意是用<strong>线性变换</strong>还是<strong>对数变换</strong>，这里的变换是指纵轴单位长度的变化。</li><li>折线图：可用【光滑】【连接】和【散点】。要注意如果两个数据点之间连接起来，代表这个属性是可以<strong>插值</strong>的（比如年龄），如果属性不能插值（比如性别<strong>分类</strong>）则不能随意连接起来。</li><li>散点图：常常用于揭示两个维度之间的<strong>相关性</strong>。如果有第三维的话，可以将其映射到其他的视觉属性，比如颜色、大小；要注意不要<strong>过度绘制</strong>，要善用<strong>透明度</strong>和<strong>趋势线</strong>。</li><li>饼图/圈图：用于表示数据的<strong>组成</strong>。强调精确数值时用条形图，强调比例时用饼图。 </li><li>堆叠条形图：将圈图拉直放到坐标系中，比饼图更加直观。</li><li>堆叠面积图：将离散的堆叠条形图连接起来。</li><li>表示数据的<strong>分布</strong>的图：<ul><li>【直方图】与柱状图的区别是没有间隙，横轴是某个属性的<strong>区间划分</strong>；经验法则：根据数据量的平方根来确定划分区间的数目。</li><li>【密度图】</li><li>【箱型图】 </li><li>【小提琴图】 </li><li>【热力图】 </li></ul></li></ol></li><li>表格可视化经典方法：Table Lens（表格透镜）</li></ol><h3 id="高维数据"><a href="#高维数据" class="headerlink" title="高维数据"></a>高维数据</h3><ol><li>散点图：点的位置表示两个属性，点的大小、颜色表示更多的属性，但往往表示不了高维（大于三个维度）。</li><li>散点矩阵图：每行/列是一个维度，每个单元格绘制两个维度的散点图。下图是 4 个维度两两之间的关系：<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/Uayg1Z4DHKBhMiY.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>SPLOM 聚合-热力图：类似于散点图，减少计算量。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/PxvN5W639bLTRXp.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>相关热力图</li><li>Rolling the Dice：两个散点图无缝转换</li><li>平行坐标：将 x,y,z 等坐标轴平行放置，可以引入更多的维度，<strong>一条连线代表一个数据项</strong>，适用于异构数据。当数据量较大的时候，采用 &lt;增加透明度、捆绑、采样&gt; 来解决杂乱问题。 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/Wr9ozJxniel4cHS.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>降维：保留尽可能多的变化，绘制低维空间，主成分分析。<ol><li>多维缩放：让两两之间在平面的<strong>距离</strong>尽量正比于在高维空间的距离。常用于<strong>文本分析</strong>。</li><li>地形图表示。</li></ol></li><li>维度嵌套/堆叠： 维度有限，工程数据分析常用</li><li>多方法耦合：平行坐标+散点图</li><li>其他方法：太多了，看 8.6 节</li></ol><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p>详细讲述了各种图对于表格数据可视化的作用，适当进行选取。</p><h2 id="第-9-10-章网络结构"><a href="#第-9-10-章网络结构" class="headerlink" title="第 9, 10 章网络结构"></a>第 9, 10 章网络结构</h2><ol><li>层次结构（树）：用于有组织结构、分级分类的数据，有谱系树、进化树、搜索树、决策树。<ol><li>显式树可视化<ol><li>Reingold-Tilford 布局：类似<strong>思维导图</strong></li><li>DOI 树（突出焦点）：树节点过多，只强调部分节点（增大），或用三角形代表不重要的子树。</li><li>双曲线树（突出焦点）：面向<strong>大规模</strong>的层次结构数据，全体数据可见，焦点放大。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/JsTuhIr69aKVSFj.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol></li><li>隐式树可视化：看不见树的结构，但是树的内部关系。较重要的是<strong>包含式非显式布局</strong>。其中最重要的是【树图】（Treemap）：切分空间，节点为长方形，节点面积代表相应属性。 </li><li>树比较可视化：用柱状图进行树之间的比较。</li></ol></li><li>图的可视化<ol><li>两种主要类型的任务：【基于属性】、【基于拓扑】。</li><li>显式图形式：<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/pmPNEA2v9Qs7wuR.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div>，布局标准如下，减少用户阅读的干扰（不用全部满足）：<ul><li>最小化<strong>边交叉</strong></li><li>最小化相邻接点的<strong>距离</strong></li><li>最小化<strong>绘图区域</strong></li><li>边<strong>长度</strong>统一</li><li>最小化边<strong>弯曲</strong></li><li>最大化不同边之间的<strong>角距离</strong>（过多的锐角不容易分辨）</li><li>宽高比约为 1（不太长也不太宽）</li><li>对称性（类似的图结构看起来相似）</li></ul></li><li>矩阵形式：即图的<strong>邻接矩阵</strong>。非常适合邻域相关的任务，不适合路径相关的任务；节点的顺序很重要，<strong>排序</strong>后可能会发现规律。</li><li>混合显示与矩阵形式：NodeTrix。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/7g5MVax8Nln3iKZ.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li><strong>力导向布局算法</strong>：边=弹簧，点=互斥磁铁，算法开销较大 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/3NKfibdLD14YlWv.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol></li></ol><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p>不同可视化方法之间需要进行取舍，为了相应的目的，可能会降低对另外一部分性能的支持。不同的可视化方法可以混用，可能达到更好的效果。</p><h2 id="第-10-章时间序列"><a href="#第-10-章时间序列" class="headerlink" title="第 10 章时间序列"></a>第 10 章时间序列</h2><p>时间序列数据就是其中一个变量是时间的数据，也可以说是高维中一个维度是时间的数据。<a href="http://vcg.informatik.uni-rostock.de/~ct/timeviz/timeviz.html">vcg.informatik.uni-rostock.de</a><br>可视化方法有：</p><ol><li>缩略组图（Small Multiples）：在单个页面上显示的呈<strong>缩略图</strong>大小的图形集，表示单个现象的不同方面（不同时间）。也适用于多变量（多维）显示。比如新冠晴雨表。</li><li>形态替换：将时间视为隐藏的维度，为每个时间帧生成一个可视化，然后播放<strong>动画</strong>，用户可以进行追踪（可以加上轨迹）。<a href="https://www.gapminder.org/tools/">Gapminder Tools</a> 。但是该方法有一个问题是<strong>变化盲视</strong>，即人们没有注意到场景中可见元素的变化，需要根据具体情况解决（如增加视觉编码）。</li><li>时间序列图：将横坐标规定为时间，纵坐标为属性（可以有多个，不同编码也可以嵌套堆叠）。对于多个时间序列的比较，有以下几种方法：<ul><li>简单线图：多条不同的线在一起。</li><li>编织线图：交替地根据数值的大小进行前后排列。<ul><li>计算曲线焦点并<strong>垂直切割</strong>曲线面积，按照深度排序优先绘制最高部分面积。</li><li>换句话就是：高个子永远在后面。</li><li><div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/WEJXveUmgLtsiSh.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ul></li><li>缩略视图：见前文。</li><li>水平线图：解决缩略视图在高度较小的情况下空间利用问题。（压缩高度，保留精度）</li><li>堆叠线图：把不同的线型堆叠在一起。</li></ul></li><li>螺旋图：更好的体现<strong>周期性</strong>；注意比例和标注。</li><li>像素驱动方法：每个像素代表一个时间点。<ul><li>一行行/一列列排布</li><li>用填充曲线（Peano-Hilbert）：时间上相近的，空间上也相近。</li></ul></li><li>时间曲线（Time Curves）：时间顺序的排列并不是规则的（水平的），而是根据内容相似性进行分布（弯曲）。曲线的形状可以表示相应的<strong>演变</strong>。（高维映射到低维 / 多维缩放）</li><li>主题河流（ThemeRivers）：表示<strong>文本随时间的变化</strong>。<ul><li>从左到右流经时间，类似堆叠曲线图</li><li> <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/FzfauWlJb7VdnwL.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ul></li></ol><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p>时间在可视化里面可以看做高维中的一个带有先后顺序的属性，所以时间序列可视化都是在视觉上具有一定的连续性，这种联系可以让人们更直观地感受时间的流动与事物的变化。</p><h2 id="第-12-章地图"><a href="#第-12-章地图" class="headerlink" title="第 12 章地图"></a>第 12 章地图</h2><ol><li>使用地图的原则和任务<ol><li>原则：当空间关系被着重强调时使用地图</li><li>任务：寻找<strong>地点/特征</strong>、寻找从 A 到 B 的<strong>路径</strong>、<strong>辨认</strong>与地点相关的属性、基于地点<strong>比较</strong>属性</li></ol></li><li>地图投影 - 将地球展开<ol><li>要考虑的属性：面积、形状、方向、方位、距离、尺度</li><li>投影方法<ol><li>墨卡托投影：投影至一个包裹着地球的<strong>圆柱</strong>上，再展开成平面。所有的经纬线都是直线前垂直相交；<strong>方位准确，面积不准确。</strong></li><li>方位角等距投影：确定航线走向。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/wSAfPmcvJ9oisjU.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>温格尔投影：最小化三种失真（面积、方向、距离）。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/R7BHFMsZSOVYteN.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>锥形投影</li><li>阿尔博斯等面积投影：正确显示面积</li><li>复合投影</li><li>其他投影方式：<a href="https://github.com/d3/d3-geo-projection">Extended geographic projections for d3-geo. (github.com)</a></li></ol></li></ol></li><li>区域分布地图<ul><li>用区域填充的颜色或图案来表示数值，如美国大选地图</li><li>问题：具有误导性，因为某区域面积的大小可能与数值没有关系</li><li>解决方法：同一个颜色用深浅区分数值大小，或加入其他编码（如密度）</li></ul></li><li>等高线地图：用来表述在空间中的<strong>数值分布</strong>，特别是数值之间的过渡。</li><li>统计/变形地图：舍弃了地理区域的真实面积，而用数值大小来决定面积（缩放），但保留了原地理区域之间的方位、接壤等信息。</li><li>比例标识地图：保留原地理区域的真实面积，而采用添加圆圈（或其他图形），用它的的大小或其他定量属性来代表数值的大小。</li><li>流图：用于表示数据在不同地域之间的<strong>流动</strong>。（交通部门）</li><li>地铁地图：采用伦敦地铁图方式。线路<strong>水平、垂直或 45 度</strong>，车站间等距。</li></ol><h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><p>地图可视化都是以真实的地理区域为基础，而自然地理区域的面积、方位是固定的，想要表示的数据又往往与面积、方位无关，这就需要考虑如何规避掉区域自然属性对可视化目的的干扰。</p><h2 id="第-13-章经验法则"><a href="#第-13-章经验法则" class="headerlink" title="第 13 章经验法则"></a>第 13 章经验法则</h2><p>大多数情况下简单的、经验性的、探索性的但不是很准确的原则，体系不完整。</p><ol><li>慎用 3D（但是技术在发展）<ol><li><strong>屏幕</strong>不是三维的，更适合 2D 信息</li><li>人对<strong>深度</strong>的判断不够精确</li><li>会产生<strong>遮挡</strong>，无法了解相关关系，带来时间成本</li><li>透视会引起<strong>失真</strong></li><li>3D 下的<strong>文本</strong>会倾斜，造成认知负荷</li></ol></li><li>慎用 2D：能用 1D 的列表就不要用 2D，1D 更适合查找、排序任务。在可视化里面，能简则简，不要追求复杂（<strong>越简洁越有效</strong>）。</li><li>慎用多视图的简单组合：缺乏数据内在逻辑的关联，无法提供深度探索。多视图需要有侧重点，图与图之间要紧密联系，有紧密的交互。（有机结合）</li><li>可见性重于记忆：如果能够通过不同视图直接对比，就不要采用动画，因为动画要求用户记忆，带来负担。</li><li>分辨率优先：<strong>沉浸感依赖于分辨率</strong>。简单说就是优先提高分辨率，而不是整花里胡哨的东西。</li><li>概览优先，缩放与过滤，细节按需呈现：【大量数据 -&gt; 展示概览，忽略细节 -&gt; 提供提示 -&gt; 用户定位到感兴趣的地方 -&gt; 放大 -&gt; 涌现细节】</li><li>交互响应不可缺少：即时反馈非常重要，如不能即时，应告知用户处理进度或先显示一部分。</li><li>黑白情况下的可用性：可视化在黑白情况下依然有效。借用亮度、色度、饱和度等通道。</li><li>功能重于形式：坚持有效性优先原则，考虑用户需求。</li></ol><h3 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h3><p>经验法则是贯穿于所有可视化技术的原则，在进行可视化工作之前和完成之后，都可以对照经验法则检验工作是否得当。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;生活中数据可视化无处不在，以前都会有意无意地进行过可视化的工作，但是通过专业化的分析和方法设计出的结果会更能达到可视化的目的，设计过程也会更加得心应手。另外数据可视化有时候并不只是数据的展现，还包含着数据的挖掘。比如看到一批数据，从不同的角度和考量进行可视化可能会从中挖掘出</summary>
      
    
    
    
    
    <category term="学习" scheme="https://zyrate.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>完全分布式Hadoop集群在虚拟机CentOS7上搭建——过程与注意事项</title>
    <link href="https://zyrate.github.io/2019/12/07/hadoop%20centos/"/>
    <id>https://zyrate.github.io/2019/12/07/hadoop%20centos/</id>
    <published>2019-12-06T16:00:00.000Z</published>
    <updated>2024-03-10T09:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>搭了几次集群后，从什么都不懂到懂了点皮毛，有了些心得体会，写在前面，不一定对但我是这么理解的：</p><ul><li>master = Namenode + SecondaryNamenode</li><li>slave = Datanode</li><li>每个 slave 节点都要保证能与 master<strong>相互</strong>免密 SSH 连接，但 slave 节点之间无所谓</li><li>其实不管是 master 节点还是 slave 节点，它们的配置都可以是一样的，只是后期确定一个 master，让所有的 slave 都能与其互通，然后<strong>格式化 namenode</strong>，这样它逻辑上就是 master 了。所以只需要<strong>配置一台虚拟机当 master</strong>，之后需要几个 slave 就<strong>克隆</strong>几台就行了，只不过需要改一些配置。(不想克隆的话把配置好了的 hadoop 文件夹远程复制到 slave 上，再配一下环境变量和 hosts)</li><li>我有两台云服务器，原来幻想着建一个虚拟机当 master，把那两台服务器当 slave，后来发现太天真了，slave 和 master 之间必须能够相互访问、传数据，而云服务器连<strong>本地主机 IP</strong>都 ping 不通，怎么集群？所以是<strong>不能</strong>把云服务器和虚拟机混用的。</li><li>需要配置的地方：**/etc/sysconfig/network-scripts/ifcfg-ens33**(配 IP)、<strong>jdk</strong>、<strong>hadoop/etc/hadoop</strong>、<strong>hadoop/tmp</strong>(自建)、**/etc/profile<strong>、</strong>/etc/hosts<strong>、</strong>~/. ssh**(免密登录)、<strong>防火墙</strong></li><li>本次集群环境：<br>==VMware Workstation Pro 14==、==CentOS 7==、==jdk1.8.0_161==、==hadoop-2.10.0==</li></ul><hr><p><strong><em>下面记录一下配置搭建过程，首先配 master，打开 Vmware14，装一台全新的 CentOS 7，我推荐装最简版，之后需要什么功能才下载，不然太臃肿了。安装过程省略，用 root 登录</em></strong></p><hr><h4 id="配置-IP"><a href="#配置-IP" class="headerlink" title="配置 IP"></a>配置 IP</h4><p>用以下命令查看和配置本机 IP，保证和主机互 ping 通<br><code>ip addr</code><br><code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static      (这里）</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=795a782a-9240-4230-95fc-bcc33bdbbd97</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes     （这里）</span><br><span class="line">（下面按自己情况）</span><br><span class="line">IPADDR=192.168.117.101</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.117.2</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">ZONE=public</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启服务：<br><code>systemctl restart network.service</code></p><h4 id="改主机名，配置-hosts-文件"><a href="#改主机名，配置-hosts-文件" class="headerlink" title="改主机名，配置 hosts 文件"></a>改主机名，配置 hosts 文件</h4><p>其实主机名改不改无所谓，hosts 改了就行了，但为了便于区分，每台节点的主机名还是改一下吧。<br>改主机名：<br><code>hostnamectl set-hostname master</code><br>执行完之后发现并没有变，其实已经改了</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207151242717.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>重启一下或者重连一下 SSH 就会变了</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207151617616.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>配置 hosts：<br><code>vi /etc/hosts</code><br>自己需要几个节点就配几个，之后如果还加节点的话，那 master 上的 hosts 也要更新</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207152003310.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><p>这一步很重要，不关的话会出现很多问题<br><code>systemctl stop firewalld.service</code><br><code>systemctl disable firewalld.service</code></p><h4 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h4><p>把网上下载的==jdk-8u161-linux-x64. tar. gz==文件传到 <code>/usr/local/java</code> 目录下，这个目录随意。进到目录后，解压即可：<br><code>tar -zxvf jdk-8u161-linux-x64.tar.gz</code><br>环境变量之后和 Hadoop 一起配。</p><h4 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h4><p>与 JDK 类似，把网上下载的==hadoop-2.10.0. tar. gz==文件传到 <code>/usr/local</code> 目录下，进目录之后解压：<br><code>tar -zxvf hadoop-2.10.0.tar.gz</code><br>改名：（为了方便）<br><code>mv hadoop-2.10.0 hadoop</code></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>执行以下命令：<br><code>vi /etc/profile</code><br>在文件的最后加上以下配置：（根据自己路径）（这个配置可能有些不优美但绝对没错）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_161</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop/</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure><p>更新环境变量：<br><code>source /etc/profile</code><br>验证：<br><code>java -version</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207153811327.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><h4 id="配置-Hadoop-文件"><a href="#配置-Hadoop-文件" class="headerlink" title="配置 Hadoop 文件"></a>配置 Hadoop 文件</h4><p>进入 Hadoop 的配置目录<br><code>cd /usr/local/hadoop/etc/hadoop</code><br>可以看到有许多配置文件，一个一个配置</p><ol><li><p><strong>hadoop-env. sh</strong><br>将文件靠前面的<br><code>export JAVA_HOME=$&#123;JAVA_HOME&#125;</code><br>中的${JAVA_HOME}改成自己的 Java 路径</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207154541506.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div></li><li><p><strong>yarn-env. sh</strong><br>将文件靠前面的<br><code># export JAVA_HOME=/home/y/libexec/jdk1.6.0/</code><br>前的 # 去掉，然后改成自己的 Java 路径</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207154942383.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div></li><li><p><strong>core-site. xml</strong><br>用下面的代码替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>hdfs-site. xml</strong><br>用下面的代码替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>yarn-site. xml</strong><br>用下面的代码替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18040<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>       </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18025<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>            </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18141<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>             </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里端口号不是死板的。</p></li><li><p><strong>mapred-site. xml</strong></p></li></ol><p>一开始是没有这个文件的，需要从它给的模板复制一个：<br><code>cp mapred-site.xml.template mapred-site.xml</code><br>用下面的代码替换</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li><strong>slaves</strong><br>打开后，有几个从节点就写几个，名字必须和 hosts 里的一致，我这里的是 slave 和 slave2，slaves 文件只对 master 节点有用，如果新增从节点的话，这个文件也要改。<div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207160946246.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><h4 id="新建-Hadoop-数据目录"><a href="#新建-Hadoop-数据目录" class="headerlink" title="新建 Hadoop 数据目录"></a>新建 Hadoop 数据目录</h4>添加 <strong>hdfs-site. xml</strong> 文件里配置的并不存在的数据目录：<br>目录结构是这样的：<br>/usr/local/hadoop/==tmp==<br>/usr/local/hadoop/tmp/==dfs==<br>/usr/local/hadoop/tmp/dfs/==data==<br>/usr/local/hadoop/tmp/dfs/==name==<br>高亮的是新建的目录。</li></ol><hr><p><strong><em>至此，一台 master 节点的全部配置就完成了，接下来 slave 想克隆几台就克隆几台，我这里克隆了两台，距离分布式集群完全完成还差：配克隆后 IP、配免密登录</em></strong></p><hr><h4 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h4><p>关闭 master<br><strong>右键 master 虚拟机</strong> –&gt;  <strong>管理</strong> –&gt; <strong>克隆</strong><br>根据克隆向导一路继续，注意，一定要选 <strong>创建完整克隆！</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/2019120716263075.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><h4 id="配置克隆后的-IP"><a href="#配置克隆后的-IP" class="headerlink" title="配置克隆后的 IP"></a>配置克隆后的 IP</h4><p>这里跟前面配 IP 的方法一样，就不赘述，但是一定要保证每一台 slave 的主机名和 IP 与 master 节点里 hosts 文件里的主机名和 IP <strong>保持一致</strong>。</p><h4 id="配置-SSH-免密登录"><a href="#配置-SSH-免密登录" class="headerlink" title="配置 SSH 免密登录"></a>配置 SSH 免密登录</h4><p>这一步也很重要，不配的话每次都要输密码，过于麻烦也不现实。<br>配置免密登录基本原理就是，把自己的公钥（一串字符串）复制到别人的 authorized_keys 文件里，当一个主机要 SSH 连接另一个主机时，如果本机的 authorized_keys 文件存有那个主机的公钥，那么就不需要输密码，否则，就连主机 SSH 自己都要输密码。所以，我们的目的就是：</p><ol><li>让 master 节点自己对自己、自己对<strong>所有</strong>slave 免密</li><li>让每一台 slave 节点都自己对自己、自己对 master 免密</li></ol><p>首先进入 master，以 root 登录。<br>密钥和 authorized_keys 的所在目录是 <code>~/.ssh</code> 下面，但初次配置会发现没有这个目录，这时我们只需随意 SSH 登录一个节点，再退出来就会出现这个目录了。<br>进入 <code>cd ~/.ssh</code><br>执行 <code>ssh-keygen -t rsa</code> 生成密钥（连按 3 次回车），<br>对自身免密 <code>ssh-copy-id master</code><br>对所有从节点免密 <code>ssh-copy-id slave</code>，依次执行对 slave2、slave3 等等，这个命令其实就是自动把公钥复制到指定主机的 authorized_keys 文件中去。</p><p>然后分别进入几个从节点，进行类似的操作。<br>这时候从节点已经有 <code>~/.ssh</code> 目录了，进入后执行 <code>ssh-keygen -t -rsa</code> 命令，<br>用 <code>ssh-copy-id</code> 命令分别对自己、对 master 进行免密。</p><p>可以验证，如果免密成功，SSH 另一个主机是不需要密码就能登录的。</p><h4 id="启动-Hadoop-集群"><a href="#启动-Hadoop-集群" class="headerlink" title="启动 Hadoop 集群"></a>启动 Hadoop 集群</h4><p>至此，完全分布式集群的所有配置就大功告成了，满怀着激动的心情启动吧！<br>==这时所有的节点必须开机！==<br>首先要在 master 节点上进行格式化：<br><code>hdfs namenode -format</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207170337330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>看到这句话就说明格式化成功了（当然这句话有时候并不能说明什么~_ ~）<br>启动 Hadoop！<br><code>start-all.sh</code></p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207170700981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>启动好了之后，分别在所有节点执行<strong>jps</strong>命令以验证成功与否：<br>当 master 节点为：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207171409524.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>slave 节点都为：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207171442913.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>就说明运行成功了。</p><h4 id="进一步验证"><a href="#进一步验证" class="headerlink" title="进一步验证"></a>进一步验证</h4><p>在宿主机浏览器上输入：<br><code>(master的IP地址):50070</code><br>看到：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20191207171927397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/2019120717200174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>将 50070 改为 18088：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/201912071721068.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>就大功告成了！<br>关闭集群：<br><code>stop-all.sh</code></p><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><ol><li>如果集群启动后，jps 命令给出的结果与正确的不符，比如少了一个或多了一个，那么大多就需要重新格式化，重新格式化不是再执行一遍 <code>hdfs namenode -format</code> 那么简单，需要把所有节点下的 <code>/usr/local/hadoop/tmp</code> 目录的结构按照上面说到的方式重新建立，即把之前的都删了，重新建文件夹。（重建之前记得关闭集群）<br>之后再格式化、启动。</li><li>如果启动后，在宿主机上无法访问虚拟机 IP 及端口，可能是虚拟机防火墙没关，也可能是宿主机的防火墙规则设置问题。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;搭了几次集群后，从什么都不懂到懂了点皮毛，有了些心得体会，写在前面，不一定对但我是这么理解的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master = Namenode + SecondaryNamenode&lt;/li&gt;
&lt;li&gt;slave = Datanode&lt;/li&gt;
&lt;li&gt;每个 </summary>
      
    
    
    
    
    <category term="分布式" scheme="https://zyrate.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="hadoop" scheme="https://zyrate.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>#{}的困惑 - Mybatis中的参数传递</title>
    <link href="https://zyrate.github.io/2019/09/15/mybatis1/"/>
    <id>https://zyrate.github.io/2019/09/15/mybatis1/</id>
    <published>2019-09-14T16:00:00.000Z</published>
    <updated>2024-03-10T09:17:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis 的初学者一定对 sql 映射文件中许多的#{}符号感到陌生。其实我们都知道，它可以理解为一个占位符，把传递过来的数据放到 sql 语句中，但有些时候它又我觉得困惑，最后大致了解了一下，下面说一下我所学到的知识。</p><p>#{}符号大致有以下三种用途：</p><h5 id="1-获取传递来的原始类型参数"><a href="#1-获取传递来的原始类型参数" class="headerlink" title="1. 获取传递来的原始类型参数"></a>1. 获取传递来的原始类型参数</h5><p>我们经常将操作方法定义在一个接口里面。当我们在接口里定义诸如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">getUser</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><p>的方法时，我们需要向 Mybatis 传递一个整型参数 <strong>id</strong>，这时候，许多教程上的映射文件就是这么写的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.User&quot;</span>&gt;</span>    </span><br><span class="line">select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那我们就会情不自禁地想了：#{id}就是代指我传递过来的参数呗，也就是说，参数名是啥#{}就填啥呗，但事实是不论你写 <code>#&#123;name&#125;</code>、<code>#&#123;gender&#125;</code>、<code>#&#123;fuck&#125;</code> 程序都能正确运行。这是因为，<strong>当只有一个参数传递时，Mybatis 不会对其作特殊处理，不管你大括号里写的什么，它都会用参数替换。</strong> 它真的就只是一个占位置的。</p><p>那么多个参数呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">getUser</span><span class="params">(Integer id, String name)</span>;</span><br></pre></td></tr></table></figure><p>如果你这么写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.User&quot;</span>&gt;</span>    </span><br><span class="line">select * from user where id = #&#123;id&#125; and name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就会发现刺眼的报错信息了。实际上，当有多个参数 (不止是原始类型)传递时，Mybatis 会对它们做特殊处理——封装成 Map，其中键是 param1, param2, param3… 类推，键才是传递过来的参数，我们在#{}中写的需是键，也就是 <code>#&#123;param1&#125;</code>, <code>#&#123;param2&#125;</code>，或是它们的下标 <code>#&#123;0&#125;</code>, <code>#&#123;1&#125;</code>。但这样也未免太麻烦，所以现在主要采用写 <strong>命名参数</strong> 的方法：</p><p>在声明接口时用注解命名参数，就相当于自己命名参数的键名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">getUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span>Integer id, <span class="meta">@Param(&quot;name&quot;)</span>String name)</span>;</span><br></pre></td></tr></table></figure><p>这样一来上面的报错信息就消失了。<br>另外，如果传入的是一个 Collection 或数组类型的参数，Mybatis 也会把它封装成 Map，这时候如果不自己命名的话键是固定的：”collection”或”list”或”array”。</p><h5 id="2-获取对象中的属性值"><a href="#2-获取对象中的属性值" class="headerlink" title="2. 获取对象中的属性值"></a>2. 获取对象中的属性值</h5><p>这个就好理解了，当参数只有一个并且是个 JavaBean 对象 POJO 时，#{}里面就写这个对象的属性名，Mybatis 就能把它取出来。例如：<br>JavaBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">Integer userid;</span><br><span class="line">String username;</span><br><span class="line">Character gender;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">getUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>sql</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.User&quot;</span>&gt;</span>    </span><br><span class="line">select * from user where id = #&#123;userid&#125; and name = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-获取-Map-中的值"><a href="#3-获取-Map-中的值" class="headerlink" title="3. 获取 Map 中的值"></a>3. 获取 Map 中的值</h5><p>当我们传入一个 Map 后，#{}里写键，那么 Mybatis 就会取出值来。</p><p>不得不说，Mybatis 真的是既简便又强大。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Mybatis 的初学者一定对 sql 映射文件中许多的#{}符号感到陌生。其实我们都知道，它可以理解为一个占位符，把传递过来的数据放到 sql 语句中，但有些时候它又我觉得困惑，最后大致了解了一下，下面说一下我所学到的知识。&lt;/p&gt;
&lt;p&gt;#{}符号大致有以下三种用途：&lt;</summary>
      
    
    
    
    
    <category term="mybatis" scheme="https://zyrate.github.io/tags/mybatis/"/>
    
    <category term="mysql" scheme="https://zyrate.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA搭建SSH框架 maven项目的过程总结</title>
    <link href="https://zyrate.github.io/2019/08/11/ssh%20maven/"/>
    <id>https://zyrate.github.io/2019/08/11/ssh%20maven/</id>
    <published>2019-08-10T16:00:00.000Z</published>
    <updated>2024-03-10T09:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>第一篇博客</strong></em><br><em>需要了解 maven 在 idea 里的使用及作用</em><br><em>本步骤使用 spring 的 XML 配置方式搭建，不使用注解</em></p><h1 id="创建-maven-项目"><a href="#创建-maven-项目" class="headerlink" title="创建 maven 项目"></a>创建 maven 项目</h1><p><strong>New Project</strong> -&gt; 在 <strong>create from archetype</strong> 上打勾 -&gt; 选择 <strong>maven-archetype-webapp</strong> -&gt; <strong>Next</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810141023940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="创建maven项目"/></div><div class="image-meta"><span class="image-caption center">创建maven项目</span></div></div><p>GroupId 是包名，一般是 com. 公司名或姓名，Artificial 是项目名</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810142723837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>这里可以用默认的 maven 仓库，但一般在别的盘自建一个仓库，参考别人的教程</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810150406806.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>然后 <strong>next</strong>  -&gt; <strong>finish</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810150754845.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>如果是第一次创建，会等待时间稍微长一些，出现 <code>BUILD SUCCESS</code> 就行了，右下角出现的提示我一般点 <strong>Enable Auto-Import</strong>.</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810151251538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_1,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><h1 id="配置-Tomcat"><a href="#配置-Tomcat" class="headerlink" title="配置 Tomcat"></a>配置 Tomcat</h1><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810203341280.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810203526270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>在 Server 面板配置上本地的 tomcat 服务器，随便命个名，在 Deployment 面板里点击加号 Artifact</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190811090649955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>选中有 exploded 的一个，OK，然后下面的 Application context 可以随意写，这里我写上项目名，也可以不写，只留一个/，这样的话在地址栏只需输入 <code>localhost:8080/...</code>。之后 OK 确定就行了。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190811091045871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><h1 id="整合与样例代码"><a href="#整合与样例代码" class="headerlink" title="整合与样例代码"></a>整合与样例代码</h1><h3 id="配置-pom-xml"><a href="#配置-pom-xml" class="headerlink" title="配置 pom. xml"></a>配置 pom. xml</h3><p>项目创建好了，接下来开始一系列的配置，我这里用的是==Spring4 + Struts2 + Hibernate4==, 注意有时候版本不同操作也会不同。接下来就是配置相关的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- hibernate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- struts2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--struts与spring的整合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-spring-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mysql数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-web-xml"><a href="#配置-web-xml" class="headerlink" title="配置 web. xml"></a>配置 web. xml</h3><p>在 web. xml 里加入以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  Spring的核心监听器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  struts2的核心过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="建立目录结构"><a href="#建立目录结构" class="headerlink" title="建立目录结构"></a>建立目录结构</h3><p>在 src 目录下新建 java 和 resources 目录，分别右键<strong>Mark Directory as</strong> <code>Sources Root</code> 和 <code>Resources Root</code>。<strong>此后所有的配置文件最好都建在 resources 目录下面，不然可能识别不到。</strong></p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810152918208.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><p>然后在 java 目录下建好 <strong>action</strong>、<strong>service</strong>、<strong>dao</strong> 和 <strong>domain</strong>目录，分别是 Web 层、业务层、持久层和实体。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190810154306898.png" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><h3 id="Spring-整合-Struts2"><a href="#Spring-整合-Struts2" class="headerlink" title="Spring 整合 Struts2"></a>Spring 整合 Struts2</h3><p>所谓的 SSH 框架搭建不过是 Spring、Struts2、Hibernate 三个框架的整合，要整合就有个先后顺序，我首先整合 Spring 和 Struts2，然后再整合 Spring 和 Hibernate。我的理解是：<em>Spring 在其中就像一个舞台，给了其他框架施展的空间；它也是一个管理者，让我们程序员学会变“懒”，专注重要的事情。</em> 我这里准备用 <strong>添加用户</strong> 这个操作来做演示，既然先整合 Struts，就暂时不管数据库，只去看看这个操作能否按照我们想要的步骤执行。</p><h5 id="创建样例类"><a href="#创建样例类" class="headerlink" title="创建样例类"></a>创建样例类</h5><p>按照层层递进（持久层、业务层、web 层）的顺序，首先要有一个用户实体类，在 domain 下创建 <code>User.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> domain;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户实体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//这里要用包装类型</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Character gender;</span><br><span class="line"><span class="comment">//getter...</span></span><br><span class="line"><span class="comment">//setter...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是 User 的持久层，在 dao 下创建 <code>UserDao.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao.addUser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是 User 的业务层，在 service 下创建 <code>UserService.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"><span class="keyword">import</span> dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="comment">//用Spring注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserService.addUser&quot;</span>);</span><br><span class="line">        userDao.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后是 User 的 action，在 action 下创建 <code>UserAction.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ModelDriven;</span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> service.UserService;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户相关的Action</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//struts2的标准代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> <span class="keyword">implements</span> <span class="title class_">ModelDriven</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">//模型驱动需要用的对象，也就是User对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Spring注入</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserAction.addUser&quot;</span>);</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在 jsp 页面提交添加用户的表单后，提交到这个 action 的 addUser 方法，然后一路调用，在控制台显示出不同方法的信息，就算成功了，但现在还差许多配置，接着往下。</p><h5 id="配置-spring-xml"><a href="#配置-spring-xml" class="headerlink" title="配置 spring. xml"></a>配置 spring. xml</h5><p>在 resources 目录下建立 <code>spring.xml</code> 文件，文件头模板如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在其中管理以下 bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;service.UserService&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userAction&quot;</span> <span class="attr">class</span>=<span class="string">&quot;action.UserAction&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置-struts-xml"><a href="#配置-struts-xml" class="headerlink" title="配置 struts. xml"></a>配置 struts. xml</h5><p>在 resources 目录下新建 <code>struts.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;随便&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;user_*&quot;</span> <span class="attr">class</span>=<span class="string">&quot;userAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&#123;1&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>至此，Spring 和 Struts2 的整合就大功告成了，只剩一个 jsp 页面来验证是否成功了！</strong></p><h5 id="编写页面"><a href="#编写页面" class="headerlink" title="编写页面"></a>编写页面</h5><p>我们可以修改 idea 自动生成的 <code>index.jsp</code>，用 struts 的标签写一个添加用户页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;s&quot; uri=&quot;/struts-tags&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意action的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">&quot;user_addUser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h5><p>我们启动 Tomcat，启动好之后，在浏览器地址栏输入 <code>localhost:8080/SSH_Demo/index.jsp</code><br>输入用户数据后，按添加按钮提交。<br>这时，地址栏应该变成 <code>http://localhost:8080/SSH_Demo/user_addUser</code><br>我们回到 idea 编辑器，看到控制台输出以下信息就成功了：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://img-blog.csdnimg.cn/20190811124526938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTYyNzAzMg==,size_10,color_FFFFFF,t_70" alt="在这里插入图片描述"/></div><div class="image-meta"><span class="image-caption center">在这里插入图片描述</span></div></div><h3 id="Spring-整合-Hibernate"><a href="#Spring-整合-Hibernate" class="headerlink" title="Spring 整合 Hibernate"></a>Spring 整合 Hibernate</h3><h5 id="修改-Dao-层代码"><a href="#修改-Dao-层代码" class="headerlink" title="修改 Dao 层代码"></a>修改 Dao 层代码</h5><p>之前的 UserDao 继承 <strong>HibernateDaoSupport</strong> 类，调用 getHibernateTemplate 方法获取模板，直接 save 要保存的对象就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> domain.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.orm.hibernate4.support.HibernateDaoSupport;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">HibernateDaoSupport</span>&#123;<span class="comment">//继承这个类很方便</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao.addUser&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.getHibernateTemplate().save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建数据库和属性文件"><a href="#创建数据库和属性文件" class="headerlink" title="创建数据库和属性文件"></a>创建数据库和属性文件</h5><ul><li>我们可以用数据库管理工具新建一个数据库，我这里命名为 <code>ssh_demo</code>，不用创建表，hibernate 会帮我们创建。</li><li>为了方便，jdbc 的各种配置放在属性文件里，在 resources 目录下创建 <code>jdbc.properties</code>，用户名密码什么的填自己的。<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/ssh_demo?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=2018</span><br></pre></td></tr></table></figure><h5 id="创建-Hibernate-映射文件"><a href="#创建-Hibernate-映射文件" class="headerlink" title="创建 Hibernate 映射文件"></a>创建 Hibernate 映射文件</h5>在 resources 下创建 <code>user.hbm.xml</code>，有了这个文件 Hibernate 才能把对象和数据库表对应起来。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-mapping</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;domain.User&quot;</span> <span class="attr">table</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动增长 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">length</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置-spring-xml-1"><a href="#配置-spring-xml-1" class="headerlink" title="配置 spring. xml"></a>配置 spring. xml</h5>接下来的配置有点繁琐，但都是按部就班的比较固定的步骤，一步步来就行。下面的操作写在 spring. xml 里面</li><li>引入外部的属性文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置连接池<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClass&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置 Hibernate 的相关属性（通过注入 sessionFactory）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--Hibernate属性--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernateProperties&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--加载hibernate中的映射文件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappingResources&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">value</span>&gt;</span>user.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>将 sessionFactory 注入 UserDao<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zyr.ssh.dao.ProductDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置事务管理器<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate4.HibernateTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>开启事务注解</li></ul><ol><li><pre><code class="xml">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</code></pre></li><li> 在 UserService 类上加一个注解 <code>@Transactional</code></li></ol><p><em><strong>==大功告成 ！==</strong></em></p><h5 id="运行测试-1"><a href="#运行测试-1" class="headerlink" title="运行测试"></a>运行测试</h5><p>同样的，运行 Tomcat，在浏览器地址栏输入 <code>localhost:8080/SSH_Demo/index.jsp</code>，<br>输入用户 ID、姓名、性别后提交。再看看数据库里是不是已经有一个 user 表，并且插入了一条数据啦。<strong>至此 SSH 框架的初步搭建已完成。</strong></p><hr><p>这是我第一次写博客，关于 ssh 框架也正在学习过程中，有什么不妥或错误的地方还望大家谅解与指教！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;第一篇博客&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;&lt;em&gt;需要了解 maven 在 idea 里的使用及作用&lt;/em&gt;&lt;br&gt;&lt;em&gt;本步骤使用 spring 的 XML 配置方式搭建，不使用注解&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建-maven-项目</summary>
      
    
    
    
    
    <category term="ssh" scheme="https://zyrate.github.io/tags/ssh/"/>
    
    <category term="idea" scheme="https://zyrate.github.io/tags/idea/"/>
    
    <category term="maven" scheme="https://zyrate.github.io/tags/maven/"/>
    
  </entry>
  
</feed>
