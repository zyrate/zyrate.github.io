<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZYR的博客</title>
  
  <subtitle>为者常成，行者常至</subtitle>
  <link href="https://zyrate.github.io/atom.xml" rel="self"/>
  
  <link href="https://zyrate.github.io/"/>
  <updated>2023-11-23T14:40:15.308Z</updated>
  <id>https://zyrate.github.io/</id>
  
  <author>
    <name>Yunrui Zheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 6</title>
    <link href="https://zyrate.github.io/2023/11/15/Lab%206/"/>
    <id>https://zyrate.github.io/2023/11/15/Lab%206/</id>
    <published>2023-11-14T16:00:00.000Z</published>
    <updated>2023-11-23T14:40:15.308Z</updated>
    
    <content type="html"><![CDATA[<p>Lab 6 实现 SimpleDB 的基于日志系统的回滚（rollback）和恢复（recover）功能。</p><h3 id="WAL-机制"><a href="#WAL-机制" class="headerlink" title="WAL 机制"></a>WAL 机制</h3><p>首先，SimpleDB 要实现的是<strong>预写式日志（Write-ahead logging, WAL）</strong>，也就是<strong>所有修改</strong>在生效之前都要先写入 log 文件中，写入的内容包括 redo 和 undo 信息，分别保证事务的<strong>持久性</strong>和<strong>原子性</strong>。</p><p>在 SimpleDB 中，日志的单位和锁一样是页面，每个页面都可以通过 <code>setBeforeImage</code> 方法来设置 oldData，也就是每次 flush 到磁盘前页面还未变动时的旧数据（是上一次 flush 的时候保存的）。日志系统会在每次 flush 脏页的时候把 beforeImage 和 afterImage 写入日志文件，分别代表旧数据和新数据。这样在需要 redo 的时候，就把 afterImage 写入磁盘；需要 undo 的时候，就把 beforeImage 写入磁盘。</p><p>Lab 6 只要求实现 LogFile 类中的 <code>rollback</code> 和 <code>recover</code> 方法：</p><ul><li>前者用在事务 <strong>abort</strong> 的时候，需要撤销 (undo) 该事务的所有操作，回滚数据库到之前的状态；</li><li>后者用在发生崩溃 <strong>crash</strong> 的时候，需要撤销 (undo) 所有未提交事务的所有操作、重做 (redo) 所有已提交事务的所有操作，恢复数据库到正常状态。</li></ul><h3 id="缓冲区管理策略"><a href="#缓冲区管理策略" class="headerlink" title="缓冲区管理策略"></a>缓冲区管理策略</h3><p>数据库的缓冲区管理策略有<strong>两类四种</strong>，分别是：</p><h4 id="steal-策略"><a href="#steal-策略" class="headerlink" title="steal 策略"></a>steal 策略</h4><p>允许从页面缓存逐出“脏页”。此时磁盘上可能包含 uncommitted 的数据，因此系统需要记录 undo log，以在事务 abort 时进行回滚（<strong>rollback</strong>）。</p><h4 id="no-steal-策略"><a href="#no-steal-策略" class="headerlink" title="no-steal 策略"></a>no-steal 策略</h4><p>不允许从页面缓存逐出“脏页”。表示磁盘上不会存在 uncommitted 数据，因此无需回滚操作，也就无需记录 undo log。</p><h4 id="force-策略"><a href="#force-策略" class="headerlink" title="force 策略"></a>force 策略</h4><p>事务在 committed 的时候必须将所有更新<strong>立刻持久化</strong>到磁盘，这样的话不需要 redo log，因为只要日志中存在 commit 记录就说明磁盘已经更新了全部数据。但是这样会导致磁盘发生很多小的写操作（更可能是随机写）。</p><h4 id="no-force-策略"><a href="#no-force-策略" class="headerlink" title="no-force 策略"></a>no-force 策略</h4><p>事务在 committed 之后可以不立即持久化到磁盘，这样可以缓存很多的脏页<strong>批量持久化</strong>到磁盘，这样可以降低磁盘操作次数（提升顺序写），但是如果 committed 之后发生<strong>crash</strong>，那么此时已经提交的事务数据将会<strong>丢失</strong>（因为还没有持久化到磁盘），因此系统需要记录 redo log，在系统重启时候进行回复（recover）操作。</p><blockquote><p>在 SimpleDB 中, 之前的 Lab 要求实现的是 no-steal 和 force 策略，但是这种策略的效率不高。所以在本次 Lab 的 LogTest 中，它会时不时的打破 no-steal 策略，也就是通过随时调用 <code>flushAllPages()</code> 让磁盘上<strong>存在未提交的</strong>数据，测试 abort 后的回滚操作。同时也默认 no-force 的存在（虽然实际不是），以测试 crash 后的恢复操作。所以我们 redo 和 undo 都需要实现。</p></blockquote><h3 id="日志文件结构"><a href="#日志文件结构" class="headerlink" title="日志文件结构"></a>日志文件结构</h3><p>Log File 中一条记录的格式是：<br><code>&lt;RECORD_TYPE:int | TID:long | content | start:long&gt; </code></p><ul><li>其中 RECORD_TYPE 指记录的类型，TID 指事务的标识，content 在不同的类型中表示不同内容， start 指此条记录开始位置的偏移量。</li><li>RECORD_TYPE 总共有 5 种表示不同的行为：<ul><li>BEGIN, 事务开始</li><li>UPDATE, 事务对页面进行 UPDATE 操作</li><li>COMMIT, 事务提交</li><li>ABORT, 事务中断</li><li>CHECKPOINT, 检查点</li></ul></li><li>在运行过程中各类记录被不停地<strong>追加</strong>到 Log File 里面。</li><li>由于多个事务之间时<strong>并行执行</strong>的，所以日志文件里不同事务对不同页面的各项操作是<strong>混合交叉</strong>在一起的。</li></ul><p>BEGIN、COMMIT 和 ABORT 这三种记录的 <code>content</code> 位置是空的，不存储数据；而 UPDATE 存储的是序列化后的 beforeImage 和 afterImage；CHECKPOINT 存储的首先是一个 INT 类型代表<strong>当前活跃事务（未提交）的数量</strong>，后面跟的是每个活跃事务的 TID 和 BEGIN 记录的位置 offset（都是 Long 类型）。</p><p><strong>检查点</strong>是为了加快恢复过程的速度。如果没有检查点，那么系统在宕机重启后需要从头对 Log File 进行顺序访问，依次找到所有未提交和已提交的事务进行 undo 和 redo 操作，费时费力。而检查点机制要求在向 Log File 中添加 CHECKPOINT 的时候，<strong>将缓冲区中所有的脏页刷新到磁盘</strong>，也就代表着在检查点之前提交了的事务无需在重启后执行恢复操作，因为磁盘已经拥有这些事务更新后的数据。我们只需从检查点之后顺序访问 Log File 即可。</p><p>另外需要注意的是，检查点会记录那个时刻还未提交的所有事务 ID，这些事务并不能保证宕机后的原子性和持久性，因此也需要对这些事务进行恢复操作。</p><h3 id="Rollback-实现"><a href="#Rollback-实现" class="headerlink" title="Rollback 实现"></a>Rollback 实现</h3><p><code>rollback</code> 方法在事务被 abort 的时候调用，此时该事务对所有页面产生的所有修改都应该<strong>失效</strong>，也就是说需要将所有相关页面的 beforeImage（旧数据）恢复到磁盘上（undo）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(TransactionId tid)</span>&#123;</span><br><span class="line"><span class="comment">//省略synchronized结构</span></span><br><span class="line">preAppend();  </span><br><span class="line"><span class="comment">// 找到该事务在file中的第一个记录的偏移量  </span></span><br><span class="line"><span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> tidToFirstLogRecord.get(tid.getId());  </span><br><span class="line">raf.seek(offset);  </span><br><span class="line"><span class="comment">// 顺序访问直到文件末尾</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> raf.readInt();  <span class="comment">// 记录类型</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">record_tid</span> <span class="operator">=</span> raf.readLong();  <span class="comment">// TID</span></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;  </span><br><span class="line">            <span class="keyword">case</span> UPDATE_RECORD: <span class="comment">// 更新记录</span></span><br><span class="line">                <span class="type">Page</span> <span class="variable">before</span> <span class="operator">=</span> readPageData(raf);  <span class="comment">// 旧数据</span></span><br><span class="line">                <span class="type">Page</span> <span class="variable">after</span> <span class="operator">=</span> readPageData(raf);   <span class="comment">// 新数据</span></span><br><span class="line">                <span class="keyword">if</span>(record_tid == tid.getId())&#123;  </span><br><span class="line">                    <span class="comment">// 先把此页面从缓存中去除</span></span><br><span class="line">                    Database.getBufferPool().discardPage(before.getId());  </span><br><span class="line">                    <span class="comment">// 然后把旧数据写入Table文件</span></span><br><span class="line">                    Database.getCatalog().getDatabaseFile(before.getId().getTableId()).writePage(before);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> CHECKPOINT_RECORD:  <span class="comment">// 跳过所有检查点记录</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">numXactions</span> <span class="operator">=</span> raf.readInt();  </span><br><span class="line">                <span class="keyword">while</span> (numXactions-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                    <span class="type">long</span> <span class="variable">xid</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                    <span class="type">long</span> <span class="variable">xoffset</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        raf.readLong();  <span class="comment">// 跳过start指针</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (EOFException e) &#123;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Recover-实现"><a href="#Recover-实现" class="headerlink" title="Recover 实现"></a>Recover 实现</h3><p><code>recover</code> 方法在数据库 crash 重启后调用，需要将检查点（如果有的话）中及其之后的所有事务进行恢复操作，未提交的 undo，已提交的 redo。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recover</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// 省略synchronized结构</span></span><br><span class="line">recoveryUndecided = <span class="literal">false</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* redo就是写入afterimage，undo就是写入beforeimage */</span>  </span><br><span class="line"><span class="comment">// 已提交的事务ID集合</span></span><br><span class="line">Set&lt;Long&gt; commitedIds = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();  </span><br><span class="line"><span class="comment">// 检查点存储的活跃事务集合</span></span><br><span class="line">Map&lt;Long, Long&gt; activeTxns = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line"><span class="comment">// 从检查点往后所有事务的集合（所有的旧页面和新页面）  </span></span><br><span class="line">Map&lt;Long, List&lt;Page&gt;&gt; beforePages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">Map&lt;Long, List&lt;Page&gt;&gt; afterPages = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line"><span class="type">long</span> <span class="variable">cpOffset</span> <span class="operator">=</span> raf.readLong();  <span class="comment">// 检查点位置  </span></span><br><span class="line"><span class="keyword">if</span>(cpOffset != -<span class="number">1</span>)&#123;  </span><br><span class="line">    raf.seek(cpOffset);  <span class="comment">// 如果有检查点，直接从此处开始</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 顺序访问直到文件末尾</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> raf.readInt();  <span class="comment">// 记录类型</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">record_tid</span> <span class="operator">=</span> raf.readLong();  <span class="comment">// TID</span></span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;  </span><br><span class="line">            <span class="keyword">case</span> UPDATE_RECORD:  </span><br><span class="line">                <span class="type">Page</span> <span class="variable">before</span> <span class="operator">=</span> readPageData(raf);  <span class="comment">// 旧数据</span></span><br><span class="line">                <span class="type">Page</span> <span class="variable">after</span> <span class="operator">=</span> readPageData(raf);   <span class="comment">// 新数据</span></span><br><span class="line">                beforePages.computeIfAbsent(record_tid, k-&gt;<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(before);  </span><br><span class="line">                afterPages.computeIfAbsent(record_tid, k-&gt;<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(after);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> CHECKPOINT_RECORD:  </span><br><span class="line">                <span class="type">int</span> <span class="variable">numXactions</span> <span class="operator">=</span> raf.readInt();  </span><br><span class="line">                <span class="keyword">while</span> (numXactions-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                    <span class="type">long</span> <span class="variable">xid</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                    <span class="type">long</span> <span class="variable">xoffset</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                    activeTxns.put(xid, xoffset);  <span class="comment">// 记录活跃事务</span></span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> COMMIT_RECORD:  </span><br><span class="line">                commitedIds.add(record_tid);  <span class="comment">// 记录已提交事务</span></span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        raf.readLong();  <span class="comment">// 跳过start指针</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (EOFException e) &#123;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/* 注意undo和redo的顺序不能乱，否则redo被undo覆盖 */</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// undo未commit的  </span></span><br><span class="line"><span class="keyword">for</span>(Long record_id : beforePages.keySet())&#123;  </span><br><span class="line">    <span class="keyword">if</span>(!commitedIds.contains(record_id))&#123;  </span><br><span class="line">        List&lt;Page&gt; befores = beforePages.getOrDefault(record_id, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());  </span><br><span class="line">        <span class="keyword">for</span>(Page page : befores)&#123;  </span><br><span class="line">            Database.getCatalog().getDatabaseFile(page.getId().getTableId()).writePage(page);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// redo已经commit的  </span></span><br><span class="line"><span class="keyword">for</span>(Long record_tid : commitedIds)&#123;  </span><br><span class="line">    List&lt;Page&gt; afters = afterPages.getOrDefault(record_tid, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());  </span><br><span class="line">    <span class="keyword">for</span>(Page page : afters)&#123;  </span><br><span class="line">        Database.getCatalog().getDatabaseFile(page.getId().getTableId()).writePage(page);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 处理在checkpoint之前开始但是在checkpoint还未提交的事务  </span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Long,Long&gt; entry : activeTxns.entrySet())&#123;  </span><br><span class="line">    <span class="type">long</span> <span class="variable">active_id</span> <span class="operator">=</span> entry.getKey();  </span><br><span class="line">    <span class="type">long</span> <span class="variable">active_offset</span> <span class="operator">=</span> entry.getValue();  </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">commited</span> <span class="operator">=</span> commitedIds.contains(active_id);  </span><br><span class="line">    raf.seek(active_offset);  </span><br><span class="line">    <span class="comment">// 代码与上文类似</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> raf.readInt();  </span><br><span class="line">            <span class="type">long</span> <span class="variable">record_tid</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;  </span><br><span class="line">                <span class="keyword">case</span> UPDATE_RECORD:  </span><br><span class="line">                    <span class="type">Page</span> <span class="variable">before</span> <span class="operator">=</span> readPageData(raf);  </span><br><span class="line">                    <span class="type">Page</span> <span class="variable">after</span> <span class="operator">=</span> readPageData(raf);  </span><br><span class="line">                    <span class="keyword">if</span>(commited)&#123;  </span><br><span class="line">                        <span class="comment">// redo  </span></span><br><span class="line">                        Database.getCatalog().getDatabaseFile(after.getId().getTableId()).writePage(after);  </span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                        <span class="comment">// undo  </span></span><br><span class="line">                        Database.getCatalog().getDatabaseFile(before.getId().getTableId()).writePage(before);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="keyword">case</span> CHECKPOINT_RECORD:  </span><br><span class="line">                    <span class="type">int</span> <span class="variable">numXactions</span> <span class="operator">=</span> raf.readInt();  </span><br><span class="line">                    <span class="keyword">while</span> (numXactions-- &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                        <span class="type">long</span> <span class="variable">xid</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                        <span class="type">long</span> <span class="variable">xoffset</span> <span class="operator">=</span> raf.readLong();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            raf.readLong();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要注意 undo 和 redo 的顺序不能颠倒，否则会出现数据覆盖问题。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab 6 实现 SimpleDB 的基于日志系统的回滚（rollback）和恢复（recover）功能。&lt;/p&gt;
&lt;h3 id=&quot;WAL-机制&quot;&gt;&lt;a href=&quot;#WAL-机制&quot; class=&quot;headerlink&quot; title=&quot;WAL 机制&quot;&gt;&lt;/a&gt;WAL 机制&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 5</title>
    <link href="https://zyrate.github.io/2023/11/07/Lab%205/"/>
    <id>https://zyrate.github.io/2023/11/07/Lab%205/</id>
    <published>2023-11-06T16:00:00.000Z</published>
    <updated>2023-11-23T14:40:07.089Z</updated>
    
    <content type="html"><![CDATA[<p>Lab 5 要求实现 SimpleDB 的 B+树索引存储机制。整体的 B+树相关代码还是较为复杂的，但是 SimpleDB 帮我们写了大部分结构性的代码，让我们去完成较重要的功能性代码。但是所有的代码都需要理解透彻。</p><h4 id="B-树索引结构"><a href="#B-树索引结构" class="headerlink" title="B+树索引结构"></a>B+树索引结构</h4><p>首先，在 InnoDB 引擎中，B+树索引分为<strong>主索引</strong>和<strong>辅助索引</strong>，主索引的叶子结点记录着完整的数据，而辅助索引的叶子结点只记录着主键的值，在查找时需要先插找到主键值，再到主索引中进行查找，相当于二级索引机制。<strong>但在 SimpleDB 中，只要求实现主索引。</strong></p><p>一个关于索引的定义：索引就是一个表<strong>属性子集的副本</strong>，为了通过这些属性更高效的访问数据而进行了一定的组织和排序，数据库需要确保表和索引是逻辑同步的。这里可以理解成，B+树的非叶结点就是上述的“属性子集的副本”，是真正的索引结构，而叶结点并不是副本，是表的属性数据集合本身。</p><p>也就是说，在 SimpleDB 中一个表可以用 B+树 File 形式存储，也可以用 HeapFile 形式存储，这两者之前是<strong>平行关系</strong>，取决于用户的选择，它们拥有<strong>相同的</strong>存储方式和顶层抽象。</p><ul><li>对于 HeapFile，它继承自 DbFile，内部存储 HeapPage，通过 BufferPool 访问；</li><li>对于 BTreeFile，它同样继承自 DbFile，内部存储 BTreePage，也通过 BufferPool 访问，缓存和锁管理机制是通用的。</li></ul><p>但是由于 B+树结构复杂，因此有多种不同类型的 BTreePage，分别是：<strong>BTreeRootPtrPage</strong>、<strong>BTreeHeaderPage</strong>、<strong>BTreeInternalPage</strong>、<strong>BTreeLeafPage</strong>。但其实，与 B+树的逻辑结构相关的只有最后两种，分别对应内部结点和叶子结点。<div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231019161522.png" alt="B+树逻辑结构"/></div><div class="image-meta"><span class="image-caption center">B+树逻辑结构</span></div></div></p><p>而 BTreeHeaderPage 的作用是记录当前 BTreeFile 中还有没有<strong>空页</strong>（由于从 B+树删除结点并不会在物理层面也删除，有点像静态哈希表），如果有空页那么新建结点的时候就可以复用该页，如果没有就新建一个空页到 BTreeFile 中去。</p><p>BTreeRootPtrPage 的作用是记录根结点（internal 或 leaf）的在 File 中的位置，因为在进行一系列的插入、删除操作后，File 中的 Page 是<strong>无序存储</strong>的，B+树逻辑结构靠的是<strong>地址链接</strong>，所以 File 的第一个 Page 不一定是根结点，所以需要记录。BTreeRootPtrPage 中有一个静态方法 <code>getId()</code>，可以看到新建了一个 pageNo=0 的 PageId，所以这个页面永远储存在 File 的第一个位置。</p><blockquote><p>在做此 Lab 的时候，不用想着在一开始搞懂所有类的所有方法，容易没有头绪。就从 Lab 要求补充的代码处入手，需要用什么结构、方法、接口就去了解什么，很容易就上手了。</p></blockquote><p>BTreeLeafPage 存储着该叶子结点上的所有 Tuple 和左右兄弟指针，调用 <code>iterator()</code> 可以依次（正向或逆向）遍历 Tuple。</p><p>BTreeInternalPage 存储着所有的<strong>key值</strong>和指向孩子节点的<strong>指针</strong>，调用 <code>iterator()</code> 可以一次（正向或逆向）遍历 BTreeEntry，其中包含“key、左指针、右指针”。这个实体只是为了传递数据，修改里面的值并不会对结点本身造成影响，如果想更新结点数据，需要调用 <code>updateEntry()</code> 方法。</p><blockquote><p>所有的“指针”都是指页面的 PageNo，类型是 int。</p></blockquote><h4 id="B-树的查找"><a href="#B-树的查找" class="headerlink" title="B+树的查找"></a>B+树的查找</h4><p><strong>核心思想：</strong> 对于一个目标值 f，从根结点开始查找，遍历该结点所有的 key 值，如果 <code>f&lt;=key</code> ，那么进入这个 key 的<strong>左孩子</strong>递归查找；如果遍历到了最后一个 key 仍不符合条件，那么进入<strong>右孩子</strong>递归查找。直到<strong>遇到叶子结点</strong>，直接返回此结点，因为它一定包含 f（或 f 不在 B+树中）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BTreeLeafPage <span class="title function_">findLeafPage</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreePageId pid, Permissions perm,  Field f)</span>  </span><br><span class="line">            <span class="keyword">throws</span> DbException, TransactionAbortedException &#123;  </span><br><span class="line">   <span class="keyword">if</span>(pid.pgcateg() == BTreePageId.INTERNAL)&#123; <span class="comment">// 非叶结点  </span></span><br><span class="line">      <span class="comment">// 从BufferPool拿到指定pid的非叶页面  </span></span><br><span class="line">      <span class="type">BTreeInternalPage</span> <span class="variable">inPage</span> <span class="operator">=</span> (BTreeInternalPage) getPage(tid, dirtypages, pid, Permissions.READ_ONLY);  </span><br><span class="line">      Iterator&lt;BTreeEntry&gt; iterator = inPage.iterator();  </span><br><span class="line">      <span class="comment">// 遍历该页面的所有key，和目标f作比较（见B+树的查找）  </span></span><br><span class="line">      <span class="keyword">while</span>(iterator.hasNext())&#123;  </span><br><span class="line">         <span class="type">BTreeEntry</span> <span class="variable">entry</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">         <span class="keyword">if</span>(f==<span class="literal">null</span>||f.compare(Op.LESS_THAN_OR_EQ, entry.getKey()))&#123; </span><br><span class="line">         <span class="comment">// 目标值为null或小于等于key值，进入左孩子递归  </span></span><br><span class="line">            <span class="keyword">return</span> findLeafPage(tid, dirtypages, entry.getLeftChild(), perm, f);  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">if</span>(!iterator.hasNext())&#123; <span class="comment">// 遍历到最后一个，进入右孩子递归  </span></span><br><span class="line">            <span class="keyword">return</span> findLeafPage(tid, dirtypages, entry.getRightChild(), perm, f);  </span><br><span class="line">         &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid.pgcateg() == BTreePageId.LEAF)&#123; <span class="comment">// 叶子结点，直接返回指定pid的叶子页面  </span></span><br><span class="line">      <span class="keyword">return</span> (BTreeLeafPage) getPage(tid, dirtypages, pid, perm);  </span><br><span class="line">   &#125;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>getPage()</code> 方法里面调用了 BufferPool 的 getPage 方法，保证了锁机制的正常执行，另外它接受并维护一个 dirtypages 映射，每当访问类型是 READ_WRITE 的时候就将该页面设为 dirty，以便记录脏页集合。</p><h4 id="B-树的插入"><a href="#B-树的插入" class="headerlink" title="B+树的插入"></a>B+树的插入</h4><p>利用 B+树的查找代码，找到需要插入的元组应该在的<strong>叶子结点</strong>，直接插入。如果该结点已经满了，没有空位可以插入了，则需要进行<strong>分裂</strong>，分裂的过程可能会递归向上。</p><p><strong>叶子结点的分裂：</strong> 找到中间 Tuple 位置，将该 Tuple 及其右侧的所有 Tuple 依次移动到一个新的 LeafPage 上，之后将这个中间 Tuple 的 key 值插入到父结点中，最后<strong>更新所有相关的指针</strong>。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231111205114.png" alt="叶结点的分裂"/></div><div class="image-meta"><span class="image-caption center">叶结点的分裂</span></div></div><p><strong>内部结点的分裂：</strong> 找到中间 key 位置，将该 key 右侧的所有 key 依次移动到一个新的 InternalPage 上，之后将这个 key 从原 Page 删除，插入到父节点中。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231111205416.png" alt="内部结点的分裂"/></div><div class="image-meta"><span class="image-caption center">内部结点的分裂</span></div></div><ul><li>两类分裂的区别在于，叶子结点分裂需要将中间 Tuple 的 key <strong>复制</strong>到父结点中，而内部结点的分裂是将中间 key<strong>上移</strong>到父结点中，并且需要更新新页面<strong>所有子页面的父指针</strong>（因为这些子页面的父指针都指向原来的页面）。</li><li>在分裂的时候，需要向父页面插入值，此时父页面也可能会出现无空位的情况，递归处理即可。</li></ul><p>叶结点的分裂代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BTreeLeafPage <span class="title function_">splitLeafPage</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeLeafPage page, Field field)</span>  </span><br><span class="line">      <span class="keyword">throws</span> DbException, IOException, TransactionAbortedException &#123;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 分裂位置</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">splitFrom</span> <span class="operator">=</span> page.getNumTuples() / <span class="number">2</span>;  </span><br><span class="line">   <span class="comment">// 新叶子结点  </span></span><br><span class="line">   <span class="type">BTreeLeafPage</span> <span class="variable">newLeaf</span> <span class="operator">=</span> (BTreeLeafPage) getEmptyPage(tid, dirtypages, BTreePageId.LEAF);  </span><br><span class="line">   Iterator&lt;Tuple&gt; iterator = page.reverseIterator();  </span><br><span class="line">   <span class="type">Field</span> <span class="variable">middleKey</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 中间Key  </span></span><br><span class="line">   <span class="comment">// 逆序遍历旧叶子结点进行元组移动  </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=page.getNumTuples()-<span class="number">1</span>; iterator.hasNext() &amp;&amp; i&gt;=splitFrom; i--)&#123;  </span><br><span class="line">      <span class="type">Tuple</span> <span class="variable">t</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      page.deleteTuple(t);  </span><br><span class="line">      newLeaf.insertTuple(t);  </span><br><span class="line">      <span class="keyword">if</span>(i == splitFrom)&#123;  </span><br><span class="line">         middleKey = t.getField(keyField);  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 左右兄弟连接  </span></span><br><span class="line">   <span class="type">BTreePageId</span> <span class="variable">rightSiblingId</span> <span class="operator">=</span> page.getRightSiblingId();  </span><br><span class="line">   newLeaf.setLeftSiblingId(page.getId());  </span><br><span class="line">   newLeaf.setRightSiblingId(page.getRightSiblingId());  </span><br><span class="line">   page.setRightSiblingId(newLeaf.getId());  </span><br><span class="line">   <span class="keyword">if</span>(rightSiblingId != <span class="literal">null</span>)&#123; <span class="comment">// 不要忘了这一步的指针更新  </span></span><br><span class="line">      <span class="type">BTreeLeafPage</span> <span class="variable">rightSibling</span> <span class="operator">=</span> (BTreeLeafPage) getPage(tid, dirtypages, rightSiblingId, Permissions.READ_WRITE);  </span><br><span class="line">      rightSibling.setLeftSiblingId(newLeaf.getId());  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">/* key上移 */</span>   </span><br><span class="line">   <span class="type">BTreeEntry</span> <span class="variable">bTreeEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BTreeEntry</span>(middleKey, page.getId(), newLeaf.getId());  </span><br><span class="line">   <span class="comment">// 这个提供的方法里面有向上递归的部分  </span></span><br><span class="line">   <span class="type">BTreeInternalPage</span> <span class="variable">parent</span> <span class="operator">=</span> getParentWithEmptySlots(tid, dirtypages, page.getParentId(), field);  </span><br><span class="line">   parent.insertEntry(bTreeEntry);  </span><br><span class="line">   page.setParentId(parent.getId());  </span><br><span class="line">   newLeaf.setParentId(parent.getId());  </span><br><span class="line">   <span class="comment">// 要插入的Key如果小于middle key，返回左（旧）叶子  </span></span><br><span class="line">   <span class="keyword">if</span>(field.compare(Op.LESS_THAN, middleKey))&#123;  </span><br><span class="line">      <span class="keyword">return</span> page;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 否则返回右（新）叶子  </span></span><br><span class="line">   <span class="keyword">return</span> newLeaf;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部结点分裂代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BTreeInternalPage <span class="title function_">splitInternalPage</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeInternalPage page, Field field)</span>   </span><br><span class="line">            <span class="keyword">throws</span> DbException, IOException, TransactionAbortedException &#123;  </span><br><span class="line">   <span class="comment">// 新非叶结点  </span></span><br><span class="line">   <span class="type">BTreeInternalPage</span> <span class="variable">newInternal</span> <span class="operator">=</span> (BTreeInternalPage) getEmptyPage(tid, dirtypages, BTreePageId.INTERNAL);  </span><br><span class="line">   Iterator&lt;BTreeEntry&gt; iterator = page.reverseIterator();  </span><br><span class="line">   <span class="type">BTreeEntry</span> <span class="variable">middleEntry</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 中间entry  </span></span><br><span class="line">   <span class="comment">// 遍历旧非叶结点进行元组移动  </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=page.getNumEntries()-<span class="number">1</span>; iterator.hasNext() &amp;&amp; i&gt;=splitFrom; i--)&#123;  </span><br><span class="line">      <span class="type">BTreeEntry</span> <span class="variable">e</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      page.deleteKeyAndRightChild(e);  </span><br><span class="line">      <span class="keyword">if</span>(i == splitFrom)&#123;  </span><br><span class="line">         middleEntry = e;  </span><br><span class="line">         <span class="keyword">break</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      newInternal.insertEntry(e);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 这个提供的方法里面有向上递归的部分  </span></span><br><span class="line">   <span class="type">BTreeInternalPage</span> <span class="variable">parent</span> <span class="operator">=</span> getParentWithEmptySlots(tid, dirtypages, page.getParentId(), field);  </span><br><span class="line">   middleEntry.setLeftChild(page.getId());  </span><br><span class="line">   middleEntry.setRightChild(newInternal.getId());  </span><br><span class="line">   parent.insertEntry(middleEntry);  </span><br><span class="line">   page.setParentId(parent.getId());  </span><br><span class="line">   newInternal.setParentId(parent.getId());  </span><br><span class="line">   <span class="comment">// 更新新结点所有子页面的父指针  </span></span><br><span class="line">   updateParentPointers(tid, dirtypages, newInternal);  </span><br><span class="line">   <span class="comment">// 要插入的Key如果小于middle key，返回左（旧）非叶  </span></span><br><span class="line">   <span class="keyword">if</span>(field.compare(Op.LESS_THAN, middleEntry.getKey()))&#123;  </span><br><span class="line">      <span class="keyword">return</span> page;  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 否则返回右（新）非叶  </span></span><br><span class="line">   <span class="keyword">return</span> newInternal;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="B-树的删除"><a href="#B-树的删除" class="headerlink" title="B+树的删除"></a>B+树的删除</h4><p>B+树的删除有三种情况：</p><ol><li>找到对应的叶子结点，删除 Tuple；</li><li>如果删除后该叶子结点的元组数小于 half full，且兄弟结点大于 half full，那么就从兄弟结点<strong>STEAL</strong>一些元组，以保持平衡；</li><li>如果兄弟结点已经是 half full 了，那么就合并这两个结点。<div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231111212307.png" alt="两类结点的STEAL过程"/></div><div class="image-meta"><span class="image-caption center">两类结点的STEAL过程</span></div></div></li></ol><ul><li>在合并叶子结点的时候，会从父结点删除一个 key，因此需要递归向上判断。</li><li>注意在 STEAL 的时候，叶子结点是在转移完兄弟结点的 Tuple 后，根据情况把对应的 key 值<strong>复制</strong>到父结点，而内部结点则是<strong>移动</strong>到父结点。</li><li>在合并的时候，叶子结点是合并以后，父结点的对应 key 直接删除；而内部结点是将父结点对应 key <strong>下移</strong>到对应位置。<div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231111212338.png" alt="两类结点的合并过程"/></div><div class="image-meta"><span class="image-caption center">两类结点的合并过程</span></div></div></li></ul><p>叶子结点的 STEAL 操作代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stealFromLeafPage</span><span class="params">(BTreeLeafPage page, BTreeLeafPage sibling,  BTreeInternalPage parent, BTreeEntry entry, <span class="type">boolean</span> isRightSibling)</span> <span class="keyword">throws</span> DbException &#123;  </span><br><span class="line">   <span class="comment">// 需要偷取的个数</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">numToMove</span> <span class="operator">=</span> (sibling.getNumTuples() - halfFull) / <span class="number">2</span>;  </span><br><span class="line">   Iterator&lt;Tuple&gt; iterator;  </span><br><span class="line">   <span class="keyword">if</span>(isRightSibling)&#123;  <span class="comment">// 从左右不同结点偷取的顺序相反</span></span><br><span class="line">      iterator = sibling.iterator();  </span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">      iterator = sibling.reverseIterator();  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// steal  </span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;numToMove &amp;&amp; iterator.hasNext(); i++)&#123;  </span><br><span class="line">      <span class="type">Tuple</span> <span class="variable">t</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      sibling.deleteTuple(t);  </span><br><span class="line">      page.insertTuple(t);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 如果从左边偷的，本页第一个key上替；如果从右边偷的，右边第一个key上替  </span></span><br><span class="line">   <span class="type">Field</span> <span class="variable">key</span> <span class="operator">=</span> isRightSibling ? sibling.iterator().next().getField(keyField)  </span><br><span class="line">                        : page.iterator().next().getField(keyField);  </span><br><span class="line">   entry.setKey(key);  </span><br><span class="line">   parent.updateEntry(entry);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从左侧内部结点 STEAL 操作代码（右侧同理）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stealFromLeftInternalPage</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeInternalPage page, BTreeInternalPage leftSibling, BTreeInternalPage parent,  </span></span><br><span class="line"><span class="params">      BTreeEntry parentEntry)</span> <span class="keyword">throws</span> DbException, TransactionAbortedException &#123;  </span><br><span class="line">    <span class="comment">// 偷取个数</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">numToMove</span> <span class="operator">=</span> (leftSibling.getNumEntries() - halfFull) / <span class="number">2</span>;  </span><br><span class="line">   Iterator&lt;BTreeEntry&gt; iterator = leftSibling.reverseIterator();  </span><br><span class="line">   <span class="type">RecordId</span> <span class="variable">parentRecordId</span> <span class="operator">=</span> parentEntry.getRecordId();  </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;numToMove &amp;&amp; iterator.hasNext(); i++)&#123;  </span><br><span class="line">      <span class="type">BTreeEntry</span> <span class="variable">e</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      leftSibling.deleteKeyAndRightChild(e);  </span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">0</span>)&#123; <span class="comment">// 开始的时候首先把父Entry旋转下来  </span></span><br><span class="line">         parentEntry.setLeftChild(e.getRightChild());  </span><br><span class="line">         parentEntry.setRightChild(page.iterator().next().getLeftChild());  </span><br><span class="line">         page.insertEntry(parentEntry);  </span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == numToMove-<span class="number">1</span>)&#123; <span class="comment">// 到最后一个再把Entry旋转到父Entry的位置  </span></span><br><span class="line">         e.setLeftChild(leftSibling.getId());  </span><br><span class="line">         e.setRightChild(page.getId());  </span><br><span class="line">         e.setRecordId(parentRecordId); <span class="comment">// 必须要提前记录父Entry的RecordId，不然无法更新  </span></span><br><span class="line">         parent.updateEntry(e);  </span><br><span class="line">         <span class="keyword">break</span>;  </span><br><span class="line">      &#125;  </span><br><span class="line">      page.insertEntry(e);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 更新两个非叶Page的子Page的父指针  </span></span><br><span class="line">   updateParentPointers(tid, dirtypages, page);  </span><br><span class="line">   updateParentPointers(tid, dirtypages, leftSibling);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Merge 叶子结点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeLeafPages</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeLeafPage leftPage, BTreeLeafPage rightPage, BTreeInternalPage parent, BTreeEntry parentEntry)</span>   </span><br><span class="line">            <span class="keyword">throws</span> DbException, IOException, TransactionAbortedException &#123;  </span><br><span class="line">  </span><br><span class="line">   <span class="keyword">while</span>(iterator.hasNext())&#123;  </span><br><span class="line">      <span class="type">Tuple</span> <span class="variable">t</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      rightPage.deleteTuple(t);  </span><br><span class="line">      leftPage.insertTuple(t);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 更新指针  </span></span><br><span class="line">   <span class="type">BTreePageId</span> <span class="variable">rightSibling</span> <span class="operator">=</span> rightPage.getRightSiblingId();  </span><br><span class="line">   leftPage.setRightSiblingId(rightSibling);  </span><br><span class="line">   <span class="keyword">if</span>(rightSibling != <span class="literal">null</span>)&#123;  </span><br><span class="line">      <span class="type">BTreeLeafPage</span> <span class="variable">rightSiblingPage</span> <span class="operator">=</span> (BTreeLeafPage) getPage(tid, dirtypages, rightSibling, Permissions.READ_WRITE);  </span><br><span class="line">      rightSiblingPage.setLeftSiblingId(leftPage.getId());  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 删除父页面的Entry - 包含向上递归  </span></span><br><span class="line">   deleteParentEntry(tid, dirtypages, leftPage, parent, parentEntry);  </span><br><span class="line">   <span class="comment">// 清空右页面  </span></span><br><span class="line">   setEmptyPage(tid, dirtypages, rightPage.getId().getPageNumber());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Merge 内部结点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeInternalPages</span><span class="params">(TransactionId tid, Map&lt;PageId, Page&gt; dirtypages, BTreeInternalPage leftPage, BTreeInternalPage rightPage, BTreeInternalPage parent, BTreeEntry parentEntry)</span>   </span><br><span class="line">            <span class="keyword">throws</span> DbException, IOException, TransactionAbortedException &#123;  </span><br><span class="line">   <span class="comment">// 删除父页面的Entry - 包含向上递归  </span></span><br><span class="line">   deleteParentEntry(tid, dirtypages, leftPage, parent, parentEntry);  </span><br><span class="line">   <span class="comment">// 父Entry先插下来  </span></span><br><span class="line">   parentEntry.setLeftChild(leftPage.reverseIterator().next().getRightChild());  </span><br><span class="line">   parentEntry.setRightChild(rightPage.iterator().next().getLeftChild());  </span><br><span class="line">   leftPage.insertEntry(parentEntry);  </span><br><span class="line">   <span class="comment">// 右全部移动到左  </span></span><br><span class="line">   <span class="keyword">while</span>(iterator.hasNext())&#123;  </span><br><span class="line">      <span class="type">BTreeEntry</span> <span class="variable">e</span> <span class="operator">=</span> iterator.next();  </span><br><span class="line">      rightPage.deleteKeyAndLeftChild(e);  </span><br><span class="line">      leftPage.insertEntry(e);  </span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// 清空右页面  </span></span><br><span class="line">   setEmptyPage(tid, dirtypages, rightPage.getId().getPageNumber());  </span><br><span class="line">   <span class="comment">// 更新左页面子页面的父指针  </span></span><br><span class="line">   updateParentPointers(tid, dirtypages, leftPage);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Bug-记录"><a href="#Bug-记录" class="headerlink" title="Bug 记录"></a>Bug 记录</h4><ol><li>注意左子树的 key 小于等于当前结点的 key，如果漏掉等于的话在查找重复值的情况会出错。</li><li>不论是对 Tuple 还是 Entry，都要先 delete 再 insert，因为 insert 操作会更新 RecordId，如果此时 delete 的话会报错。</li><li>全部做完之后发现部分代码无法通过 <code>checkRep()</code>。<ol><li>一个 BUG 是在 MergeLeafPages 的时候忘了更新右页面的左指针（需要 getPage）</li><li>另一个 BUG 是在 stealFromRightInternalPage 的时候没想到只移动一个 Entry 的情况，这个时候两个条件不能是 if-else if 的关系，而应该是并列的。</li><li>还有一个 BUG 是在 splitLeafPage 的时候同样忘记更新右页面的左指针。</li></ol></li><li>在执行 BTreeTest 的时候，虽然通过了，但一直在报 <code>ConcurrentModificationException</code> 错（从死锁检测抛出），推测是 adjList 里面的 List 不是线程安全的，归根结底是 PageLock 的 holds 没有采用 CopyOnWriteArrayList，更改后消除报错。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab 5 要求实现 SimpleDB 的 B+树索引存储机制。整体的 B+树相关代码还是较为复杂的，但是 SimpleDB 帮我们写了大部分结构性的代码，让我们去完成较重要的功能性代码。但是所有的代码都需要理解透彻。&lt;/p&gt;
&lt;h4 id=&quot;B-树索引结构&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 4</title>
    <link href="https://zyrate.github.io/2023/10/25/Lab%204/"/>
    <id>https://zyrate.github.io/2023/10/25/Lab%204/</id>
    <published>2023-10-24T16:00:00.000Z</published>
    <updated>2023-11-23T14:40:00.639Z</updated>
    
    <content type="html"><![CDATA[<p>Lab4 是实现 SimpleDB 的并发事务系统，跟前面的内容相比较为复杂。</p><p>一般来说数据库的事务需要满足 ACID 特性，即<strong>原子性、一致性、隔离性、持久性</strong>。<br><strong>原子性</strong>就是该事务的所有操作要么全部完成，要么全部取消，要求通过下面的操作保证：</p><ol><li>不从页面缓存中逐出“脏页”（被某个事务更新的页面）。——NO STEAL 规则</li><li>在事务正确提交时，强制刷新所有脏页到磁盘。</li></ol><p><strong>隔离性</strong>就是同时执行的多个事务不会相互干扰，通过将要实现的锁机制保证。<br>一致性在 SimpleDB 中没有强调，持久性应该在 Lab6 的恢复功能上体现。</p><h3 id="SimpleDB-事务并发控制实现"><a href="#SimpleDB-事务并发控制实现" class="headerlink" title="SimpleDB 事务并发控制实现"></a>SimpleDB 事务并发控制实现</h3><h4 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h4><p>在数据库中锁定对象可以是表、页面、元组、属性等，SimpleDB 规定的锁定粒度是页面（Page）。可供事务获取的锁类型有两种：共享锁和排他锁，规则如下。</p><ol><li>事务在读取页面之前，必须具有共享锁；</li><li>事务在修改页面之前，必须具有排他锁；</li><li>多个事务可以在一个页面上具有共享锁；</li><li>只有一个事务可以在一个对象有排他锁。</li></ol><p>在该规则下，如果一个事务在请求页面的时候，无法获取该页面的锁，就必须被阻塞，以等待锁资源<strong>被其他事务释放</strong>留给自己去竞争。特别的是，如果一个事物在申请排他锁时，如果已经持有了该页面的共享锁且是唯一一个持有者，那么可将此共享锁升级为排他锁（<strong>锁升级</strong>）。</p><h4 id="两阶段锁（2PL）"><a href="#两阶段锁（2PL）" class="headerlink" title="两阶段锁（2PL）"></a>两阶段锁（2PL）</h4><p>考虑两个事务按照上述锁机制正常执行，有可能发生下图的情况：（X 排他，S 共享）<br><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231017180921.png" width=200/><br>T1 和 T2 都正常提交了，但是 T1 对于页面 A 发生了“<strong>不可重复读</strong>”现象，即在同一个事务先后两次读到的数据有可能不一样（被别的事务如 T2 修改了）。</p><p>解决这个问题的办法就是实现两阶段锁协议（2PL）。2PL 的两个阶段分别是<strong>扩展阶段（Growing）</strong> 和 <strong>收缩阶段（Shrinking）</strong>，在扩展阶段事务只能获取锁，在收缩阶段事务只能释放锁。</p><p>两阶段锁协议本身足以保证冲突可串行性，但它可能会导致<strong>级联中止（Cascading aborts）</strong> 问题，即一个事务的中止可能导致其他多个事务也一起中止。这是因为在 2PL 中一个事务可能基于另一个事务尚未提交的数据进行操作，如果那个事务被中止，就会发生级联中止。如下图：<br><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231017183102.png" width=200/><br>为了避免这种情况，需要实现<strong>严格两阶段锁</strong>协议（Strict 2PL），即一个事务只能在它提交或中止时释放所有锁。SimpleDB 要求实现 Strict 2PL 协议。这其实简化了操作，因为在赋予事务锁的时候不用考虑什么时候执行完了操作该释放，而是通通等到最后 commit 时释放。</p><h4 id="页面级锁机制实现"><a href="#页面级锁机制实现" class="headerlink" title="页面级锁机制实现"></a>页面级锁机制实现</h4><p>刚开始时看到需要实现读写锁，自然会想到 JUC 中的 <code>ReentrantReadWriteLock</code> 类，然而该类是负责线程同步的，一个事务可以有多个线程，所以他们不在同一粒度。另外只用 Java 提供的这些类并不能很好地实现 2PL 协议，也并不契合事务并发场景。因此我们需要自己实现事务的读写锁机制，但是类库中的一些思想可以借鉴。</p><p>我们定义一个 LockManger 来负责维护事务和锁的状态，在 BufferPool 中事务只需调用相应的方法来获取和释放锁就行了。可以想到 LockManger 需要提供以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取共享锁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">acquireSharedLock</span><span class="params">(TransactionId tid, PageId pid)</span>;</span><br><span class="line"><span class="comment">// 获取排他锁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">acquireExclusiveLock</span><span class="params">(TransactionId tid, PageId pid)</span>;</span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(TransactionId tid, PageId pid)</span>;</span><br><span class="line"><span class="comment">// 是否持有锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">holdsLock</span><span class="params">(TransactionId tid, PageId pid)</span></span><br></pre></td></tr></table></figure><p>更新后的 <code>BufferPool.getPage</code> 方法如下（因为是页面级锁定，所以只在这里获取锁）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(perm == Permissions.READ_ONLY)&#123;  </span><br><span class="line">        <span class="comment">// 获取共享锁  </span></span><br><span class="line">        <span class="keyword">if</span>(!holdsLock(tid, pid)) &#123;  </span><br><span class="line">            lockManager.acquireSharedLock(tid, pid);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line"><span class="comment">// 获取排他锁 - 存在锁升级情况，所以不判断holdsLock  </span></span><br><span class="line">lockManager.acquireExclusiveLock(tid, pid);  </span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//缓存中获取页面</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>所谓事务获取到锁就是“<strong>放行</strong>”，获取不到就是“<strong>阻塞</strong>”。</p><p>这里的“锁”其实说成“锁的使用权”或“钥匙”更贴切一点。每个页面其实只有一把锁，需要钥匙才能进入访问。而共享锁，就是说这把锁可以有多把钥匙开启，每一把钥匙给一个事务；排他锁就是只能有一把钥匙给唯一的事务。如果事务获取不到钥匙就被阻塞。其实 Java 中的<strong>重量级锁</strong>也是这个道理，有时候会被“锁”这个名词给绕晕。</p><p>LockManger 的作用就是记录谁拥有某个页面的钥匙，是把什么样的钥匙，为了统一起见，下文仍称“锁”。</p><p>接下来是 LockManger 的实现，既然每个页面只有一把锁，并且需要维护这把锁的状态和与事务的关系，那么就可以设计一个 PageLock 类来管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PageLock</span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> PageId pageId; <span class="comment">// 页面ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> lockState; <span class="comment">// 0:空闲,-1:排他锁,&gt;0:获取到共享锁的事务数量  </span></span><br><span class="line">    CopyOnWriteArrayList&lt;TransactionId&gt; holds; <span class="comment">// 获取锁到的事务  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageLock</span><span class="params">(PageId pageId)</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.pageId = pageId;  </span><br><span class="line">        holds = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 避免并发修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">stateIncrement</span><span class="params">(<span class="type">int</span> n)</span>&#123;  </span><br><span class="line">    lockState += n;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getLockState</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> lockState;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用一个 <code>lockState</code> 记录这个页面锁的状态。等于 0 代表该页面是空闲的，没有事务访问（无人持锁）；等于 -1 代表该页面的锁为排他锁；大于 0 代表该页面的锁为共享锁，具体数字表示有多少事务正在共享该锁。<code>holds</code> 记录了都是哪些（个）事务获取到该锁。</p><p>在 LockManger 中，我们用一个 Map 记录页面和锁的对应关系；为了方便查询，同样用一个 Map 记录事务和其所持有的锁集合的对应关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;PageId, PageLock&gt; pageLocks;</span><br><span class="line"><span class="keyword">private</span> Map&lt;TransactionId, List&lt;PageId&gt;&gt; lookups;</span><br></pre></td></tr></table></figure><p>在实现“阻塞”效果时，采用了 <code>wait/notify</code> 的方式，也可采用 JUC 中的各种合适的工具类。注意如果仅仅是为了实现读写锁的话，不需要我们自己记录哪些事务陷入了等待，因为这些工具内部已经实现了记录阻塞线程的逻辑，可以在需要时唤醒。但是在后面实现死锁检测的时候，还是需要记录的。</p><p>LockManager 需要对外提供的四个方法实现如下：<br><strong>申请共享锁</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireSharedLock</span><span class="params">(TransactionId tid, PageId pid)</span> <span class="keyword">throws</span> TransactionAbortedException &#123;  </span><br><span class="line"><span class="comment">// 拿到页面对应的锁，如果还没有就新建一个</span></span><br><span class="line">    <span class="type">PageLock</span> <span class="variable">pageLock</span> <span class="operator">=</span> getPageLock(pid);  </span><br><span class="line"><span class="keyword">synchronized</span>(pageLock)&#123;</span><br><span class="line"><span class="comment">// 是排他锁且不是同一个事务（如果是同一个事务直接放行）  </span></span><br><span class="line">    <span class="keyword">while</span>(pageLock.getLockState() == -<span class="number">1</span></span><br><span class="line">    &amp;&amp; !pageLock.holds.get(<span class="number">0</span>).equals(tid))&#123;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">pageLock.wait(<span class="number">10</span>);  <span class="comment">// 阻塞</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">&#125;    </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(pageLock.getLockState() &gt; <span class="number">0</span></span><br><span class="line"> &amp;&amp; pageLock.holds.contains(tid))&#123;  </span><br><span class="line">    <span class="comment">// 重入共享锁 - 不记录  </span></span><br><span class="line">    <span class="keyword">return</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 锁空闲、是共享锁、有排他申请共享，这几种都放行</span></span><br><span class="line"><span class="comment">// 获取到锁后，记录已获取状态  </span></span><br><span class="line">    pageLock.stateIncrement(<span class="number">1</span>); <span class="comment">// 共享数量+1</span></span><br><span class="line">    pageLock.holds.add(tid);  </span><br><span class="line">    addToLookups(tid, pid);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>申请排他锁</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireExclusiveLock</span><span class="params">(TransactionId tid, PageId pid)</span> <span class="keyword">throws</span> TransactionAbortedException &#123;  </span><br><span class="line">    <span class="type">PageLock</span> <span class="variable">pageLock</span> <span class="operator">=</span> getPageLock(pid);  </span><br><span class="line"><span class="keyword">synchronized</span>(pageLock)&#123;</span><br><span class="line"><span class="comment">// 只要锁不空闲，就不能获取排他锁（除非锁升级）</span></span><br><span class="line">    <span class="keyword">while</span>(pageLock.getLockState() != <span class="number">0</span>)&#123;  </span><br><span class="line">        <span class="comment">// 该事务已经获取了共享锁，且它独占  </span></span><br><span class="line">        <span class="keyword">if</span>(pageLock.getLockState() == <span class="number">1</span> </span><br><span class="line">        &amp;&amp; pageLock.holds.get(<span class="number">0</span>).equals(tid))&#123;  </span><br><span class="line">            <span class="comment">// 升级为排他锁 - 放行且不记录</span></span><br><span class="line">            pageLock.stateIncrement(-<span class="number">2</span>);  <span class="comment">// 此时lockState变-1</span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageLock.getLockState() == -<span class="number">1</span></span><br><span class="line">        &amp;&amp; pageLock.holds.get(<span class="number">0</span>).equals(tid))&#123;  </span><br><span class="line">            <span class="comment">// 该事务已经获取了排他锁，又重入 - 放行且不记录  </span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;          </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">// 否则阻塞</span></span><br><span class="line">            pageLock.wait(<span class="number">10</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取到锁后，记录已获取状态  </span></span><br><span class="line">    pageLock.stateIncrement(-<span class="number">1</span>);  </span><br><span class="line">    pageLock.holds.add(tid);  </span><br><span class="line">    addToLookups(tid, pid);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里直接在方法上加 synchronized 也是可行的，但是这样需要每次 notifyAll 所有阻塞的线程，针对性不强。因为每个页面有一个锁，不妨对 pageLock 加锁，这样每次只需 notify 一个阻塞在本页面的线程即可。注意后者需要在 wait 的时候设定等待超时时间，因为会出现别的线程先 notify 后，本线程才进入 wait 的情况，会永久阻塞下去，而设置超时时间后就会不停的循环判断锁条件。这是 wait/notify 方法的固有问题，如果想避免可以用 Semaphore 等其他工具。</p><p><strong>释放锁</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(TransactionId tid, PageId pid)</span>&#123; </span><br><span class="line"><span class="type">PageLock</span> <span class="variable">pageLock</span> <span class="operator">=</span> getPageLock(pid);  </span><br><span class="line"><span class="keyword">synchronized</span>(pageLock)&#123;</span><br><span class="line">pageLock.holds.remove(tid);  <span class="comment">// 从持有者中去除</span></span><br><span class="line">    removeFromLookups(tid, pid); <span class="comment">// 从查询表中去除</span></span><br><span class="line">    <span class="keyword">if</span>(pageLock.getLockState() == -<span class="number">1</span>) &#123;  </span><br><span class="line">    <span class="comment">// 如果当前为排他锁，更新为空闲</span></span><br><span class="line">        pageLock.stateIncrement(<span class="number">1</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pageLock.getLockState() &gt; <span class="number">0</span>)&#123; </span><br><span class="line">    <span class="comment">// 如果当前为共享锁，持有数-1</span></span><br><span class="line">        pageLock.stateIncrement(-<span class="number">1</span>);  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 当没有事务拿着锁了（空闲状态），或只有一个事务拿着锁（可能有锁升级不成功从而等待的情况）  </span></span><br><span class="line">    <span class="keyword">if</span>(pageLock.getLockState()==<span class="number">0</span>||pageLock.getLockState()==<span class="number">1</span>)&#123;  </span><br><span class="line">    <span class="comment">// 唤醒该页面阻塞的某个事务去竞争空闲锁或升级锁</span></span><br><span class="line">        pageLock.notify();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a>死锁检测</h4><p>检测死锁通常是通过事务之间的<strong>等待关系图</strong>是否有回路（循环等待）来判断，具体的方法有两种：</p><ol><li><strong>拓扑排序</strong>：反复寻找一个入度为 0 的顶点，将顶点从图中删除并同时删除它的所有出边，如果最终图中全部剩下入度为 1 的顶点，则图中有回路；如果最终全部顶点都被删除，则不包含回路。</li><li><strong>DFS</strong>：从所有的点开始进行深度优先搜索，如果一条 DFS 路线中有顶点被第二次访问到，则图中有回路，否则不包含回路。</li></ol><p>本实验采用 DFS 方法。</p><p>设计死锁检测器类 DeadlockDetector：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadlockDetector</span> &#123;  </span><br><span class="line">    <span class="comment">// 图的邻接表</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TransactionId, List&lt;TransactionId&gt;&gt; adjList;   </span><br><span class="line">    <span class="comment">// 顶点状态 - null/0:未访问，1:已访问，2:在递归栈内</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;TransactionId, Integer&gt; nodeState;   </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeadlockDetector</span><span class="params">()</span>&#123;  </span><br><span class="line">        adjList = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();  </span><br><span class="line">        nodeState = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 阻塞将要发生 - 进行记录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blockOccurs</span><span class="params">(TransactionId tid, List&lt;TransactionId&gt; listToWait)</span>&#123;  </span><br><span class="line">        adjList.put(tid, listToWait);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 事务被唤醒 - 删除记录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notified</span><span class="params">(TransactionId tid)</span>&#123;  </span><br><span class="line">        adjList.remove(tid);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// DFS检测是否有回路</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">detectCycle</span><span class="params">()</span>&#123;  </span><br><span class="line">        nodeState.clear();  </span><br><span class="line">        <span class="keyword">for</span>(TransactionId tid:adjList.keySet())&#123;  </span><br><span class="line">            <span class="keyword">if</span>(dfs(tid))&#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TransactionId tid)</span>&#123;  </span><br><span class="line">        nodeState.put(tid, <span class="number">2</span>); <span class="comment">// 标记入递归栈  </span></span><br><span class="line">        List&lt;TransactionId&gt; adj = adjList.get(tid);  </span><br><span class="line">        <span class="keyword">if</span>(adj != <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">for</span>(TransactionId t:adj)&#123;  </span><br><span class="line">                <span class="comment">// 跳过自反边的情况 - 单个锁升级等待不算死锁</span></span><br><span class="line">                <span class="keyword">if</span>(tid.equals(t)) <span class="keyword">continue</span>;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> nodeState.getOrDefault(t, <span class="number">0</span>);  </span><br><span class="line">                <span class="keyword">if</span>(state == <span class="number">2</span>)&#123;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 找到环  </span></span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state == <span class="number">0</span> &amp;&amp; dfs(t))&#123;   <span class="comment">// 递归</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 找到环  </span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        nodeState.put(tid, <span class="number">1</span>); <span class="comment">// 出递归栈，标记已访问  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了简便，不再设计顶点类，而是让每一个 TransactionId 代表自己的顶点，采用图的<strong>邻接表</strong>表示法。nodeState 记录 DFS 中顶点的状态。</p><p>每当发生一个阻塞就调用 <code>blockOccurs</code> 方法，因为是页面级的锁定，所以一个事务陷入阻塞后一定等待的是持有页面锁的所有事务，也就是 PageLock 里面 holds 列表所存储的事务。所以我们只需每次将 holds 传入第二个参数，当做该事务顶点的所有<strong>出边</strong>（表示等待）即可。当事务获得锁（或者发现死锁）后，调用 <code>notified</code> 方法删除该顶点的所有出边。</p><p>更新获取共享锁的代码如下（循环部分）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">while</span>(pageLock.getLockState() == -<span class="number">1</span> </span><br><span class="line">  &amp;&amp; !pageLock.holds.get(<span class="number">0</span>).equals(tid))&#123;  </span><br><span class="line">    deadlockDetector.blockOccurs(tid, pageLock.holds); <span class="comment">// 添加等待边 </span></span><br><span class="line">    <span class="keyword">if</span>(deadlockDetector.detectCycle())&#123; <span class="comment">// 检测到死锁  </span></span><br><span class="line">        deadlockDetector.notified(tid);  <span class="comment">// 移除等待边</span></span><br><span class="line">        <span class="comment">// 抛出异常，SimpleDB会abort该事务</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransactionAbortedException</span>(); </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">        pageLock.wait(<span class="number">10</span>);  </span><br><span class="line">        deadlockDetector.notified(tid);  <span class="comment">// 移除等待边</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>获取排他锁同理。</p><h3 id="DEBUG-记录"><a href="#DEBUG-记录" class="headerlink" title="DEBUG 记录"></a>DEBUG 记录</h3><ol><li>PageCache 中的 page 数量可能会小于 LockManger 中的 page 数量，所以在根据 LockManager 中的 Page 来 flush 的时候需要进行 null 判断。</li><li>在 Transaction system test 的 10 个线程测试中，出现了时而成功时而永久阻塞的情况。经过调试，<ol><li>发现是在 <code>flushAllPages()</code> 的循环里卡住；</li><li>发现 pageCache 返回的 Iterator 会不停的给出同一个 next 页面，死循环；</li><li>发现原因是自定义的双向链表尾结点 tail 丢失链接，导致无法停止遍历；</li><li>发现是没有注意线程安全的问题。在之前实现 LRUBasedPageCache 的时候没有使用 <code>ConcurrentHashMap</code> 类和 <code>synchronized</code> 关键字，导致并发问题，修改之后就没有问题了。</li></ol></li><li>多线程情况下，所有的 Map 都最好用 ConcurrentHashMap，List 最好用 CopyOnWriteArrayList，它们除了是线程安全的，还支持遍历时修改，不会报并发修改异常。</li><li>在实现死锁检测的时候要注意：当一个事务已经获取共享锁，又要升级为排他锁，此时如果共享数不为 1，那么就要阻塞，但这个时候就会出现自己等待自己的情况（<strong>等待图中体现为自反边</strong>），但这不是死锁（因为其他的共享锁事务在 release 时会进行唤醒，当共享数为 1 时就不继续等待了），<strong>不应该</strong>被识别。所以在 DFS 的时候要跳过自反边。</li></ol><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231018210912.png"/></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab4 是实现 SimpleDB 的并发事务系统，跟前面的内容相比较为复杂。&lt;/p&gt;
&lt;p&gt;一般来说数据库的事务需要满足 ACID 特性，即&lt;strong&gt;原子性、一致性、隔离性、持久性&lt;/strong&gt;。&lt;br&gt;&lt;strong&gt;原子性&lt;/strong&gt;就是该事务的所有操</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 3</title>
    <link href="https://zyrate.github.io/2023/09/27/Lab%203/"/>
    <id>https://zyrate.github.io/2023/09/27/Lab%203/</id>
    <published>2023-09-26T16:00:00.000Z</published>
    <updated>2023-11-23T14:39:17.810Z</updated>
    
    <content type="html"><![CDATA[<p>上一个 Lab 完成的是查询过程，Lab 3 的内容是查询优化（Query Optimization），主要完成两个部分，表统计信息 <strong>TableStats</strong> 和连接优化器 <strong>JoinOptimizer</strong>。</p><h3 id="Cost-模型"><a href="#Cost-模型" class="headerlink" title="Cost 模型"></a>Cost 模型</h3><p>在一次查询中，最耗时的部分就是<strong>多表 Join</strong>，然而采用不同的 Join 顺序的效率差别很大，这就需要进行优化了。本 Lab 基于成本（Cost）模型进行查询优化，分别关注<strong>scancost</strong> 和 <strong>joincost</strong>。</p><p>在 Lab 3 给出的说明文字中，关于 joincost 在 Cost 总述和嵌套 Join 的 Cost 处的含义<strong>有一些出入</strong>（一个不包含 scan，一个包含 scan），为了避免引起歧义，统一采用如下的描述：</p><ul><li>scancost 是扫描一个数据表所需要的时间，大部分由磁盘 I/O 消耗。</li><li>joincost 是连接两个数据表所需要的总时间，不同的连接方式计算公式不一样，它包含 scancost,由 I/O 和 CPU 消耗。</li></ul><p>scancost 的计算公式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scancost(t1) <span class="operator">=</span> num_pages(t1) <span class="operator">*</span> io_cost_per_page</span><br></pre></td></tr></table></figure><p>当我们采用嵌套循环连接时， joincost 的计算公式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">joincost(t1 <span class="keyword">join</span> t2) <span class="operator">=</span> scancost(t1) <span class="operator">+</span> ntups(t1) <span class="operator">*</span> scancost(t2) <span class="operator">/</span><span class="operator">/</span>IO cost</span><br><span class="line">                       <span class="operator">+</span> ntups(t1) <span class="operator">*</span> ntups(t2)  <span class="operator">/</span><span class="operator">/</span>CPU cost</span><br></pre></td></tr></table></figure><p>scancost 取决于硬件速度和表的大小，joincost 取决于 scancost 和表的连接<strong>基数（cardinality）</strong>（在上述公式是 ntups） ，基数取决于谓词的<strong>选择性（selectivity）</strong>，因此想要计算 joincost 就必须对每个表的选择性进行估计。</p><h3 id="过滤选择性（Filter-Selectivity）"><a href="#过滤选择性（Filter-Selectivity）" class="headerlink" title="过滤选择性（Filter Selectivity）"></a>过滤选择性（Filter Selectivity）</h3><p>谓词过滤选择性（范围0-1）指的是表中的元组通过过滤谓词的比例。选择性越大，表的基数越大，反之则越小。</p><p>在 SimpleDB 中，每个表会有一个 TableStats 对象，维护该表的<strong>统计信息</strong>，其中包含 scancost 估计和某个谓词对该表某一列的 selectivity 估计。<strong>连接优化器</strong>（JoinOptimizer）会调用 TableStats 的方法获取目标表的相关数据，根据公式计算连接 Cost，以确定一个最优的（代价最小的）连接顺序（查询计划）。</p><p>关键问题在于如何对 selectivity 进行估计。最常用的方法是使用<strong>直方图（Histogram）</strong>。</p><p>具体来说，就是对该表的每一列建立一个直方图，每个直方图将该列从最小值到最大值分成若干个区间，每一个区间记录了<strong>落在该区间</strong>的元组数量。这样，在面对一个谓词时，我们可以很快地计算出通过该谓词过滤的<strong>大致元组数量</strong>。示意图如下：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20231123212232.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><p>对于一个常量 const，假设它落到直方图某个区间的桶（bucket）高度为 h_b，宽度为 w_b，表中元组总数量为 ntups，那么：</p><ul><li>对于谓词 <code>f=const</code>，选择性估计公式为：<code>(h_b/w_b) / ntups</code>。</li><li>对于谓词 <code>f&gt;const</code>，如上图的情况所示，阴影部分就是通过谓词过滤的部分，它分为两部分：在桶 b 内的阴影部分、桶 b 右侧的所有桶。b 右侧的所有桶的选择性的计算公式都和 f=const 一样，最后进行累加即可；而对于桶 b 内阴影部分的选择性，计算公式为：<code>(h_b/ntups) / ((b_right-const)/w_b)</code>，这个公式假设在桶 b 内<strong>元组均匀分布</strong>。</li><li>对于谓词 <code>f&lt;const</code>，与上同理，对于桶 b 内阴影部分的选择性，计算公式为：<code>(h_b/ntups) / ((const-b_left)/w_b)</code>。</li><li>对于&gt;=谓词，只需要把&gt;和=的选择性相加即可，&lt;=同理。</li></ul><h3 id="IntHistogram-实现"><a href="#IntHistogram-实现" class="headerlink" title="IntHistogram 实现"></a>IntHistogram 实现</h3><p>要实现直方图，比较直观的方式是将每一个桶看做一个对象，这样在获取桶高和桶的左右边界时很方便。整个直方图就是一个桶数组。</p><p>首先新建一个内部类：<code>Bucket</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bucket</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> left;  <span class="comment">// 这里要用double，因为max-min可能很小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> right;  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> height;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bucket</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.height = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 填充该桶，高度+1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">populate</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.height++;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bucket 数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Bucket[] histData;</span><br></pre></td></tr></table></figure><p>实现选择性估计方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">estimateSelectivity</span><span class="params">(Predicate.Op op, <span class="type">int</span> v)</span> &#123;  </span><br><span class="line">    <span class="type">double</span> <span class="variable">selectivity</span> <span class="operator">=</span> -<span class="number">1.0</span>;  </span><br><span class="line">    <span class="comment">// 注意查询的值不一定在最大最小区间内  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 结构化、简化代码，减少出错  </span></span><br><span class="line">    <span class="keyword">switch</span> (op) &#123;  </span><br><span class="line">        <span class="keyword">case</span> EQUALS:  </span><br><span class="line">            selectivity = calculateEquals(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> GREATER_THAN:  </span><br><span class="line">        selectivity = <span class="number">1</span> - calculateLessThan(v) - calculateEquals(v);</span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> GREATER_THAN_OR_EQ:  </span><br><span class="line">            selectivity = <span class="number">1</span> - calculateLessThan(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> LESS_THAN:  </span><br><span class="line">            selectivity = calculateLessThan(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> LESS_THAN_OR_EQ:  </span><br><span class="line">            selectivity = calculateLessThan(v) + calculateEquals(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> NOT_EQUALS: <span class="comment">// 1 - Selectivity(=)  </span></span><br><span class="line">            selectivity = <span class="number">1</span> - calculateEquals(v);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> selectivity;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，把关键的计算过程封装成了其他函数，其实可以发现只需要实现<strong>等于</strong>和<strong>小于</strong>的选择性估计即可，其他的谓词都可以通过这两种推算出来。</p><p>估算等于的选择性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">double</span> <span class="title function_">calculateEquals</span><span class="params">(<span class="type">int</span> v)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> findBucketIndex(v);  </span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 这里必须要+1，杜绝零点几的桶宽出现  </span></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">double</span>) histData[i].height / (((<span class="type">int</span>)bWidth+<span class="number">1</span>) * ntups);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>估算小于的选择性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">double</span> <span class="title function_">calculateLessThan</span><span class="params">(<span class="type">int</span> v)</span>&#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> findBucketIndex(v);  </span><br><span class="line">    <span class="type">double</span> <span class="variable">selectivity</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123; <span class="comment">// 在最左侧  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(index == -<span class="number">2</span>)&#123; <span class="comment">// 在最右侧  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="comment">// 在区间内，先算桶内的部分  </span></span><br><span class="line">        selectivity = (<span class="type">double</span>) histData[index].height / ntups * (v - histData[index].left) / bWidth;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 在算桶外的部分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;index; i++)&#123;  </span><br><span class="line">        selectivity += (<span class="type">double</span>) histData[i].height / ntups;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> selectivity;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一个 Lab 完成的是查询过程，Lab 3 的内容是查询优化（Query Optimization），主要完成两个部分，表统计信息 &lt;strong&gt;TableStats&lt;/strong&gt; 和连接优化器 &lt;strong&gt;JoinOptimizer&lt;/strong&gt;。&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 2</title>
    <link href="https://zyrate.github.io/2023/09/08/Lab%202/"/>
    <id>https://zyrate.github.io/2023/09/08/Lab%202/</id>
    <published>2023-09-07T16:00:00.000Z</published>
    <updated>2023-11-23T14:39:03.952Z</updated>
    
    <content type="html"><![CDATA[<p>Lab 2 和 Lab 3 都与数据库的查询过程有关，在执行查询的过程中会先后生成<strong>LogicalPlan</strong>和<strong>PhysicalPlan</strong>。逻辑计划由一系列的逻辑算子结点列表组成，它保存了需要进行 Scan、Join、Filter 等操作的表名、列名、谓词等信息。由逻辑计划生成的物理计划其实就是一系列物理算子嵌套形成的结点树。</p><h3 id="火山模型"><a href="#火山模型" class="headerlink" title="火山模型"></a>火山模型</h3><p>SimpleDB 采用的是最经典且最广泛使用的查询模型：<strong>火山模型（Volcano）</strong>，也叫<strong>流水线模型（Pipeline</strong>）。</p><p>该模型要求：每一个物理计划算子（Operator）都要实现 <code>next()</code> 方法，在该方法中，循环调用它的 child 算子的 next 方法以获取元组并进行数据处理，根据本算子的逻辑返回给<strong>父算子</strong>一个元组。直到 child 没有元组可获取，则返回 null。因此数据是从最底层数据表，一层一层的经过中间算子的处理、过滤，被传递到顶层的客户端的，因此被形象地叫做“火山模型”。而“流水线”的意思是，每当父算子调用 child 的 next 方法后，如果它想调用下一次 next，就只能等待这一次获取的数据经过物理计划自底向上的“流水线算子”的处理直至“涌出”，这期间父算子无法做其他事情。</p><p>火山模型的<strong>优点</strong>是每一层的算子只需要无脑从子算子获取元组，并根据自己的逻辑考虑如何返回元组给父算子，而不需要关心父算子和子算子具体的逻辑和实现。</p><p>在 SimpleDB 中，最顶层的算子是 Project（投影），它负责把所有的结果元组按照查询要求只显示指定的 Field 列；最底层的算子是 SeqScan（顺序扫），它负责从指定的数据表中一行一行的顺序读取元组；在这两者之间的算子有：Aggregate, Filter, Join, OrderBy, Insert, Delete 等。其中 Insert 和 Delete 比较特殊，因为他们不从数据表读取数据，而是从要插入或删除的元组集合中读取数据。</p><hr><p>Lab2 总共有 5 个 exercise，主要练习了与执行计划相关的各种 execution 操作。比如过滤、连接、聚合、插入、删除等操作。每一个操作算子都继承了 <code>Operator</code>（OpIterator）类，它们会：</p><ul><li>接受一个 child <code>OpIterator</code>，用以读取（遍历）目标数据；</li><li>接受一些控制该算子的参数；</li><li>同时实现 <code>hasNext()</code>、<code>next()</code> 等供外界遍历的方法。</li></ul><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><hr><ul><li>src/java/simpledb/execution/Predicate.java</li><li>src/java/simpledb/execution/JoinPredicate.java</li><li>src/java/simpledb/execution/Filter.java</li><li>src/java/simpledb/execution/Join.java</li></ul><hr><p>谓词和连接谓词的作用是根据指定的 <strong>field 、操作符和操作数</strong>来判断某一个 Tuple 是否需要过滤。而 <code>Filter</code> 和 <code>Join</code> 算子则遍历 child 数据，利用上述谓词来进行来进行过滤，返回留下来的 Tuple。实现起来比较简单。</p><p>这里有个注意的点是，每个实现了 <code>Operator</code> 的算子都要重写 <code>getTupleDesc()</code> 方法，生成该算子每次 <code>next()</code> 后返回的元组结构描述。比如 Join 算子返回的是两个元组合并后的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TupleDesc <span class="title function_">getTupleDesc</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2"></a>Exercise 2</h3><hr><ul><li>src/java/simpledb/execution/IntegerAggregator.java</li><li>src/java/simpledb/execution/StringAggregator.java</li><li>src/java/simpledb/execution/Aggregate.java</li></ul><hr><p><code>IntegerAggregater</code> 和 <code>StringAggregator</code> 是具体类型的聚合器，它们的作用是在聚合算子 <code>Aggregate</code> 遍历表的过程中<strong>统计分组（group）信息</strong>并得到最终聚合结果。Integer 类型有五种基本聚合操作：MIN, MAX, SUM, AVG, COUNT，而 String 类型只有 COUNT 一种。不同的聚合操作进行不同的计算即可。</p><h3 id="Exercise-3-4"><a href="#Exercise-3-4" class="headerlink" title="Exercise 3, 4"></a>Exercise 3, 4</h3><hr><ul><li>src/java/simpledb/storage/HeapPage.java</li><li>src/java/simpledb/storage/HeapFile.java</li><li>src/simpledb/BufferPool.java<ul><li>insertTuple()</li><li>deleteTuple()</li></ul></li><li>src/java/simpledb/execution/Insert.java</li><li>src/java/simpledb/execution/Delete.java</li></ul><hr><p>练习 3 和练习 4 要求实现 HeapFile 和 HeapPage 的可变性，即可以随时插入、删除元组，并且实现 <code>Insert</code> 和 <code>Delete</code> 算子。</p><p>首先，向 HeapPage 中插入元组需要根据 header 标志位找到一个空闲 slot，在插入后（数组赋值）header 对应位置标志为 1；删除元组则反之。因为 header 使用 byte 数组存储的，所以需要一定算法将对应 byte 取出更改某一位值后再放回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">markSlotUsed</span><span class="params">(<span class="type">int</span> i, <span class="type">boolean</span> value)</span> &#123;</span><br><span class="line"><span class="type">byte</span> <span class="variable">markBit</span> <span class="operator">=</span> value?(<span class="type">byte</span>)<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">oldByte</span> <span class="operator">=</span> header[i/<span class="number">8</span>];</span><br><span class="line"><span class="type">byte</span> <span class="variable">newByte</span> <span class="operator">=</span> (<span class="type">byte</span>) <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> pos=<span class="number">7</span>; pos&gt;=<span class="number">0</span>; pos--)&#123; <span class="comment">// 这里注意顺序</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">originBit</span> <span class="operator">=</span> (<span class="type">byte</span>) (oldByte &gt;&gt; pos &amp; <span class="number">1</span>); <span class="comment">// 不变的bit</span></span><br><span class="line"><span class="keyword">if</span>(pos == i%<span class="number">8</span>)&#123; <span class="comment">// 到了要设置的bit</span></span><br><span class="line">newByte |= markBit;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">newByte |= originBit;</span><br><span class="line">&#125;</span><br><span class="line">newByte &lt;&lt;= pos!=<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>; <span class="comment">// 除了最后一位，填充后左移</span></span><br><span class="line">&#125;</span><br><span class="line">header[i/<span class="number">8</span>] = newByte;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HeapFile 的插入方法需要遍历所有的 HeapPage，判断页面是否有空闲 slot，如果有的话，调用该页的 insert 方法，如果所有页面都无空闲，就要新建一个页面再行插入。</p><p>而最终所有的应用程序在插入元组时，是调用 BufferPool 的方法。BufferPool 调用 HeapFile 的 insert 方法，接收一个 Page 列表，存储所有被影响的页面（如果不考虑副本的话只有 1 个页面）。这些页面就是所谓的<strong>脏页（dirty page）</strong>，即在缓存中发生了改动但还没有同步到硬盘中的页面。BufferPool 需要将这些页面标记为“脏页”。</p><p>BufferPool、HeapFile、HeapPage 之间<strong>必须遵循</strong>固定的调用关系：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20230715113426.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><h3 id="Exercise-5"><a href="#Exercise-5" class="headerlink" title="Exercise 5"></a>Exercise 5</h3><hr><ul><li>src/java/simpledb/storage/BufferPool.java<ul><li>evictPage()</li></ul></li></ul><hr><p>练习 5 要求在缓冲区满了以后实现<strong>页面置换算法</strong>。因为之前没有考虑这个功能所以 <code>getPage()</code> 方法要重新写。</p><p>最常见的置换算法是 LRU（最近最久未使用算法），实现它可以用一个 List，每次访问一个页面就把它放到表头，这样需要同置换时，表尾的页面就是最近最久未使用的，直接逐出。然而仅仅用一个 List，在访问页面时还需要遍历查找，不如 HashMap 高效，但是仅仅用 HashMap 又无法实现算法要求。</p><p>所以我将两者结合，自定义了一个 PageCache 接口和 LRUBasedCache 实现类，手动实现双向链表，结合 HashMap，实现了 O(1) 复杂度 GET、PUT 操作和灵活置换的 LRU 算法。</p><p>页面缓存接口 <code>PageCache</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PageCache</span> &#123;  </span><br><span class="line"><span class="comment">// 向缓存中添加页面</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">putPage</span><span class="params">(Page page)</span>;  </span><br><span class="line">    <span class="comment">// 系统内部获取页面 - LRU不生效</span></span><br><span class="line">    Page <span class="title function_">getPage</span><span class="params">(PageId pid)</span>;  </span><br><span class="line">    <span class="comment">// 外部（事务）获取页面 - LRU生效</span></span><br><span class="line">    Page <span class="title function_">accessPage</span><span class="params">(PageId pid)</span>; </span><br><span class="line">    <span class="comment">// 从缓存中删除页面 </span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removePage</span><span class="params">(PageId pid)</span>;  </span><br><span class="line">    <span class="comment">// 缓存是否已满</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 下一个要被置换的页面PID  </span></span><br><span class="line">    PageId <span class="title function_">pidToBeEvicted</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 置换页面（删除）</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">evictPage</span><span class="params">()</span>;  </span><br><span class="line">    <span class="comment">// 页面迭代器</span></span><br><span class="line">    Iterator&lt;Page&gt; <span class="title function_">iterator</span><span class="params">()</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类 <code>LRUBasedCache</code> 主要就是维护一个双向链表和一个 PageId 到链表节点的映射，然后在 accessPage 的时候实现 LRU 规则（将被访问的节点向链表头移动）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUBasedCache</span> <span class="keyword">implements</span> <span class="title class_">PageCache</span>&#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 双向链表结点  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;  </span><br><span class="line">        Page page;  </span><br><span class="line">        Node pre;  </span><br><span class="line">        Node next;  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Page page)</span>&#123;  </span><br><span class="line">            <span class="built_in">this</span>.page = page;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;  </span><br><span class="line"><span class="keyword">private</span> Map&lt;PageId, Node&gt; map;  </span><br><span class="line"><span class="keyword">private</span> Node head;  </span><br><span class="line"><span class="keyword">private</span> Node tail;</span><br><span class="line">...</span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Page <span class="title function_">accessPage</span><span class="params">(PageId pid)</span> &#123;  </span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(pid);  </span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    moveToHead(node); <span class="comment">// LRU算法 - 向链表头部移动  </span></span><br><span class="line">    <span class="keyword">return</span> node.page;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> PageId <span class="title function_">pidToBeEvicted</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> tail.pre;  </span><br><span class="line">    <span class="keyword">while</span>(n != head)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(n.page.isDirty() != <span class="literal">null</span>)&#123; <span class="comment">// 确保不是脏页（no-steal规则）  </span></span><br><span class="line">            n = n.pre;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> n==head?<span class="literal">null</span>:n.page.getId(); <span class="comment">// 返回null代表全都是脏页  </span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Lab 2 和 Lab 3 都与数据库的查询过程有关，在执行查询的过程中会先后生成&lt;strong&gt;LogicalPlan&lt;/strong&gt;和&lt;strong&gt;PhysicalPlan&lt;/strong&gt;。逻辑计划由一系列的逻辑算子结点列表组成，它保存了需要进行 Scan、Joi</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MIT6.830 SimpleDB 实现笔记 Lab 1</title>
    <link href="https://zyrate.github.io/2023/08/09/Lab%201/"/>
    <id>https://zyrate.github.io/2023/08/09/Lab%201/</id>
    <published>2023-08-08T16:00:00.000Z</published>
    <updated>2023-11-23T14:38:48.294Z</updated>
    
    <content type="html"><![CDATA[<p>6.830 是 MIT 的一门数据库课程，它的 Lab 是用 Java 写一个简易的数据库 SimpleDB。</p><p>Lab1 总共有 6 个 exercise，主要是练习的是数据库的数据存储部分。</p><h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise 1"></a>Exercise 1</h3><hr><ul><li><code>src/java/simpledb/storage/TupleDesc.java</code></li><li><code>src/java/simpledb/storage/Tuple.java</code></li></ul><hr><p>在 SimpleDB 中，<strong>逻辑上</strong>的存储单元由大到小分别是 <strong>Database -&gt; Table -&gt; Tuple -&gt; Field</strong>。一个表中的每一条记录就是一个 Tuple 元组对象，元组中的每一列是一个 Field 字段值，目前只实现了 Int 和 String（固定长度）类型。</p><p>每个元组需要一个 TupleDesc 对象来描述该元组包含的所有字段，包括每个字段类型 <code>fieldType</code> 和字段名 <code>fieldName</code>，在 SimpleDB 中由 TDItem 对象存储。</p><blockquote><p>在实现 TupleDesc 的 toString() 方法时，发现了一个显而易见但之前没注意到的问题：集合每次在调用 iterator() 方法时都会生成一个新的 Iterator，所以不能反复调用此方法。另外 <code>for-each</code> 语句不能用于 Iterator，只能用于数组或实现了 Iterable 接口的对象。</p></blockquote><h3 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise 2"></a>Exercise 2</h3><hr><ul><li><code>src/java/simpledb/common/Catalog.java</code></li></ul><hr><p>Catalog 是管理数据库所有表的单例对象，比较简单。</p><ul><li>主要实现了供外界调用的 addTable、getTableName 等方法</li><li>在 SimpleDB 中，<strong>一个 Table 对应一个 DbFile</strong>，并且共享同一个 ID（DbFile 绝对路径的 hashcode）</li><li>这里的 HashMap 用并发安全的比较好</li></ul><h3 id="Exercise-3"><a href="#Exercise-3" class="headerlink" title="Exercise 3"></a>Exercise 3</h3><hr><ul><li><code>src/java/simpledb/storage/BufferPool.java</code><ul><li>实现 <code>getPage()</code> 方法</li></ul></li></ul><hr><p>BufferPool 也是一个全局单例对象，它负责维护访问页面 Page 的缓存。<br>关于页面，有三个容易混淆的概念：</p><ol><li>硬盘中的页面（也可以叫块 block）</li><li>操作系统中的页面</li><li>数据库中的页面<br>Page 是数据库向硬盘中读取和写入一次数据的最小单位，一般来说数据库的页面比底层的页面要大一些，所以需要我们自己写一些逻辑来保证操作的原子性（暂时不需要）。</li></ol><p>每次通过 PageId（存储 tableId 和 pageNo）来获取页面。首先查找缓存，没有的话就通过 Catalog 获取 DbFile 读取页面并加入缓存。如果缓存占满，就要进行页面置换（暂时不需要）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page <span class="title function_">getPage</span><span class="params">(TransactionId tid, PageId pid, Permissions perm)</span></span><br><span class="line"><span class="keyword">throws</span> TransactionAbortedException, DbException &#123;</span><br><span class="line"><span class="type">Page</span> <span class="variable">res</span> <span class="operator">=</span> idToPage.get(pid);</span><br><span class="line"><span class="keyword">if</span>(res == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Catalog</span> <span class="variable">catalog</span> <span class="operator">=</span> Database.getCatalog();</span><br><span class="line"><span class="type">DbFile</span> <span class="variable">f</span> <span class="operator">=</span> catalog.getDatabaseFile(pid.getTableId());</span><br><span class="line">res = f.readPage(pid);</span><br><span class="line">idToPage.put(pid, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exercise-4"><a href="#Exercise-4" class="headerlink" title="Exercise 4"></a>Exercise 4</h3><hr><ul><li><code>src/java/simpledb/storage/HeapPageId.java</code> （继承自 PageId）</li><li><code>src/java/simpledb/storage/RecordId.java</code></li><li><code>src/java/simpledb/storage/HeapPage.java</code> （继承自 Page）</li></ul><hr><p>前两个 Id 对象主要就是 <code>hashcode()</code> 和 <code>equals()</code> 方法的编写，注意：</p><blockquote><p>在重写一个类的 <code>equals</code> 方法的时候，必须同时重写 <code>hashCode</code> 方法。否则的话，在使用需要判断 hash 值的数据结构（如 HashMap）进行存储时就会出现问题。<strong>要求：</strong> equals 为 true 时 hashCode 一定为 true；hashCode 为 true 时，equals 不一定为 true。</p></blockquote><p>HeapPage 是实际存储在缓存中的页面（从硬盘读取到内存），它主要包含头部 header 标志位和一个固定长度的 tuple 数组（slots），结构示意图如下：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://picgo-1259339555.cos.ap-nanjing.myqcloud.com/20230705211424.png"/></div></div><p>页面中的 slot（插槽）有几个，header 就有几位，当一个元组插入 slot 后，header 对应位置设置为 1，删除元组则反之。在 SimpleDB 中，一个 table 的 TupleDesc 确定下来后，tuple 的长度就是固定的，因此可以<strong>计算出</strong>该页面可以有多少个 slot，用于初始化 header 和数组。</p><p>计算 slot 个数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getNumTuples</span><span class="params">()</span> &#123;        </span><br><span class="line"><span class="comment">// 每个页面可存储的元组数计算公式（大小单位是字节）：</span></span><br><span class="line"><span class="comment">// 页面大小 * 8 / (元组大小 * 8 + 1)，向下取整</span></span><br><span class="line"><span class="type">int</span> <span class="variable">numTuples</span> <span class="operator">=</span> BufferPool.getPageSize()*<span class="number">8</span> / (td.getSize()*<span class="number">8</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> numTuples;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>+1 是因为每个元组要附带一个标志位。</p><p>计算 header 大小（字节），多余的 0 位不考虑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHeaderSize</span><span class="params">()</span> &#123;        </span><br><span class="line"><span class="comment">// Header要存储numSlots个bit，计算所需的bytes</span></span><br><span class="line"><span class="type">int</span> <span class="variable">headerSize</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil(numSlots / <span class="number">8.0</span>); <span class="comment">// 向上取整</span></span><br><span class="line"><span class="keyword">return</span> headerSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HeapPage 在初始化时接受一个 pageId 和从硬盘读入的序列化后的 byte 数组进行<strong>反序列化</strong>，相反，<code>getPageData</code> 方法将该页面序列化以存入硬盘。</p><p>需要实现 <code>isSlotUsed()</code> 方法，该方法返回某个 slot 是否插入了元组。检查 header 对应位置的标志位是否为 1 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSlotUsed</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="comment">// 注意规定了从每个byte从右到左（low to high）</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">slot</span> <span class="operator">=</span> (<span class="type">byte</span>) ((header[i/<span class="number">8</span>] &gt;&gt; (i%<span class="number">8</span>)) &amp; <span class="number">1</span>); </span><br><span class="line"><span class="keyword">return</span> slot == (<span class="type">byte</span>)<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exercise-5"><a href="#Exercise-5" class="headerlink" title="Exercise 5"></a>Exercise 5</h3><hr><ul><li><code>src/java/simpledb/storage/HeapFile.java</code> （继承自 DbFile）</li></ul><hr><p>HeapFile 对应一个表在硬盘中存储的文件，存储的单位是 HeapPage，所以主要是实现 <code>readPage()</code> 方法，它接受 pageId，需要找到对应 Page 在文件中的偏移量读取出来。一定要用文件随机读取，而不能一次性全部读到内存中，因为文件可能会很大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Page <span class="title function_">readPage</span><span class="params">(PageId pid)</span> &#123;</span><br><span class="line"><span class="comment">// 找到对应Page所在的偏移量，读取后生成HeapPage</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> BufferPool.getPageSize();</span><br><span class="line"><span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> pid.getPageNumber() * pageSize;</span><br><span class="line"><span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[pageSize];</span><br><span class="line"><span class="type">Page</span> <span class="variable">heapPage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(file, <span class="string">&quot;r&quot;</span>)) &#123;</span><br><span class="line">f.seek(offset);</span><br><span class="line">f.read(data);</span><br><span class="line">heapPage = <span class="keyword">new</span> <span class="title class_">HeapPage</span>((HeapPageId)pid, data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> heapPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外的一个难点是实现 <code>iterator()</code> 方法，它的功能是遍历该表（DbFile）中的所有元组。那么就需要我们遍历 HeapFile 的所有 HeapPage，过程中使用 HeapPage 的 Iterator 来遍历元组。<br>但是上面实现的 <code>readPage()</code> 方法是给 BufferPool 调用的，因为所有的页面读取都要经过缓存。所以我们需要调用 BufferPool 的 <code>getPage()</code> 方法来获取页面，从 <code>pageNo = 0</code> 开始累加，直到到达该文件所存储的页面数量的上限，是在 <code>numPages()</code> 里计算得到的（文件大小除以 PageSize）。</p><h3 id="Exercise-6"><a href="#Exercise-6" class="headerlink" title="Exercise 6"></a>Exercise 6</h3><hr><ul><li><code>src/java/simpledb/execution/SeqScan.java</code> （实现 OpIterator）</li></ul><hr><p>Operator 是执行计划的基本单位，最简单、最底层的一个 Operator 就是 <strong>SeqScan</strong>，按照存储顺序扫描某一个表的全部元组。</p><p>这里主要添加了表的<strong>别名 alias</strong>的概念，我们需要生成一个 <code>tableAlias.filedName</code> 形式的 TupleDesc 以供后续使用。</p><p>实现 OpIterator 接口的全部方法，主要是调用 HeapFile 里的 Iterator 的相应方法。</p><blockquote><p>详细的数据库查询模型在下一个 Lab 总结。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;6.830 是 MIT 的一门数据库课程，它的 Lab 是用 Java 写一个简易的数据库 SimpleDB。&lt;/p&gt;
&lt;p&gt;Lab1 总共有 6 个 exercise，主要是练习的是数据库的数据存储部分。&lt;/p&gt;
&lt;h3 id=&quot;Exercise-1&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RDD分区与并行计算</title>
    <link href="https://zyrate.github.io/2023/03/28/RDD%E5%88%86%E5%8C%BA%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    <id>https://zyrate.github.io/2023/03/28/RDD%E5%88%86%E5%8C%BA%E4%B8%8E%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/</id>
    <published>2023-03-27T16:00:00.000Z</published>
    <updated>2023-11-23T14:38:28.722Z</updated>
    
    <content type="html"><![CDATA[<p>分区应该是 Spark 中最基础、最核心的概念了，首先搞要清楚为什么要分区。不分区，分布式并行计算就无从谈起。其实哪怕不是分布式，就是如今在一台电脑上 8 个核心也都是标配了，如果把所有的计算任务全都交给一个核心处理便是对硬件资源的极度浪费，效率也十分低下。而要想不浪费，就要采用 <strong>并行计算</strong> ，让每一个核心处理一部分任务。而不同的计算需要独立的上下文环境，这就引入了 <strong>分区</strong> 的概念。每个分区拥有自己的数据和计算函数，当所有的分区计算完毕后，再将它们的结果合并输出。<br>Spark RDD 在逻辑上实现了以上的分区概念。</p><p>第一，在 Spark 中几乎所有功能的数据操作都是以 RDD 为单位的（当然还有累加器和广播变量，但是它们都有固定的应用场景），所以它可以看做在 Spark 中的一个“万能数据集”，不论什么数据都能往里面放，不论在哪个场景都可以用，首先明确这一点（其实是为了打破初学者对它的陌生感）。</p><p>第二，所谓分区（Partition），简单来讲就是 RDD 在内部将数据分成的不同 <strong>切片</strong> ，从不同的数据源读取数据会按照不同的方式进行切片，因此不同的数据源往往会对应不同类型的 RDD 实现类，而每个 RDD 实现都有一个独立的 Partition 实现类来处理数据。在 Partition 实现类中，会用不同的方法存储实实在在的数据。不过这里要搞清楚，RDD 是惰性计算的，只有在执行行动算子后，数据才会在各种不同的 RDD 分区中 <em>计算、接收、传递</em> ，并不做停留。因此我的理解是，每个 RDD 分区调用它所 <em>依赖的上一级</em>  RDD 的对应的分区计算方法，获得新的分区数据，这本质是一个 <strong>链式调用</strong> 。这样行动算子会触发数据从读取到一步步计算的链式调用，最终获得计算结果，可以看做分区是固定的，数据一直在变化。</p><p>由上所知，在没有发生 Shuffle 的时候，分区数量不变，不同分区之间的计算是 <strong>平行的</strong> ，互不干扰，谁快一点谁慢一点都无所谓，重点是它们在同时计算，这就是并行计算。而在遇到了像 groupByKey、orderBy 这样的需要打乱原有数据的方法，分区之间不可能再相安无事了，它们需要相互交换数据，即进行 Shuffle。Shuffle 操作需要数据 <strong>落盘</strong> 因此十分低效。而当发生 <strong>数据倾斜</strong> 时，Shuffle 又能够有效地保证计算的 <strong>负载均衡</strong> 。</p><p>第三，RDD 在逻辑上实现了分区，而在集群上实际的计算如何实现的呢？这就要提到 RDD 的任务执行单位：Job、Stage、Task。简单来说，Job 对应一个行动算子，它内部通过 RDD <strong>谱系图</strong> 划分 Stage，通常是遇到一个 Shuffle 操作会生成一个新的 Stage。每个 Stage 根据 RDD 的分区数目生成 Task，一个 Task 对应一个分区。注意 Task 运行的结果是目标 RDD 的一个分区，而不是相反。前两个仍然是逻辑上的，真正可以运行的是 Task。Task 是在 Executor 上运行的，每一个物理节点可以起一个或多个 Executor。</p><p>所以最终的运行模型是：Driver 端（就是写 Spark 程序的地方）生成 SparkContext 作为和 Spark 框架连接的入口，它会进行 DAG 图构建、Stage 划分、Task 生成等一系列操作，这些操作是在一个节点完成的。而封装好的 Task 会发送给 Yarn 等调度器进行调度，可能会根据 “计算向数据移动” 等准则分发给不同的节点的 Executor，从而进行计算。</p><p><em><strong>知识点：</strong></em></p><ol><li>RDD 计算时（行动算子）在 <strong>一个分区</strong> 内是一个一个数据根据谱系图执行逻辑，即前面一个数据的逻辑全部执行完毕后才轮到下一个数据。分区内部的数据执行是 <strong>有序的</strong> ，不同分区之间的数据执行是 <strong>无序的</strong> 。</li><li>MapPartitions 可以以分区为单位进行数据转换操作，但是会将整个分区的数据加载到内存中进行引用，容易出现内存溢出。</li><li><strong>窄依赖：</strong> 如果新生成的 child RDD 中每个分区都依赖 parent RDD 中的一部分分区，那么这个分区依赖关系被称为 NarrowDependency。</li><li><strong>宽依赖：</strong> 表示新生成的 child RDD 中的分区依赖 parent RDD 中的每个分区的一部分。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分区应该是 Spark 中最基础、最核心的概念了，首先搞要清楚为什么要分区。不分区，分布式并行计算就无从谈起。其实哪怕不是分布式，就是如今在一台电脑上 8 个核心也都是标配了，如果把所有的计算任务全都交给一个核心处理便是对硬件资源的极度浪费，效率也十分低下。而要想不浪费，就</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据可视化</title>
    <link href="https://zyrate.github.io/2023/03/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://zyrate.github.io/2023/03/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</id>
    <published>2023-03-09T16:00:00.000Z</published>
    <updated>2023-11-23T14:38:14.527Z</updated>
    
    <content type="html"><![CDATA[<p>生活中数据可视化无处不在，以前都会有意无意地进行过可视化的工作，但是通过专业化的分析和方法设计出的结果会更能达到可视化的目的，设计过程也会更加得心应手。另外数据可视化有时候并不只是数据的展现，还包含着数据的挖掘。比如看到一批数据，从不同的角度和考量进行可视化可能会从中挖掘出不同的信息。</p><blockquote><p>本文是北京大学袁晓如老师《数据可视化》课程的学习笔记<br>链接：<a href="http://www.chinesemooc.org/mooc/5033">数据可视化 - 华文慕课 - 中文MOOC平台 (chinesemooc.org)</a></p></blockquote><h2 id="第-1-章概念"><a href="#第-1-章概念" class="headerlink" title="第 1 章概念"></a>第 1 章概念</h2><ol><li><p><strong>数据可视化</strong>就是把一些复杂的数据转化成人们能够直接看到并理解的图形或图像，有利于我们更快地识别特征，发现知识。基于计算机的可视化系统通过对数据的视觉表达形式来帮助人们更有效地完成特定任务。</p></li><li><p>不同的领域、不同的任务、不同的受众的可视化构型是不同的，要做合理、有效的选择。</p></li><li><p>要考虑计算限制、人类限制、显示限制</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一章讲述了可视化的概念、构型和案例，其中构型的选择非常重要，需要考虑不同的领域、任务、受众和限制因素，要在多对矛盾中进行权衡。</p><h2 id="第-2-章数据类型"><a href="#第-2-章数据类型" class="headerlink" title="第 2 章数据类型"></a>第 2 章数据类型</h2><ol><li>数据集类型<ol><li>结构化数据：已知数据类型、语义<ol><li>表格（Tables）</li><li>网络（Networks）</li><li>场（Fields）</li><li>空间/几何（Spatial/Geometry）</li><li>多维表（Multidimensional Table）</li><li>树形（Trees）</li></ol></li><li>非结构化数据：没有预定的数据模型，如文字、视频、图像。需要转化为结构化数据（NPL、文本挖掘）</li></ol></li><li>数据类型：数据项、链接、属性、位置、网格</li><li>属性类型：<strong>定类型、定序型、定量型</strong>。不同的属性需要用不同的通道表示。看到一个可视化就分析有什么属性，看到属性就要想是什么类型。 </li><li>表达力和有效性：服从<strong>一致性</strong>和<strong>重要性排序</strong>原则，一致性是指，视觉变量和数据属性应该匹配。</li><li>2.7 的设计案例有启发意义。</li></ol><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>这一章主要介绍了各类数据集合数据的类型，目的是强调在可视化过程中，对属性类型的分析是十分重要的，不同类型的属性需要考虑不同的可视化方法，这决定着最后的呈现效果（千差万别）。要培养分析数据属性的思维。</p><h2 id="第-3-章数据编码（具体步骤）"><a href="#第-3-章数据编码（具体步骤）" class="headerlink" title="第 3 章数据编码（具体步骤）"></a>第 3 章数据编码（具体步骤）</h2><ol><li>符号和通道<ul><li>符号标记（Marks）：如用<strong>圆点</strong>和<strong>直线</strong>代表数据项和连接<ul><li>点、线、面，（包含、连接、嵌套）</li></ul></li><li>视觉通道（Channels）：符号标记的表现形式，如圆点的<strong>颜色</strong><ul><li>分为以下两个类型，顺序代表<strong>有效性从高到低</strong></li><li>&lt;定类型&gt; ：空间区域、颜色、运动模式、形状</li><li>&lt;定序定量型&gt; ：位置、长度、倾斜度、面积、深度、亮度/饱和度、弧度、体积</li></ul></li></ul></li><li>考虑视觉通道的五个属性：选择性、关联性、量化性、可序性、容量</li><li>史蒂文心理物理强度定律：强度由高到低：饱和度、长度、面积、深度、亮度，感官测试：<a href="https://woodgears.ca/eyeball/">The eyeballing game (woodgears.ca)</a></li><li>不同类别应该采取的通道排序：<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/8SkCzbviuNQWj35.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>直观地感受了各类视觉通道的差异和优缺点，在可视化的时候首先要选择正确的符号和通道，让人们有对数据更加准确的感受。</p><h2 id="第-4-章可视化任务与分析"><a href="#第-4-章可视化任务与分析" class="headerlink" title="第 4 章可视化任务与分析"></a>第 4 章可视化任务与分析</h2><ol><li>分析三要素：<ol><li>对象：判断第二章所述的数据类型和属性类型</li><li>手段：将第三章所述进行实践</li><li>目的：考虑用户需求（什么样的用户）</li></ol></li><li>可视化任务抽象。不同的可视化有不同的任务，这里的任务（功能）是从用户的角度出发，<strong>用户为什么需要可视化</strong>，该可视化想要用户得到什么信息。要识别任务-数据组合，寻找可能的解决方案。即分析三要素中的<strong>目的</strong>（行动和对象），行动有以下三个层次（由高到低）：分析、搜索、查询。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/Dd7CyGo5XbQUEAk.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/AoXZgrEcu6ORUeT.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol><ol start="3"><li><p>分析三要素中的<strong>对象</strong>，对于不同的对象关心不同的特点：</p><div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/tH94MIVyqC58KGx.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li><p>分析三要素中的<strong>手段</strong>，考虑可视化构型：<em>视觉编码</em>、<em>交互</em>。（后面讲）</p></li><li><p>可视化设计验证四层模型：<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/lU1xgsmKn2AjZTb.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div> 所谓问题导向就是某个领域的某个问题需要可视化，这时四层模型<strong>从外到内</strong>进行工作。所谓技术导向就是某个新型的可视化技术出现了，<strong>从内到外</strong>去寻找可以可视化那些领域问题。</p></li><li><p>详细学习 4.5 可视化案例。</p></li></ol><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>讲述了可视化过程中需要完成哪些分析工作，有哪些要素。从一个顶层抽象的角度阐述了可视化的整个流程。</p><h2 id="第-5-章交互"><a href="#第-5-章交互" class="headerlink" title="第 5 章交互"></a>第 5 章交互</h2><ol><li>视图操纵的方法<ol><li>视图随时间变化<ol><li>重新编码，对于对象</li><li>调整参数，不同的小控件（滑块、按钮等）</li><li>调整布局、顺序，What、How、Why</li><li>重排，对复杂的表格不同的维度（Table Lens）/ 平行坐标</li><li>调整对齐方式，堆叠柱形图</li><li>过渡动画，在两个状态间做插值平滑</li></ol></li><li>视图分面（Facet）<ol><li>并置视图（重要）：把两个图放在一起关联 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/zoqn3aKpRDtSIZk.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div>，<strong>动态查询</strong>是一个经典的例子，快速、增量式和可逆的交互操作。</li><li>分隔视图 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/swWjOxH1cbZoyQD.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>叠加视图 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/etTOVPnp3IqR41W.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol></li><li>数据约简（Reduce）<ol><li>过滤：交叉过滤（一个维度变化，另外跟着变）</li><li>聚合：空间聚合</li><li>不完全互斥<br>可视化系统：Jigsaw<h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3>讲述了可视化中最有趣但却做复杂的交互操作，介绍了视图操纵的几种方法，通过例子体会到不同交互方法的特点和功能，恰当的交互能够给用户带来良好的体验的同时，也能够让用户有更多的发现。</li></ol></li></ol></li></ol><h2 id="第-6-章光与颜色"><a href="#第-6-章光与颜色" class="headerlink" title="第 6 章光与颜色"></a>第 6 章光与颜色</h2><ol><li>颜色表现不止于单一的颜色，还要考虑背景色，和周围的颜色（上下文）。</li><li>环境颜色会增加其自身的<strong>相反颜色</strong>以获得更强的对比<ul><li>深色增加浅色</li><li>红色增加绿色</li><li>蓝色增加黄色</li></ul></li><li>感知差异依赖于背景</li><li>颜色模型：《CIE 标准观测》<ol><li>色度图</li><li>RGB 色度（三角形）</li><li>投影色域</li><li>对立色彩</li></ol></li><li>颜色设计准则（经验）<ol><li>需要考虑上下文，这里的上下文是指除颜色设计之外的各种对象与概念。（比如用户和预算等）</li><li>并不是五彩缤纷就是好的，好的设计<strong>让信息更吸引人</strong>。</li><li>颜色包括 &lt;色相、饱和度、亮度&gt; 三个属性，要精确区分。<ul><li>控制明度，确保易读性</li><li>控制色相种类，定义颜色分组，避免太多颜色竞争而混乱，控制“弹出效应”</li><li>使用中和背景，最小化 “<strong>同时对比效应</strong>”</li></ul></li><li>在不同的可视化场景，根据颜色标注的目标不同，颜色的选择也不同。比如飞机上的仪表盘属于需要快速反应的场景，颜色不能太多。</li><li><a href="https://colorbrewer2.org/#type=sequential&scheme=Blues&n=3">ColorBrewer: Color Advice for Maps (colorbrewer2.org)</a> 网站提供不同的配色方案。</li></ol></li></ol><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>在使用颜色的时候需要考虑很多因素，比如对比、色盲等。在设计的时候需要遵循设计准则，让颜色起到增进理解而不是相反的作用。首先要理解颜色的各种属性，精确区分，谨慎选择。</p><h2 id="第-7-8-章表格"><a href="#第-7-8-章表格" class="headerlink" title="第 7, 8 章表格"></a>第 7, 8 章表格</h2><p>表格分为平面表格（唯一索引）和多维表格（基于多个键的索引）。</p><h3 id="平面数据"><a href="#平面数据" class="headerlink" title="平面数据"></a>平面数据</h3><ol><li>表格数据的比较<ol><li>条形图（可以有不同方向）：要注意<strong>基准问题</strong>（起始值是否从 0 出发）；要注意是用<strong>线性变换</strong>还是<strong>对数变换</strong>，这里的变换是指纵轴单位长度的变化。</li><li>折线图：可用【光滑】【连接】和【散点】。要注意如果两个数据点之间连接起来，代表这个属性是可以<strong>插值</strong>的（比如年龄），如果属性不能插值（比如性别<strong>分类</strong>）则不能随意连接起来。</li><li>散点图：常常用于揭示两个维度之间的<strong>相关性</strong>。如果有第三维的话，可以将其映射到其他的视觉属性，比如颜色、大小；要注意不要<strong>过度绘制</strong>，要善用<strong>透明度</strong>和<strong>趋势线</strong>。</li><li>饼图/圈图：用于表示数据的<strong>组成</strong>。强调精确数值时用条形图，强调比例时用饼图。 </li><li>堆叠条形图：将圈图拉直放到坐标系中，比饼图更加直观。</li><li>堆叠面积图：将离散的堆叠条形图连接起来。</li><li>表示数据的<strong>分布</strong>的图：<ul><li>【直方图】与柱状图的区别是没有间隙，横轴是某个属性的<strong>区间划分</strong>；经验法则：根据数据量的平方根来确定划分区间的数目。</li><li>【密度图】</li><li>【箱型图】 </li><li>【小提琴图】 </li><li>【热力图】 </li></ul></li></ol></li><li>表格可视化经典方法：Table Lens（表格透镜）</li></ol><h3 id="高维数据"><a href="#高维数据" class="headerlink" title="高维数据"></a>高维数据</h3><ol><li>散点图：点的位置表示两个属性，点的大小、颜色表示更多的属性，但往往表示不了高维（大于三个维度）。</li><li>散点矩阵图：每行/列是一个维度，每个单元格绘制两个维度的散点图。下图是 4 个维度两两之间的关系：<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/Uayg1Z4DHKBhMiY.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>SPLOM 聚合-热力图：类似于散点图，减少计算量。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/PxvN5W639bLTRXp.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>相关热力图</li><li>Rolling the Dice：两个散点图无缝转换</li><li>平行坐标：将 x,y,z 等坐标轴平行放置，可以引入更多的维度，<strong>一条连线代表一个数据项</strong>，适用于异构数据。当数据量较大的时候，采用 &lt;增加透明度、捆绑、采样&gt; 来解决杂乱问题。 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/Wr9ozJxniel4cHS.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>降维：保留尽可能多的变化，绘制低维空间，主成分分析。<ol><li>多维缩放：让两两之间在平面的<strong>距离</strong>尽量正比于在高维空间的距离。常用于<strong>文本分析</strong>。</li><li>地形图表示。</li></ol></li><li>维度嵌套/堆叠： 维度有限，工程数据分析常用</li><li>多方法耦合：平行坐标+散点图</li><li>其他方法：太多了，看 8.6 节</li></ol><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p>详细讲述了各种图对于表格数据可视化的作用，适当进行选取。</p><h2 id="第-9-10-章网络结构"><a href="#第-9-10-章网络结构" class="headerlink" title="第 9, 10 章网络结构"></a>第 9, 10 章网络结构</h2><ol><li>层次结构（树）：用于有组织结构、分级分类的数据，有谱系树、进化树、搜索树、决策树。<ol><li>显式树可视化<ol><li>Reingold-Tilford 布局：类似<strong>思维导图</strong></li><li>DOI 树（突出焦点）：树节点过多，只强调部分节点（增大），或用三角形代表不重要的子树。</li><li>双曲线树（突出焦点）：面向<strong>大规模</strong>的层次结构数据，全体数据可见，焦点放大。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/JsTuhIr69aKVSFj.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol></li><li>隐式树可视化：看不见树的结构，但是树的内部关系。较重要的是<strong>包含式非显式布局</strong>。其中最重要的是【树图】（Treemap）：切分空间，节点为长方形，节点面积代表相应属性。 </li><li>树比较可视化：用柱状图进行树之间的比较。</li></ol></li><li>图的可视化<ol><li>两种主要类型的任务：【基于属性】、【基于拓扑】。</li><li>显式图形式：<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/pmPNEA2v9Qs7wuR.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div>，布局标准如下，减少用户阅读的干扰（不用全部满足）：<ul><li>最小化<strong>边交叉</strong></li><li>最小化相邻接点的<strong>距离</strong></li><li>最小化<strong>绘图区域</strong></li><li>边<strong>长度</strong>统一</li><li>最小化边<strong>弯曲</strong></li><li>最大化不同边之间的<strong>角距离</strong>（过多的锐角不容易分辨）</li><li>宽高比约为 1（不太长也不太宽）</li><li>对称性（类似的图结构看起来相似）</li></ul></li><li>矩阵形式：即图的<strong>邻接矩阵</strong>。非常适合邻域相关的任务，不适合路径相关的任务；节点的顺序很重要，<strong>排序</strong>后可能会发现规律。</li><li>混合显示与矩阵形式：NodeTrix。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/7g5MVax8Nln3iKZ.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li><strong>力导向布局算法</strong>：边=弹簧，点=互斥磁铁，算法开销较大 <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/3NKfibdLD14YlWv.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ol></li></ol><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p>不同可视化方法之间需要进行取舍，为了相应的目的，可能会降低对另外一部分性能的支持。不同的可视化方法可以混用，可能达到更好的效果。</p><h2 id="第-10-章时间序列"><a href="#第-10-章时间序列" class="headerlink" title="第 10 章时间序列"></a>第 10 章时间序列</h2><p>时间序列数据就是其中一个变量是时间的数据，也可以说是高维中一个维度是时间的数据。<a href="http://vcg.informatik.uni-rostock.de/~ct/timeviz/timeviz.html">vcg.informatik.uni-rostock.de</a><br>可视化方法有：</p><ol><li>缩略组图（Small Multiples）：在单个页面上显示的呈<strong>缩略图</strong>大小的图形集，表示单个现象的不同方面（不同时间）。也适用于多变量（多维）显示。比如新冠晴雨表。</li><li>形态替换：将时间视为隐藏的维度，为每个时间帧生成一个可视化，然后播放<strong>动画</strong>，用户可以进行追踪（可以加上轨迹）。<a href="https://www.gapminder.org/tools/">Gapminder Tools</a> 。但是该方法有一个问题是<strong>变化盲视</strong>，即人们没有注意到场景中可见元素的变化，需要根据具体情况解决（如增加视觉编码）。</li><li>时间序列图：将横坐标规定为时间，纵坐标为属性（可以有多个，不同编码也可以嵌套堆叠）。对于多个时间序列的比较，有以下几种方法：<ul><li>简单线图：多条不同的线在一起。</li><li>编织线图：交替地根据数值的大小进行前后排列。<ul><li>计算曲线焦点并<strong>垂直切割</strong>曲线面积，按照深度排序优先绘制最高部分面积。</li><li>换句话就是：高个子永远在后面。</li><li><div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/WEJXveUmgLtsiSh.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ul></li><li>缩略视图：见前文。</li><li>水平线图：解决缩略视图在高度较小的情况下空间利用问题。（压缩高度，保留精度）</li><li>堆叠线图：把不同的线型堆叠在一起。</li></ul></li><li>螺旋图：更好的体现<strong>周期性</strong>；注意比例和标注。</li><li>像素驱动方法：每个像素代表一个时间点。<ul><li>一行行/一列列排布</li><li>用填充曲线（Peano-Hilbert）：时间上相近的，空间上也相近。</li></ul></li><li>时间曲线（Time Curves）：时间顺序的排列并不是规则的（水平的），而是根据内容相似性进行分布（弯曲）。曲线的形状可以表示相应的<strong>演变</strong>。（高维映射到低维 / 多维缩放）</li><li>主题河流（ThemeRivers）：表示<strong>文本随时间的变化</strong>。<ul><li>从左到右流经时间，类似堆叠曲线图</li><li> <div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/FzfauWlJb7VdnwL.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li></ul></li></ol><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p>时间在可视化里面可以看做高维中的一个带有先后顺序的属性，所以时间序列可视化都是在视觉上具有一定的连续性，这种联系可以让人们更直观地感受时间的流动与事物的变化。</p><h2 id="第-12-章地图"><a href="#第-12-章地图" class="headerlink" title="第 12 章地图"></a>第 12 章地图</h2><ol><li>使用地图的原则和任务<ol><li>原则：当空间关系被着重强调时使用地图</li><li>任务：寻找<strong>地点/特征</strong>、寻找从 A 到 B 的<strong>路径</strong>、<strong>辨认</strong>与地点相关的属性、基于地点<strong>比较</strong>属性</li></ol></li><li>地图投影 - 将地球展开<ol><li>要考虑的属性：面积、形状、方向、方位、距离、尺度</li><li>投影方法<ol><li>墨卡托投影：投影至一个包裹着地球的<strong>圆柱</strong>上，再展开成平面。所有的经纬线都是直线前垂直相交；<strong>方位准确，面积不准确。</strong></li><li>方位角等距投影：确定航线走向。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/wSAfPmcvJ9oisjU.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>温格尔投影：最小化三种失真（面积、方向、距离）。<div class="tag-plugin image"><div class="image-bg"><img src="https://s2.loli.net/2023/04/05/R7BHFMsZSOVYteN.png" alt="image.png"/></div><div class="image-meta"><span class="image-caption center">image.png</span></div></div></li><li>锥形投影</li><li>阿尔博斯等面积投影：正确显示面积</li><li>复合投影</li><li>其他投影方式：<a href="https://github.com/d3/d3-geo-projection">Extended geographic projections for d3-geo. (github.com)</a></li></ol></li></ol></li><li>区域分布地图<ul><li>用区域填充的颜色或图案来表示数值，如美国大选地图</li><li>问题：具有误导性，因为某区域面积的大小可能与数值没有关系</li><li>解决方法：同一个颜色用深浅区分数值大小，或加入其他编码（如密度）</li></ul></li><li>等高线地图：用来表述在空间中的<strong>数值分布</strong>，特别是数值之间的过渡。</li><li>统计/变形地图：舍弃了地理区域的真实面积，而用数值大小来决定面积（缩放），但保留了原地理区域之间的方位、接壤等信息。</li><li>比例标识地图：保留原地理区域的真实面积，而采用添加圆圈（或其他图形），用它的的大小或其他定量属性来代表数值的大小。</li><li>流图：用于表示数据在不同地域之间的<strong>流动</strong>。（交通部门）</li><li>地铁地图：采用伦敦地铁图方式。线路<strong>水平、垂直或 45 度</strong>，车站间等距。</li></ol><h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><p>地图可视化都是以真实的地理区域为基础，而自然地理区域的面积、方位是固定的，想要表示的数据又往往与面积、方位无关，这就需要考虑如何规避掉区域自然属性对可视化目的的干扰。</p><h2 id="第-13-章经验法则"><a href="#第-13-章经验法则" class="headerlink" title="第 13 章经验法则"></a>第 13 章经验法则</h2><p>大多数情况下简单的、经验性的、探索性的但不是很准确的原则，体系不完整。</p><ol><li>慎用 3D（但是技术在发展）<ol><li><strong>屏幕</strong>不是三维的，更适合 2D 信息</li><li>人对<strong>深度</strong>的判断不够精确</li><li>会产生<strong>遮挡</strong>，无法了解相关关系，带来时间成本</li><li>透视会引起<strong>失真</strong></li><li>3D 下的<strong>文本</strong>会倾斜，造成认知负荷</li></ol></li><li>慎用 2D：能用 1D 的列表就不要用 2D，1D 更适合查找、排序任务。在可视化里面，能简则简，不要追求复杂（<strong>越简洁越有效</strong>）。</li><li>慎用多视图的简单组合：缺乏数据内在逻辑的关联，无法提供深度探索。多视图需要有侧重点，图与图之间要紧密联系，有紧密的交互。（有机结合）</li><li>可见性重于记忆：如果能够通过不同视图直接对比，就不要采用动画，因为动画要求用户记忆，带来负担。</li><li>分辨率优先：<strong>沉浸感依赖于分辨率</strong>。简单说就是优先提高分辨率，而不是整花里胡哨的东西。</li><li>概览优先，缩放与过滤，细节按需呈现：【大量数据 -&gt; 展示概览，忽略细节 -&gt; 提供提示 -&gt; 用户定位到感兴趣的地方 -&gt; 放大 -&gt; 涌现细节】</li><li>交互响应不可缺少：即时反馈非常重要，如不能即时，应告知用户处理进度或先显示一部分。</li><li>黑白情况下的可用性：可视化在黑白情况下依然有效。借用亮度、色度、饱和度等通道。</li><li>功能重于形式：坚持有效性优先原则，考虑用户需求。</li></ol><h3 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h3><p>经验法则是贯穿于所有可视化技术的原则，在进行可视化工作之前和完成之后，都可以对照经验法则检验工作是否得当。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;生活中数据可视化无处不在，以前都会有意无意地进行过可视化的工作，但是通过专业化的分析和方法设计出的结果会更能达到可视化的目的，设计过程也会更加得心应手。另外数据可视化有时候并不只是数据的展现，还包含着数据的挖掘。比如看到一批数据，从不同的角度和考量进行可视化可能会从中挖掘出</summary>
      
    
    
    
    
  </entry>
  
</feed>
